<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[【置顶】DISCLAIMER]]></title>
    <url>%2F9999%2F12%2F31%2FDISCLAIMER%2F</url>
    <content type="text"><![CDATA[本帖为置顶内容，最新内容请向下翻! 本博客仅供本蒟蒻复习用，建议初学者不要看本蒟蒻的博客。 而且本蒟蒻懒癌晚期，博客写的一点都不好。 有诗赞曰： 模拟只会猜题意 贪心只能过样例 数学上来先打表 D P 一般看规律 组合数学看运气 计算几何瞎暴力 图论一顿套模板 数论只会G C D 本站地址: oi.tiger0132.tk 欢迎互链。]]></content>
      <tags>
        <tag>DISCLAIMER</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【网络流】网络流]]></title>
    <url>%2F2018%2F03%2F03%2F%E3%80%90%E7%BD%91%E7%BB%9C%E6%B5%81%E3%80%91%E7%BD%91%E7%BB%9C%E6%B5%81%2F</url>
    <content type="text"><![CDATA[简介 网络流？好难啊。 由于有各种千奇百怪的网络流题的存在，网络流变得异常复杂啊。 UPD： 2018-02-17 21:09:35：Initial Commit 2018-03-03 22:34:54：Change最小费用最大流 to 费用流，Change代码，Add最小割 没用的概念 网络：带权有向图，记作G=(V,E)G=(V,E)G=(V,E)。 容量：网络上的边权，边(u,v)(u,v)(u,v)的容量记作c(u,v)c(u,v)c(u,v)。 网络流：指为这个有向图分配流并且使得它每条边上的流量都不能超过这条边的容量。 流量：网络流上的边权，边(u,v)(u,v)(u,v)的流量记作f(u,v)f(u,v)f(u,v)。 可行流满足： 流量限制：0≤f(u,v)≤c(u,v),(u,v)∈E0\le f(u,v)\le c(u,v),(u,v)\in E0≤f(u,v)≤c(u,v),(u,v)∈E。 平衡条件：∑v′f(u,v′)−∑v′′f(v′′,u)={∣f∣u=Vs0u≠Vs,Vt−∣f∣u=Vt\sum_{v&#x27;}f(u,v&#x27;)-\sum_{v&#x27;&#x27;}f(v&#x27;&#x27;,u)=\left\{\begin{array}{lc}|f|&amp;u=V_s\\0&amp;u\ne V_s,V_t\\-|f|&amp;u=V_t\end{array}\right.∑​v​′​​​​f(u,v​′​​)−∑​v​′′​​​​f(v​′′​​,u)=​⎩​⎨​⎧​​​∣f∣​0​−∣f∣​​​u=V​s​​​u≠V​s​​,V​t​​​u=V​t​​​​ 其中∑v′f(u,v′)\sum_{v&#x27;}f(u,v&#x27;)∑​v​′​​​​f(u,v​′​​)是从顶点uuu流出的流量之和，∑v′′f(v′′,u)\sum_{v&#x27;&#x27;}f(v&#x27;&#x27;,u)∑​v​′′​​​​f(v​′′​​,u)是流入顶点uuu的流量之和，∣f∣|f|∣f∣是可行流的总流量，是源点的净流出量，也是汇点的净流入量。 链：前后两两有边项链的点的序列。(准确的说是弧而不是边，之后均使用弧代替边) 前向弧：和链的方向相同。前向弧集合记作P+P^+P​+​​。 后向弧：和链的方向相反。后向弧集合记作P−P^-P​−​​。 增广路：源点到汇点的一条链，满足前向弧非饱和弧，后向弧非零流弧。 即0≤f(u,v)&lt;c(u,v),0&lt;f(u,v)≤c(u,v)0\le f(u,v)&lt;c(u,v),0&lt;f(u,v)\le c(u,v)0≤f(u,v)&lt;c(u,v),0&lt;f(u,v)≤c(u,v)。 残留容量或剩余流量：还能通过的流量。弧的残留容量或剩余流量记作$$。 每条弧对应一个反向残余流量或反向剩余流量c′(v,u)=−f(u,v)c&#x27;(v,u)=-f(u,v)c​′​​(v,u)=−f(u,v)。 残量网络或残余网络或剩余网络：残留容量或剩余流量组成的网络。 ⚠️ 注意：接下来残留容量和剩余容量统一为残留容量，残量网络、残余网络和剩余网络统称残量网络。 无聊的概念终于结束了，进入正题 就一个概念mmp一堆名字恶心不恶心 最大流 Ford-Fulkerson和Edmonds-Karp略。 Dinic 步骤 初始化 BFS构造层次网络和残量网络。 如果汇点不在层次网络中算法结束。 在层次网络中DFS进行增广，然后回到步骤2。 优化 BFS只要搜到终点就直接返回true。 DFS如果一条边的流量流满了，就不需要再对这条边DFS了，直接返回答案。 DFS如果一个点增广不出流量，那么这次DFS就不要再搜这个点了，再层次图中标记为000。 代码 因为STL的指针失效问题，代码被改了。(难怪我不能过BZOJ1711) 只能AC洛谷的模板题可能和洛谷的数据生成器CYaRon有关，说不定生成算法或者输出没有打乱然后不加反向弧/加错反向弧也可以AC？interesting 该代码用于AcceptedYali 网络流B - Flow Problem/原题HDU3549 - Flow Problem。 代码为了兼容long long或高精，typedef了Flow_Type，自行更改以适应long long或其它数据。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106#include &lt;bits/stdc++.h&gt;using namespace std;typedef int Flow_Type;const Flow_Type INF = 0x3f3f3f3f;const int N = 16384;struct Edge;struct Node &#123; vector&lt;Edge *&gt; edges; int level;&#125; gph[N];struct Edge &#123; Flow_Type capacity, flow; int from, to; Edge *rev; Edge(int from_, int to_, Flow_Type capacity_, Flow_Type flow_ = 0) &#123; capacity = capacity_; from = from_; flow = flow_; to = to_; &#125; Edge() &#123; from = to = 0; capacity = flow = 0; rev = 0; &#125;&#125;;bool levelGraph(int s, int t, int n) &#123; for (int i = 1; i &lt;= n; i++) &#123; gph[i].level = 0; &#125; queue&lt;int&gt; bfs; bfs.push(s); gph[s].level = 1; while (!bfs.empty()) &#123; int pos = bfs.front(); bfs.pop(); for (int i = 0; i &lt; gph[pos].edges.size(); i++) &#123; const Edge&amp; e = *gph[pos].edges[i]; if (e.flow &lt; e.capacity &amp;&amp; !gph[e.to].level) &#123; gph[e.to].level = gph[pos].level + 1; if (e.to == t) return true; // 优化一 else bfs.push(e.to); &#125; &#125; &#125; return false;&#125;Flow_Type findPath(int s, int t, Flow_Type flow) &#123; if (s == t) return flow; Flow_Type ret = 0; for (int i = 0; i &lt; gph[s].edges.size(); i++) &#123; Edge &amp;e = *gph[s].edges[i]; if (gph[s].level + 1 == gph[e.to].level &amp;&amp; e.flow &lt; e.capacity) &#123; Flow_Type tmp = findPath(e.to, t, min(flow, e.capacity - e.flow)); flow -= tmp; e.flow += tmp; e.rev-&gt;flow -= tmp; ret += tmp; if (!flow) break; // 优化二 &#125; &#125; if (!ret) gph[s].level = -1; // 优化三 return ret;&#125;Flow_Type dinic(int s, int t, int n) &#123; Flow_Type ans = 0; while (levelGraph(s, t, n)) &#123; ans += findPath(s, t, INF); &#125; return ans;&#125;int cnt = -1;void addEdge(int from, int to, int capacity) &#123; Edge *e1 = new Edge(from, to, capacity, 0); Edge *e2 = new Edge(to, from, capacity, capacity); e1-&gt;rev = e2; e2-&gt;rev = e1; gph[from].edges.push_back(e1); gph[to].edges.push_back(e2);&#125;int t, n, m, a, b, c;int main() &#123; scanf("%d", &amp;t); for (int cn = 1; cn &lt;= t; cn++) &#123; for (int i = 1; i &lt;= n; i++) &#123; gph[i].edges.clear(); &#125; scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= m; i++) &#123; scanf("%d%d%d", &amp;a, &amp;b, &amp;c); addEdge(a, b, c); &#125; printf("Case %d: %d\n", cn, dinic(1, n, n)); &#125;&#125; 最小割 根据最大流最小割定理，得出最大流===最小割。 内容：最大流就是最小割。 定理证明略 费用流 未完待续…]]></content>
      <categories>
        <category>网络流</category>
      </categories>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【单调队列】洛谷P1886 - 滑动窗口]]></title>
    <url>%2F2018%2F03%2F03%2F%E3%80%90%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E3%80%91%E6%B4%9B%E8%B0%B7P1886-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%2F</url>
    <content type="text"><![CDATA[题意 传送门：洛谷P1886 - 滑动窗口 单调队列的入门题。 给一个序列，求所有长度为kkk的子段的最小值和最大值。 解法 数据的范围是k≤n≤106k\le n\le 10^6k≤n≤10​6​​，暴力当然过不了。 为了简化问题，只考虑最小值。 考虑滑动的过程。 在最开始的[1,k][1,k][1,k]移向[2,k+1][2,k+1][2,k+1]时，第一个元素的生命就结束了，第k+1k+1k+1个元素进入了它的生命周期。 如果有一组数据{2, 3, 1, 4, 2, 6, 3}, k = 3，那么最开头的222和333肯定&quot;没有前途&quot;作为最小值。 而且窗口每移动一次，就会让一些数字&quot;没有前途&quot;。 如果可以在O(1)O(1)O(1)的时间处理每一次移动，那么处理10610^610​6​​的数据将没有任何问题。 现在我们考虑的算法流程是： 移动 -&gt; 删除&quot;没有前途&quot;的元素 -&gt; 添加新元素 -&gt; 删除因为移动而GG的元素 -&gt; 输出/保存当前答案 -&gt; 回到第一步。 第二步和第三步可以用单调队列维护。 一个单调队列，就是一个元素按照一定顺序排列的队列。 考虑一个双端队列，(仅)可以从头尾增删元素，(仅)可以获取头尾元素的信息，那我们可以利用双端队列实现单调队列。下面是实现方法(仍然只考虑最小值)： 插入元素xxx(同时删除一些队尾的元素以满足单调性) 先把所有大于等于xxx的数从队尾删掉 然后把xxx加入进去 删除队首元素 无脑pop_front不久好了？ 然后第二步和第三步对应一次插入，第四步对应一次删除。 然后呢？ 都这么详细了你还要我讲什么？ 代码 注释就不用加了吧，可读性应该还可以。 12345678910111213141516171819202122232425262728293031323334353637#include &lt;bits/stdc++.h&gt;using namespace std;deque&lt;int&gt; maxq, minq;int rec[1000006];int n, k;void min_p() &#123; for (int i = 1; i &lt;= n; i++) &#123; while (!minq.empty() &amp;&amp; minq.back() &gt;= rec[i]) &#123; minq.pop_back(); &#125; minq.push_back(rec[i]); if (i &gt; k) if (minq.front() == rec[i - k]) minq.pop_front(); if (i &gt;= k) printf("%d ", minq.front()); &#125; puts("");&#125;void max_p() &#123; for (int i = 1; i &lt;= n; i++) &#123; while (!maxq.empty() &amp;&amp; maxq.back() &lt;= rec[i]) &#123; maxq.pop_back(); &#125; maxq.push_back(rec[i]); if (i &gt; k) if (maxq.front() == rec[i - k]) maxq.pop_front(); if (i &gt;= k) printf("%d ", maxq.front()); &#125; puts("");&#125;int main() &#123; scanf("%d%d", &amp;n, &amp;k); for (int i = 1; i &lt;= n; i++) &#123; scanf("%d", rec + i); &#125; min_p(); max_p();&#125; 拓展 这个拓展包括的就不是滑动窗口了。话说滑动窗口到底有什么用 单调队列优化DP、递推等一系列东西 其实我也不知道啊……我太弱了]]></content>
      <categories>
        <category>单调队列</category>
      </categories>
      <tags>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【底层】【Internal】STL的指针失效]]></title>
    <url>%2F2018%2F02%2F24%2F%E3%80%90%E5%BA%95%E5%B1%82%E3%80%91%E3%80%90Internal%E3%80%91STL%E7%9A%84%E6%8C%87%E9%92%88%E5%A4%B1%E6%95%88%2F</url>
    <content type="text"><![CDATA[请从纯文本意识流中导出密码 U2FsdGVkX19OTN2mOLYAPArtlWGd+SGOncVjeLv6AwaiKAYGVNJ7Hg1/XqzPZCLySjPpPFqDXI7DplhBsj1z9b8IeCXqu1HUZNizvlKsvNg=]]></content>
      <categories>
        <category>底层</category>
      </categories>
      <tags>
        <tag>底层</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【并查集】BZOJ1214 - 团伙]]></title>
    <url>%2F2018%2F02%2F22%2F%E3%80%90%E5%B9%B6%E6%9F%A5%E9%9B%86%E3%80%91BZOJ1214-%E5%9B%A2%E4%BC%99%2F</url>
    <content type="text"><![CDATA[题意 传送门：BZOJ1214 - 团伙 有nnn个人，有mmm对朋友或敌人的关系。并且满足以下性质： 朋友的朋友也是朋友。 敌人的敌人也是朋友。 所有的朋友组成一个团伙。 现在问你根据这些信息，最多可能有几个团伙。 解法 首先题面中的最多省去，那么问题就转化为求团伙的数量。 求连通块数量可以很容易想到并查集。 朋友关系很好处理，只需要两两merge即可。 敌人咋处理？ 可以考虑把一个人AAA拆成两个点AAA和A′A&#x27;A​′​​。其中A′A&#x27;A​′​​代表A的所有敌人的集合。 那么根据敌人的敌人是朋友，可以得出，如果AAA和BBB是敌人，那么我们要merge以下两对： merge(A,B′)merge(A,B&#x27;)merge(A,B​′​​)和merge(A′,B)merge(A&#x27;,B)merge(A​′​​,B)。 于是只要开到两倍空间就好了。 统计连通块数只需统计111~nnn的连通块个数即可。 代码 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;bits/stdc++.h&gt;using namespace std;int par[10003];int src[10003];int n, m, a, b;char s[2];int ans;int find(int x) &#123; return par[x] == x ? x : par[x] = find(par[x]);&#125;void merge(int x, int y) &#123; if ((x = find(x)) != (y = find(y))) par[x] = y;&#125;int main() &#123; scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= 2 * n; i++) &#123; par[i] = i; &#125; while (m--) &#123; scanf("%1s%d%d", s, &amp;a, &amp;b); if (*s == 'F') &#123; merge(a, b); &#125; else &#123; merge(n + a, b); merge(a, n + b); &#125; &#125; for (int i = 1; i &lt;= n; i++) &#123; src[find(i)] = 1; &#125; for (int i = 1; i &lt;= 2 * n; i++) &#123; ans += src[i]; &#125; printf("%d", ans);&#125; 拓展 求连通块个数当然用并查集啦！ 如果关系种类繁多，错综复杂，可以考虑把一个点&quot;拆&quot;成多个点。]]></content>
      <categories>
        <category>并查集</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【底层】【Internal】坑爹的编译器]]></title>
    <url>%2F2018%2F02%2F18%2F%E3%80%90%E5%BA%95%E5%B1%82%E3%80%91%E3%80%90Internal%E3%80%91%E5%9D%91%E7%88%B9%E7%9A%84%E7%BC%96%E8%AF%91%E5%99%A8%2F</url>
    <content type="text"><![CDATA[请从纯文本意识流中导出密码 U2FsdGVkX1824datvx2RK+LVVNHGywNk0M+nx1RG+XY=]]></content>
      <categories>
        <category>底层</category>
      </categories>
      <tags>
        <tag>底层</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【Codeforces】Codeforces Round #464 (Div. 2) (+1)]]></title>
    <url>%2F2018%2F02%2F17%2F%E3%80%90Codeforces%E3%80%91Codeforces%20Round%20464%20(Div.%202)%2F</url>
    <content type="text"><![CDATA[传送门：Codeforces Round #464 (Div. 2) 今天的状态差到一种境界&gt;_&lt;。然后估计这几次比赛会炼成High Frequency Rating。 本来可以做出C、D的，顿时感觉被出题人坑了。 原来坑题不止中国出，俄罗斯也出(这次出题人是俄罗斯的)。 A 比赛时竟然写了个dfs…… 然后造就了 # When Who Problem Lang Verdict Time Memory 2018-02-17 13:27:26 A - Love Triangle GNU C++ Time limit exceeded on pretest 4 1000 ms 2200 KB 2018-02-17 13:23:57 A - Love Triangle GNU C++ Wrong answer on pretest 7 15 ms 2200 KB 2018-02-17 13:22:58 A - Love Triangle GNU C++ Wrong answer on pretest 7 15 ms 2200 KB 2018-02-17 13:19:46 A - Love Triangle GNU C++ Wrong answer on pretest 7 15 ms 2000 KB 2018-02-17 13:15:25 A - Love Triangle GNU C++ Memory limit exceeded on pretest 6 140 ms 262100 KB 的奇观。 直到我发现只要判断a[a[a[i]]] == i是否成立就可以通过。 然后我终于…… # When Who Problem Lang Verdict Time Memory 2018-02-17 14:21:19 A - Love Triangle GNU C++ Pretests Passed 30 ms 2000 KB 然而那时我已经早就AC了B题…… 最后A我只拿了150150150分。然并卵 代码 12345678910111213141516171819#include &lt;bits/stdc++.h&gt;using namespace std;int a[5003];int n;int main() &#123; scanf("%d", &amp;n); for (int i = 1; i &lt;= n; i++) &#123; scanf("%d", a+i); &#125; for (int i = 1; i &lt;= n; i++) &#123; if (a[a[a[i]]] == i) &#123; puts("YES"); return 0; &#125; &#125; puts("NO");&#125; 教训 不要想多！不要想多！！不要想多！！！ 这堆数据发现了你的想多。 我是这堆数据中的一个超级水数据，我先发现你的想多是你Rating的幸运。警告你：不要想多！不要想多！！不要想多！！！ 你的的方向上有千万个参赛者，只要不想多，这堆数据就无法定位想多者。 如果想多，想多者将被定位，你的Rank将会遭到打击，你的Rating将会被降低！ 不要想多！不要想多！！不要想多！！！ B 因为我没考虑到无解时全部输出000的情况，所以我又WA了一发。还有一发是我没判断仓鼠数量。 然后我一直没调到错误。 直到我发现我在if中的判断少写了个=。 代码 123456789101112131415161718#include &lt;bits/stdc++.h&gt;using namespace std;long long n, x, ax, bx, cx;int k;int main() &#123; scanf("%I64d%d", &amp;n, &amp;k); for (int i = 1; i &lt;= k; i++) &#123; scanf("%I64d", &amp;x); if (n - n % x &gt;= cx) &#123; ax = i; bx = n / x; cx = n - n % x; &#125; &#125; printf("%I64d %I64d", ax, bx);&#125; 教训 小心无解情况。如果允许输出多组解中的任意一个，请不要使用&lt;或者&gt;，用&lt;=和&gt;=替代它们。如果不允许，则将当前答案设置成无解。 C 令f−s=kf-s=kf−s=k。 最开始我写了个前缀和，然后在最后追加kkk个数，把每个长度为kkk的子段算出来然后取个max。 无数次Wrong answer on test 20之后还是没有发现错在哪里。 然后我比赛时就没过这题…… 比赛结束后，我改成了另外一种写法，又无数次Wrong answer on test 9后也没有发现问题。 最后我写了个尺取法或two pointers，然后还是Wrong answer on test 9。 在我砸键盘前的那一刻，我提交了一份骗数据的代码。于是…… Output 12320280: 5007229129971799717: 500722912 Answer 120280 卧槽(上这么难你是人吗)答案一样为什么是202802028020280？百思不得姐。 直到我看见了这句话： If there are many answers, output the smallest among them. mmp。 更错 上面这333个算法，虽然是正着枚举，但是时间是反的。 于是就Wrong answer on test 9了。 估计是LJ出题人不想写太长的SPJ，然后就在Output最后写了这句话。 前缀和的最后 我的前缀和还是莫名其妙的Wrong answer on test 20了，估计算法还是有问题。 代码(双指针) 12345678910111213141516171819202122232425262728293031323334#include &lt;bits/stdc++.h&gt;#ifdef LOCAL#define lld "%lld"#else#define lld "%I64d"#endifusing namespace std;long long arr[200005];long long ax, ai, cur;int n, s, f, t;int main() &#123; scanf("%d", &amp;n); for (int i = 0; i &lt; n; i++) &#123; scanf("%lld", arr+i); &#125; scanf("%d%d", &amp;s, &amp;f); s--; f -= 2; for (int i = s; i &lt;= f; i++) &#123; cur += arr[i]; &#125; for (int i = 1; i &lt;= n; i++) &#123; if (cur &gt;= ax) &#123; ai = t + 1; ax = cur; &#125; f = (f + 1) % n; cur += arr[f] - arr[s]; s = (s + 1) % n; t = (t + n - 1) % n; &#125; printf(lld, ai);&#125; 教训 防被坑最好的方法是多读题。 D 第一感图论，然后写了个枚举。如果a[i] == b[i]那么gph[ax][bx] = 1，然后把所有连边输出。 然后挂在了这个数据上： 1233abcbca 接下来我写了个初始化为000的并查集，然后因为有000点，与初始值矛盾，于是第二个样例挂了。 最后我写了个把所有字母替换成一个字符串中存在的字符的代码，于是Wrong answer on pretest 4。类似这样： 1232abcd 比赛完我才发现，(卧槽上这么难你是人吗)我把并查集的初始值设矛盾了，于是我把初始值设为−1-1−1，然后就Accepted了！ 代码 1234567891011121314151617181920212223242526272829303132#include &lt;bits/stdc++.h&gt;using namespace std;char a[100005], b[100005];int par[31];int n, ans;int find(int x) &#123; return ~par[x] ? par[x] = find(par[x]) : x;&#125;void merge(int x, int y) &#123; if ((x = find(x)) != (y = find(y))) par[x] = y, ans++;&#125;int main() &#123; memset(par, -1, sizeof par); scanf("%d\n", &amp;n); gets(a + 1); gets(b + 1); for (int i = 1; i &lt;= n; i++) &#123; if (a[i] != b[i]) &#123; int ax = a[i] - 'a'; int bx = b[i] - 'a'; merge(ax, bx); &#125; &#125; printf("%d\n", ans); for (int i = 0; i &lt; 26; i++) &#123; find(i); if (par[i] != -1) printf("%c %c\n", i + 'a', par[i] + 'a'); &#125;&#125; 教训 乱初始化的后果是很严重的。写并查集前先想想有没有0号点。 E 二分三分不会写不好写，于是来优化暴力。 令f(x,i)f(x,i)f(x,i)代表选择最大的数xxx和前iii个数时的max−meanmax-meanmax−mean。 显然添加数字之后并不会影响以前的答案。 于是可以O(n)O(n)O(n)Accepted这道题。 代码 123456789101112131415161718192021222324252627282930313233343536// mmp为什么只有C++14及以上可以通过编译?详见下一篇底层博客————坑爹的编译器。#include &lt;bits/stdc++.h&gt;#ifdef LOCAL#define lld "%lld"#else#define lld "%I64d"#endifusing namespace std;typedef long long ll;typedef long double ld;int q, l, n, op, ptr;ll arr[500005];ld ans;ld f(ll x, int i) &#123; return (x * i - arr[i]) / ld(i + 1);&#125;int main() &#123; scanf("%d", &amp;q); ll x; while (q--) &#123; scanf("%d", &amp;op); if (op &amp; 1) &#123; scanf(lld, &amp;x); while (ptr &lt; n &amp;&amp; f(x, ptr) &lt;= f(x, ptr + 1)) ptr++; ans = max(ans, f(x, ptr)); arr[n+1] = arr[n] + x; n++; &#125; else &#123; printf("%.10Lf\n", ans); &#125; &#125;&#125;]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【莫队算法】BZOJ1878 - HH的项链]]></title>
    <url>%2F2018%2F02%2F16%2F%E3%80%90%E8%8E%AB%E9%98%9F%E7%AE%97%E6%B3%95%E3%80%91BZOJ1878-HH%E7%9A%84%E9%A1%B9%E9%93%BE%2F</url>
    <content type="text"><![CDATA[⚠️ 注意：【莫队算法】莫队算法已合并至【莫队算法】BZOJ1878 - HH的项链(这篇博客)。 题意 传送门：BZOJ1878 - HH的项链 莫队模板题。 给一个长度为nnn数列，要你查询mmm次[l,r][l,r][l,r]区间中不同的数字的个数。 n≤106,m≤105n\le 10^6,m\le 10^5n≤10​6​​,m≤10​5​​ 解法 虽然看起来这题可以卡掉莫队，但是我还是用莫队AC了。 然后直接套模板即可。 存储结构 1234567struct query &#123; int l, r, *ans; bool operator&lt;(const query&amp; x) const &#123; if (l / blockSize == x.l / blockSize) return r &lt; x.r; return l / blockSize &lt; x.l / blockSize; &#125;&#125; q[200005]; lll和rrr代表查询中的l,rl,rl,r，ansansans代表保存答案的位置的指针(这样排序之后输出的顺序就不会乱)。 blockSize是每个块的大小。 修改操作 1234int extend(int x, int offset) &#123; if (~offset) return 1 == ++cnt[x]; // +1 else return -!--cnt[x]; // -1&#125; xxx代表更新的数字，offset代表加还是减(1,−1)(1,-1)(1,−1)，返回值用来更新答案。 如果+1+1+1之后cnt[x]正好为111，那就是新增了一种数字，返回111。 如果−1-1−1之后cnt[x]正好为000，那就是减少了一种数字，返回−1-1−1。 莫队算法 12345678int l = 1, r = 0, lans = 0;for (int i = 1; i &lt;= m; i++) &#123; while (r &lt; q[i].r) lans += extend(src[++r], 1); while (r &gt; q[i].r) lans += extend(src[r--], -1); while (l &gt; q[i].l) lans += extend(src[--l], 1); while (l &lt; q[i].l) lans += extend(src[l++], -1); *q[i].ans = lans;&#125; lans代表当前查询的答案。 代码 123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;bits/stdc++.h&gt;using namespace std;int n, m, blockSize, src[50004], ans[200005], cnt[1000006];struct query &#123; int l, r, *ans; bool operator&lt;(const query&amp; x) const &#123; if (l / blockSize == x.l / blockSize) return r &lt; x.r; return l / blockSize &lt; x.l / blockSize; &#125;&#125; q[200005];int extend(int x, int offset) &#123; if (~offset) return 1 == ++cnt[x]; else return -!--cnt[x];&#125;int main() &#123; scanf("%d", &amp;n); for (int i = 1; i &lt;= n; i++) &#123; scanf("%d", src+i); &#125; blockSize = ceil(sqrt(n)); scanf("%d", &amp;m); for (int i = 1; i &lt;= m; i++) &#123; scanf("%d%d", &amp;q[i].l, &amp;q[i].r); q[i].ans = ans+i; &#125; sort(q + 1, q + m + 1); int l = 1, r = 0, lans = 0; for (int i = 1; i &lt;= m; i++) &#123; while (r &lt; q[i].r) lans += extend(src[++r], 1); while (r &gt; q[i].r) lans += extend(src[r--], -1); while (l &gt; q[i].l) lans += extend(src[--l], 1); while (l &lt; q[i].l) lans += extend(src[l++], -1); *q[i].ans = lans; &#125; for (int i = 1; i &lt;= m; i++) &#123; printf("%d\n", ans[i]); &#125;&#125;]]></content>
      <categories>
        <category>莫队算法</category>
      </categories>
      <tags>
        <tag>莫队算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【分治】笔记 - day6上午]]></title>
    <url>%2F2018%2F02%2F12%2F%E3%80%90%E5%88%86%E6%B2%BB%E3%80%91%E7%AC%94%E8%AE%B0-day6%E4%B8%8A%E5%8D%88%2F</url>
    <content type="text"><![CDATA[⚠️注意：这是ZROI集训的源笔记，其中有很多缺失和遗漏以及无法看懂的部分，大家就不要看了吧。 以下是原笔记： 分治 归并排序 将两个已经有序的数组用O(n)O(n)O(n)合并成一个有序的数组。 时间复杂度O(nlogn)O(n\log n)O(nlogn) 树的深度O(logn)O(\log n)O(logn)层，归并整个一层O(n)O(n)O(n)，共O(nlogn)O(n\log n)O(nlogn)。 使用范围 规模小可以方便计算 可以划分成较小子问题 子问题全部解出后可以解决原问题 子问题独立 Master Theorem 设a≥1,b≥1a\ge 1,b\ge 1a≥1,b≥1，设f(n)f(n)f(n)为一函数，T(n)T(n)T(n)由递归式T(n)=aT(nb)+f(n)T(n)=aT(\frac nb)+f(n)T(n)=aT(​b​​n​​)+f(n)定义。 若f(n)&lt;nlogbaf(n)&lt;n^{\log_ba}f(n)&lt;n​log​b​​a​​，则T(n)=O(nlogba)T(n)=O(n^{\log_ba})T(n)=O(n​log​b​​a​​) 若f(n)=nlogbaf(n)=n^{log_ba}f(n)=n​log​b​​a​​，则T(n)=O(nlogbalog2n)T(n)=O(n^{log_ba}log_2n)T(n)=O(n​log​b​​a​​log​2​​n) 若f(n)&gt;nlogbaf(n)&gt;n^{log_ba}f(n)&gt;n​log​b​​a​​，且对于任意c&lt;1c&lt;1c&lt;1与所有足够大的nnn，都有af(nb)≤cf(n)af(\frac nb)\le cf(n)af(​b​​n​​)≤cf(n)，则T(n)=O(f(n))T(n)=O(f(n))T(n)=O(f(n))。 逆序对 n≤105n\le10^5n≤10​5​​ 一分为二。考虑左边自身、右边自身、跨两边。跨两边就two-pointers解决。 快速幂 分治大法好位运算大法好 即时战略(WC2018T2) 35pts 从一个点开始，枚举所有其它点，然后把它周围所有点探索出来，类似于bfs。O(n2)O(n^2)O(n​2​​)。 完全二叉树 Solution 1 O(n2)O(\frac n2)O(​2​​n​​)查出一个点在哪个子树。 然后查下面的O(n)O(n)O(n)个点，在标记中使用堆式编号。 然后就用主定理证出O(nlogn)O(n\log n)O(nlogn)了。 Solution 2 因为完全二叉树的深度是O(logn)O(\log n)O(logn)的，所以可以用O(nlogn)O(n\log n)O(nlogn)过掉。 Solution 3 在完全二叉树上BFS！ 百度地图的实时路况 分治严格不经过的点，solve(l,r)solve(l,r)solve(l,r)代表[l,r][l,r][l,r]都没有被考虑。 = = 区间的价值 枚举最小值。然后从左右两端找最大值。 BD String 超淼题。 可以证明，S(n)S(n)S(n)中B的数量是2n−12^{n-1}2​n−1​​。 然后计算solve(n)solve(n)solve(n)： n=0n=0n=0返回000。 n=1n=1n=1返回111。 mid=2⌊log2n⌋mid=2^{\lfloor\log_2n\rfloor}mid=2​⌊log​2​​n⌋​​。如果2mid−1=n2mid-1=n2mid−1=n，返回midmidmid。 否则返回f(2mid−1−n)+n+1−midf(2mid-1-n)+n+1-midf(2mid−1−n)+n+1−mid。 My solution 令f(x)f(x)f(x)为S(n)S(n)S(n)中[0,x)[0,x)[0,x)的B的数量。 那么答案就等于f(l)−f(r−1)f(l)-f(r-1)f(l)−f(r−1)。 然后考虑xxx的位置。如果在后半段就将2n−1+12^{n-1}+12​n−1​​+1加上后半段。 前半段就直接从n−1n-1n−1算。 欧几里得最近点对 先按xxx排序，然后把点分成两半。 然后初始化答案d=+∞d=+\inftyd=+∞。 然后在左右两边枚举点，对答案更新有用的点一定是在该点为圆心半径为ddd的点。这样的点最多只有不到666个。 Tricky Function g(i,j)g(i,j)g(i,j)就是算(i,j](i,j](i,j]的区间和。 令bbb为aaa的前缀和，那么g(i,j)=b[i]−b[j]g(i,j)=b[i]-b[j]g(i,j)=b[i]−b[j]。 xxx坐标为编号，yyy坐标为前缀和。 然后就差一个根号！ 然后交个板子就AC了。]]></content>
      <categories>
        <category>分治</category>
      </categories>
      <tags>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【DP】笔记 - day4]]></title>
    <url>%2F2018%2F02%2F10%2F%E3%80%90%E5%9B%BE%E8%AE%BA%E3%80%91%E7%AC%94%E8%AE%B0-day4%2F</url>
    <content type="text"><![CDATA[⚠️注意：这是ZROI集训的源笔记，其中有很多缺失和遗漏以及无法看懂的部分，大家就不要看了吧。 以下是原笔记： 搜索 DFS 二分图判定 dfs即可。111相邻222，222相邻111。 不是二分图则会染色矛盾。 时空阵 先不考虑距离为mmm。 考虑bfs的分层。 dpi,j,kdp_{i,j,k}dp​i,j,k​​前iii层，jjj个点，第iii层kkk个点的方案数。 枚举第i+1i+1i+1层的点数xxx。 ​ 标号 层内 跨层 转移：dpi+1,j+x,x=dpi,j,k⋅(n−jx)⋅2(x2)⋅(2k−1)xdp_{i+1,j+x,x}=dp_{i,j,k}\cdot\binom{n-j}x\cdot 2^\binom x2\cdot(2^k-1)^xdp​i+1,j+x,x​​=dp​i,j,k​​⋅(​x​n−j​​)⋅2​(​2​x​​)​​⋅(2​k​​−1)​x​​ 现在考虑距离为mmm。 dpm,j,k⋅kn−1dp_{m,j,k}\cdot \frac k{n-1}dp​m,j,k​​⋅​n−1​​k​​第mmm层，jjj个点，第mmm层kkk个点。kn−1k\over n-1​n−1​​k​​是因为概率和对称性。 每个k元组出现的概率是相等的。 再考虑剩下的n−jn-jn−j个点连边。 它们可以内部连边，并且只能和第mmm层(k个点)连边。 ​ 内部 外部 所以dpm,j,k⋅kn−1⋅2(n−j2)⋅2k(n−j)dp_{m,j,k}\cdot\frac k{n-1}\cdot 2^\binom {n-j}2\cdot 2^{k(n-j)}dp​m,j,k​​⋅​n−1​​k​​⋅2​(​2​n−j​​)​​⋅2​k(n−j)​​。 欧拉回路 正常版 图必须联通，小心孤立点 充要条件： 欧拉路：000或222个奇点。 欧拉回路：全是偶点。 证明略 “回溯算法” 算法证明略 代码： 12345678910111213void dfs(int u, int c) &#123; // O(n+m) void dfs(int u) &#123; while (!e[u].empty()) &#123; int v = e[u][e[u].size()-1].first; int id = e[u][e[u].size()-1].second; e[u].pop_back(); // O(1) 减小循环代价 if (vis[id]) continue; // 有向图删了 vis[id] = 1; // 有向图删了 dfs(v); ans.push_back(id);// auto it=--e[u].end(); &#125;&#125; 高端版 最少路径数覆盖整张图？ 先往2k2k2k个奇点之间加kkk条边让奇点消失。然后跑欧拉回路，然后拆边，会拆成kkk条路径。 然后这题就成了结论题。 例题 1 ? 2 将区间中的lll和rrr构点建边，然后判跑一遍欧拉回路。 如果有欧拉回路，那么方向是→就将区间设为111，如果是←就设为−1-1−1。 没有欧拉回路就把点全部升序排序，然后121212、343434、565656…的连边。 然后去掉加的边按方向设置111或−1-1−1。 证明略 Dijkstra 每次将最短路最短的未确定点确定，然后再将新确定点相邻的点更新，直到跑完为止。 可以利用小根堆将复杂度优化至O((n+m)logn)O((n+m)\log n)O((n+m)logn)。 平板电视大法好 稠密图用naive算法，不要优化！不要优化！！不要优化！！！ Bellman-Ford O(nm)O(nm)O(nm) 不怕负权边。 dis[u][i]dis[u][i]dis[u][i]走不超过iii步到uuu点 方程：dis[u][i]=min(dis[u][i−1],dis[v][i−1]+w[v][u])dis[u][i]=min(dis[u][i-1], dis[v][i-1]+w[v][u])dis[u][i]=min(dis[u][i−1],dis[v][i−1]+w[v][u]) 华容道 并没有 dis(x,y,dir)dis(x,y,dir)dis(x,y,dir)表示把(x,y)(x,y)(x,y)往dirdirdir方向移动。 将空格移到(x,y)(x,y)(x,y)附近需要ccc的代价，可以预处理。 多点最短路 HDU 6166 简单版 考虑无向图。 先把所有kkk中的点的disdisdis设为000，然后松弛时记录父节点。 然后枚举所有边，如果边的两边是来自不同的源点，那么用dis[u]+dis[v]+w[u][v]dis[u]+dis[v]+w[u][v]dis[u]+dis[v]+w[u][v]更新答案。 正常版 ????? 定义f(u,v)f(u,v)f(u,v)为uuu点集到vvv点集的最短路。 然后弄一个超级源和一个超级汇，一个连整个uuu，一个连整个vvv，然后算一下最短路即可。 然后做2log2n2log_2n2log​2​​n跑出对于u,v∈S,u≠vu,v\in S,u\ne vu,v∈S,u≠v中f(u,v)f(u,v)f(u,v)。 复杂度nlog2nnlog^2nnlog​2​​n。 强连通分量 如果一张图中所有的点对(u,v)(u,v)(u,v)中的u,vu,vu,v可以互相到达，那么张图是强连通的。 树边：从父亲跑到儿子的边。 返祖边：从晚辈跑到祖辈的边。 前向边：从祖辈跑到晚辈的边。(不包括树边) 横叉边：乱连的边。 Low Case：树边+返祖边(u,v)(u,v)(u,v) 那么uuu到vvv的路径全部在同一个强连通分量里。 首先弄一个时间戳，也就是dfn。 定义low[i]代表iii子树能通过返祖边和横叉边能够到的的最浅的点(跳出子树为止)。 如果dfn[i]=low[i]，那么iii子树再也跳不上去了，所以iii子树组成一个强连通分量。 注意！如果你通过横叉边往上跑的时候跑到的是一个完整的强连通分量，那么Congratulations，这个作废。 12345678910111213141516171819202122void dfs(int u) &#123; dfn[u] = low[u] = ++ind; // index ins[u] = 1; // instack(没形成强连通分量的栈) st[++top] = u; for (int i = 0; i &lt; e[u].size(); i++) &#123; int v = e[u][i]; if (!dfn[v]) &#123; dfs(v); low[u] = min(low[u], dfs(low[v])); &#125; else if (ins[v]) &#123; // 不是强连通分量 low[u] = min(low[u], dfn[v]); // 可以换成low[v] &#125; &#125; if (dfn[u] == low[u]) &#123; ++cnt; while (1) &#123; bel[st[top]] = cnt; // belong ins[st[top]] = 0; if (st[top--] == u) break; &#125; &#125;&#125; 缩点 缩点后一定是个DAG。 最大半联通子图 先缩点。 如果图有分叉就会发现不可达，然后求最长链即可。 于是每个点都有了权值w[i]w[i]w[i]。 最后就直接dp[u]=max(dp[v]+w[v]),(u,v)∈Edp[u]=\max(dp[v]+w[v]), (u,v)\in Edp[u]=max(dp[v]+w[v]),(u,v)∈E。]]></content>
      <categories>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【DP】笔记 - day3]]></title>
    <url>%2F2018%2F02%2F09%2F%E3%80%90DP%E3%80%91%E7%AC%94%E8%AE%B0-day3%2F</url>
    <content type="text"><![CDATA[⚠️注意：这是ZROI集训的源笔记，其中有很多缺失和遗漏以及无法看懂的部分，大家就不要看了吧。 以下是原笔记： day2 欠账 最长简单环 fp,s,tf_{p,s,t}f​p,s,t​​从sss到ttt经过点集ppp是否存在。 初始：f2i−1,i,i=1f_{2^{i-1},i,i}=1f​2​i−1​​,i,i​​=1 如果iii满足(t,i)∈E,(p&gt;&gt;(i+1)&amp;1)=0(t, i) \in E, (p&gt;&gt;(i+1)\&amp;1)=0(t,i)∈E,(p&gt;&gt;(i+1)&amp;1)=0，就可以转移fp∣(1&lt;&lt;(i−1)),s,if_{p|(1&lt;&lt;(i-1)),s,i}f​p∣(1&lt;&lt;(i−1)),s,i​​ fp,s,t=1f_{p,s,t}=1f​p,s,t​​=1且(t,s)∈E(t,s) \in E(t,s)∈E，则长度为__builtin_popcount(p)。 复杂度：2nn32^nn^32​n​​n​3​​ 优化 限定sss是环中最小的编号，其它条件不变。 转移时枚举s+1...ns+1...ns+1...n ∑in2nn=n∑i=1n2i=O(2nn)\sum_i^n2^nn=n\sum_{i=1}^n2^i=O(2^nn)∑​i​n​​2​n​​n=n∑​i=1​n​​2​i​​=O(2​n​​n) 例题6 fpf_pf​p​​在组里的最大收益。 fp=maxsw[s]+fp−sf_p=\max\limits_s w[s]+f_{p-s}f​p​​=​s​max​​w[s]+f​p−s​​ (p&amp;s)=s(p\&amp;s)=s(p&amp;s)=s O(4n)O(4^n)O(4​n​​)并不能跑过n=16n=16n=16。 优化 ppp有2k−12^{k-1}2​k−1​​个非空子集，可以用000~2k−12^{k-1}2​k−1​​表示所有的子集。只需2k−12^{k-1}2​k−1​​枚举子集。 对于每一个集合PPP，那么子集数为2∣P∣2^{|P|}2​∣P∣​​。 复杂度O(3n)O(3^n)O(3​n​​) 123for (s=p; s; s=(s-1)&amp;p) &#123; // 不重复枚举所有p的子集 // do something...&#125; 生成树计数 令111为根。 fi,pf_{i,p}f​i,p​​代表iii的子树中，有ppp个点的子树个数。 1init : f[i][1&lt;&lt;(i-1)] = 1; fi,p=∑fj,sfi,p−s,s⊆P−{i},j∈sf_{i,p}=\sum f_{j,s}f_{i,p-s}, s\subseteq P-\{i\} , j\in sf​i,p​​=∑f​j,s​​f​i,p−s​​,s⊆P−{i},j∈s 设min(P−{i})=k\min(P-\{i\})=kmin(P−{i})=k。 复杂度O(3nn2)O(3^nn^2)O(3​n​​n​2​​) 枚举顺序 i 1~n P 0~2^n-1 斯坦纳树 fi,pf_{i,p}f​i,p​​以iii为根，经过关键点集合ppp。 i,ji,ji,j是关键点fi,p=minfj,s+fi,p−s+wi,jf_{i,p}=\min f_{j,s}+f_{i,p-s}+w_{i,j}f​i,p​​=minf​j,s​​+f​i,p−s​​+w​i,j​​ 孤立点从子树接边fi,p=minfj,p+wi,jf_{i,p}=\min f_{j,p}+w_{i,j}f​i,p​​=minf​j,p​​+w​i,j​​ 带环，需要用最短路转移！ 轮廓线DP⊆\subseteq⊆状压 例题9 暴力 fi,pf_{i,p}f​i,p​​代表扫到了iii列，ppp从上一行突出来了。 Procedure： ppp碰到障碍点，直接扔掉。 枚举sss，代表在第iii行会横出下一行。 满足s&amp;(p|障碍)=0。 而且竖着的骨牌必须可以摆在~(s|障碍|p)中。 复杂度3^nn^{很多次方} 高端操作(轮廓线DP) 首先一列一列放骨牌，然后总共有n+1n+1n+1个边界。 放置的方式： 12345671 8 15 . #2 9 . . #3 10. . #4 11. #5 12. #6 13. #7 14. # 边界： 1234567. . . . # 1. . . . # 1. . . . # 1. . . # 2. . . # 1. . . # 1. . . # 1 如图，有n+1n+1n+1个边界。 可以记录状态fi,j,pf_{i,j,p}f​i,j,p​​代表放到了(i,j)(i,j)(i,j)点，边界ppp方案数。 不合法状态： iii要长出来或i+1i+1i+1要长出来并且(i,j)(i,j)(i,j)是障碍。 iii和i+1i+1i+1都要长出来。 合法状态： iii和i+1i+1i+1只有一个长出来并且(i,j)(i,j)(i,j)不是障碍， 转移到P−(1&lt;&lt;(i−1))P-(1&lt;&lt;(i-1))P−(1&lt;&lt;(i−1))或P−(1&lt;&lt;i)P-(1&lt;&lt;i)P−(1&lt;&lt;i)。 其它长出情况直接转移到P+(1&lt;&lt;(i−1))P+(1&lt;&lt;(i-1))P+(1&lt;&lt;(i−1))或P+(1&lt;&lt;i)P+(1&lt;&lt;i)P+(1&lt;&lt;i)。 最后扫完一行后需要更新轮廓线才可以继续DP。 新的轮廓线中的第一个一定是000(边界外不可能有股牌下来) 如果n+1n+1n+1为111就直接丢掉(伸到了边界外面) 然后就直接左移一位(111移到222 222移到333…nnn移到n+1n+1n+1) 复杂度O(2nn2)O(2^nn^2)O(2​n​​n​2​​) 枚举顺序jjj、iii、ppp。 k国王问题 fi,j,k,pf_{i,j,k,p}f​i,j,k,p​​ 放到(i,j)(i,j)(i,j)，放了kkk个国王，轮廓线外的ppp格会被攻击。 讨论两种情况：放还是不放。 放就把周围一圈的ppp更新，否则直接转移。 maxi=0\max\limits_i=0​i​max​​=0 day2e B f_{叶子}=+\inf,f_.=0 fi+=min(w,fj)f_i+=\min(w,f_j)f​i​​+=min(w,f​j​​) C fi,pf_{i,p}f​i,p​​ 前iii选ppp是否能到达 枚举aaa、bbb。 fi,p−&gt;fi+1,p+(1&lt;&lt;(a−1))+(1&lt;&lt;(b−1))f_{i,p}-&gt;f_{i+1,p+(1&lt;&lt;(a-1))+(1&lt;&lt;(b-1))}f​i,p​​−&gt;f​i+1,p+(1&lt;&lt;(a−1))+(1&lt;&lt;(b−1))​​ (p&gt;&gt;(a,b−1))&amp;1=0(p&gt;&gt;(a,b-1))\&amp;1=0(p&gt;&gt;(a,b−1))&amp;1=0，满足边 A fi,j=∑k=0wifi−1,j−k(jk)f_{i,j}=\sum_{k=0}^{w_i}f_{i-1,j-k}\binom jkf​i,j​​=∑​k=0​w​i​​​​f​i−1,j−k​​(​k​j​​) O((∑wi)2)O((\sum w_i)^2)O((∑w​i​​)​2​​) D 改板轮廓线DP模板 E fi,jf_{i,j}f​i,j​​深度≤j\le j≤j，有iii点。 fi−1,j−1⋅2⋅if_{i-1,j-1}\cdot 2\cdot if​i−1,j−1​​⋅2⋅i ∑k=1i−2fk,j−1⋅fi−k−1,j−1⋅i⋅(i−2i−k−2)\sum_{k=1}^{i-2}f_{k,j-1}\cdot f_{i-k-1,j-1}\cdot i\cdot \binom{i-2}{i-k-2}∑​k=1​i−2​​f​k,j−1​​⋅f​i−k−1,j−1​​⋅i⋅(​i−k−2​i−2​​) f0,i=1f_{0,i}=1f​0,i​​=1 f1,i=1f_{1,i}=1f​1,i​​=1 状态O(nd)O(nd)O(nd)，转移O(n)O(n)O(n) 复杂度O(n2d)O(n^2d)O(n​2​​d)]]></content>
      <categories>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【DP】笔记 - day2]]></title>
    <url>%2F2018%2F02%2F08%2F%E3%80%90DP%E3%80%91%E7%AC%94%E8%AE%B0-day2%2F</url>
    <content type="text"><![CDATA[⚠️注意：这是ZROI集训的源笔记，其中有很多缺失和遗漏以及无法看懂的部分，大家就不要看了吧。 以下是原笔记： day1欠账 简单题 fn,x,yf_{n,x,y}f​n,x,y​​长度aaa，x,yx,yx,y表示111和000的奇偶性。 fn,0,y−&gt;fn,0,y xor 1f_{n,0,y} -&gt; f_{n,0,y\ xor\ 1}f​n,0,y​​−&gt;f​n,0,y xor 1​​ fn,x,0−&gt;fn,x xor 1,0f_{n,x,0} -&gt; f_{n,x\ xor\ 1,0}f​n,x,0​​−&gt;f​n,x xor 1,0​​ 矩阵优化 fn+1,0,0,fn+1,0,1,fn+1,1,0,fn+1,1,1f_{n+1,0,0}, f_{n+1,0,1}, f_{n+1,1,0}, f_{n+1,1,1}f​n+1,0,0​​,f​n+1,0,1​​,f​n+1,1,0​​,f​n+1,1,1​​ 000 0/10/10/1 不放 111 转移矩阵 [0100100100000100]\left[ \begin{array}{c} 0 &amp; 1 &amp; 0 &amp; 0\\ 1 &amp; 0 &amp; 0 &amp; 1\\ 0 &amp; 0 &amp; 0 &amp; 0\\ 0 &amp; 1 &amp; 0 &amp; 0 \end{array} \right] ​⎣​⎢​⎢​⎡​​​0​1​0​0​​​1​0​0​1​​​0​0​0​0​​​0​1​0​0​​​⎦​⎥​⎥​⎤​​ 树形DP 重点！如果合并两个子树时间是两个子树的乘积，那么这个树形DP是平方的 模板 1234567891011121314151617181920212223242526#include &lt;bits/stdc++.h&gt;using namespace std;void merge(int x, int p) &#123; // 合并子树 f[p][0] = f[p][1] + /* max(f[k][0], f[k][1]) */; f[p][1] = f[p][0] + f[x][1];&#125;void init(int x) &#123; // 初始化 // f[k][0] = 0;// f[k][1] = 1;&#125;void treedp(int x) &#123; // 树形dp 不需要改 for (int i = 0; i &lt; c[x].size(); i++) &#123; treedp(c[x][i]); &#125; init(x); for (int i = 0; i &lt; c[x].size(); i++) &#123; merge(c[x][i], x); &#125;&#125;int main() &#123; // 状态 -&gt; init -&gt; merge &#125; 最大独立集 同模板 例题2 123456state: f[i][0], f[i][1]init : f[i][1] = f[i][0] = 0;merge: f[x][1] = max(f[p][1] + max(f[x][1], f[x][0]), f[p][0] + f[x][0] + 1); : f[x][0] = f[p][0] + max(f[x][1], f[x][0]); // 缺失部分 例题3 12345state: f[i][0] 我不是，孩子也不是[不合法] : f[i][1] 我不是，孩子是[合法] : f[i][2] 我是[满足]init : f[i][0] = 0, f[i][2] = 1, f[i][1] = 0x3f3f3f3fmerge: x\p 0 1 2 0 2 1 0 1 2 2 1 1 2 HOMEWORK：距离为222 例题4 简化版(只考虑子树) 12345f[i][x][y] 当前子树关键点 当前子树的子树f[i][0][0] = 0f[i][1][0] = 1f[i][0][1] = f[i][1][1] = 0x3f3f3f3f x\p 0,0 0,1 1,0 1,1 0 0,1 1,1 1 1,0 1,1 1,0 1,1 普通版 存在度数大于333的点 贪心地选一个度大于333的点为根，然后同简化版 不存在(链)，输出111。 例题5 1234567f[i]表示只删以i为根的子树的ans(minimal maximum)f[叶子]=0x3f3f3f3ff[其它]=0merge:f[i]=max(f[i], x); 练习1 1234 0 1 ---0|0 11|0 x ans = 5471492 [暂缺] 例题6 简化版(只考虑子树) ff=max(ff,fj−wj)f_f=\max(f_f, f_j-w_j)f​f​​=max(f​f​​,f​j​​−w​j​​) 普通版 令子树外最长路为uiu_iu​i​​。 维护次大值gfg_fg​f​​和fff_ff​f​​的来源wherefwhere_fwhere​f​​。 gfg_fg​f​​初始000。 1234if (f[k] + w &gt; f[f]) &#123; g[f] = f[k]; &#125; 123456User -&gt; Web: SubmitWeb -&gt; Judger: SubmitNote right of Judger: Waiting &amp; JudgingJudger -&gt; Web: WAWeb -&gt; User: WANote left of User: MMP 123456789101112131415161718start=&gt;start: 做题needIOOptimize=&gt;condition: 需要快速IO?kengDie=&gt;operation: 坑爹,命题人SBimplementation=&gt;condition: 大模拟题?codeLong=&gt;operation: 难写,命题人SBconstant=&gt;condition: 题目还卡常?boring=&gt;operation: 无聊,命题人SBisEasy=&gt;condition: 题目太简单?water=&gt;operation: 太水,命题人SBend=&gt;end: 婊死出题人start-&gt;needIOOptimizeneedIOOptimize(yes)-&gt;kengDie-&gt;endneedIOOptimize(no)-&gt;implementationimplementation(yes)-&gt;codeLong-&gt;endimplementation(no)-&gt;constantconstant(yes)-&gt;boring-&gt;endconstant(no)-&gt;water-&gt;end 例题7 令每条边经过fif_if​i​​次，那么ans=∑difians = \sum d_if_ians=∑d​i​​f​i​​，did_id​i​​是权值。 dfs求出fif_if​i​​即可。 监测站 乱搞 树形背包 fi,jf_{i,j}f​i,j​​表示iii子树jjj容量 gi,jg_{i,j}g​i,j​​表示不选iii的子树jjj容量 初始gi,j=0g_{i,j}=0g​i,j​​=0 如果选iii就一定选整个子树 ：max(gi,j,∑vi)(j≥∑vi)max(g_{i,j},\sum v_i)(j \ge \sum v_i)max(g​i,j​​,∑v​i​​)(j≥∑v​i​​) gi,a+b′=gi,a+fc,bg&#x27;_{i,a+b}=g_{i,a}+f_{c,b}g​i,a+b​′​​=g​i,a​​+f​c,b​​ fi,j={gi,jj&gt;∑vi,max(gi,j,∑vi)j≥∑vi. f_{i,j}=\left\{\begin{array}l g_{i,j} &amp; j&gt;\sum v_i,\\ max(g_{i,j}, \sum v_i) &amp; j\ge \sum v_i. \end{array}\right. f​i,j​​={​g​i,j​​​max(g​i,j​​,∑v​i​​)​​​j&gt;∑v​i​​,​j≥∑v​i​​.​​ 时间复杂度O(n3)O(n^3)O(n​3​​) 状压DP 例题1 fi,p[n]f_{i,p[n]}f​i,p[n]​​前iii衣服，pip_ip​i​​裤子是否配对。 for j=1...n (i+1, j)可配对，pj=0p_j=0p​j​​=0 f[i+1][j|(1&lt;&lt;(j-1))] += f[i][j]; 12343 91 1 1 2 1 32 1 2 2 2 33 1 3 2 3 3 例题2 拓扑排序计数(NP-Hard) fpf_pf​p​​选的点数。 对于所有满足要求的(k, j)，jjj没被选，kkk放了，fp∣(1&lt;&lt;(j−1))+=fpf_{p|(1&lt;&lt;(j-1))} += f_pf​p∣(1&lt;&lt;(j−1))​​+=f​p​​。 20:2n20: 2^n20:2​n​​ 18:2nn18: 2^nn18:2​n​​n 16:2nn2/3n16: 2^nn^2 / 3^n16:2​n​​n​2​​/3​n​​ 例题3 tit_it​i​​代表第iii条直线覆盖点的。 fp=min(fp∣ti,...,fp+1)f_p=\min(f_{p|t_i},...,f_p+1)f​p​​=min(f​p∣t​i​​​​,...,f​p​​+1) 固定一个端点，可以将枚举直线改为O(n)O(n)O(n)。 2n个点最短路乱搞？ 例题4 Who knows？ for i=1..m fp∣ti=max(...,fp+1)(p&amp;ti=0)f_{p|t_i}=\max(..., f_p+1)(p\&amp;t_i=0)f​p∣t​i​​​​=max(...,f​p​​+1)(p&amp;t​i​​=0) 例题5 最长简单环(NP-Hard NPC) 实现例题2 (选做例题5)]]></content>
      <categories>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【DP】笔记 - day1]]></title>
    <url>%2F2018%2F02%2F07%2F%E3%80%90DP%E3%80%91%E7%AC%94%E8%AE%B0-day1%2F</url>
    <content type="text"><![CDATA[⚠️注意：这是ZROI集训的源笔记，其中有很多缺失和遗漏以及无法看懂的部分，大家就不要看了吧。 以下是原笔记： fi,j+1=fa,b(Aa=Ab,Ai=Aj,Aa&gt;Ai,i&lt;a,j&lt;b)f_{i,j}+1=f_{a,b}(A_a=A_b, A_i=A_j, A_a &gt; A_i, i&lt;a, j&lt;b)f​i,j​​+1=f​a,b​​(A​a​​=A​b​​,A​i​​=A​j​​,A​a​​&gt;A​i​​,i&lt;a,j&lt;b) 二叉树枚举aaa，求出jjj之后第一个Aa=AbA_a = A_bA​a​​=A​b​​ 预处理？ ni,x≠i+1,ni,x=ni+1,xn_{i,x} \ne i+1, n_{i,x}=n_{i+1,x}n​i,x​​≠i+1,n​i,x​​=n​i+1,x​​ ni,x=i+1,ni,x=i+1n_{i,x} = i+1, n_{i,x} = i+1n​i,x​​=i+1,n​i,x​​=i+1 1| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | fn,m=(s−1n−1)∑s=1nfn−s,m−1f_{n,m} = \binom {s-1} {n-1}\sum_{s=1}^nf_{n-s,m-1}f​n,m​​=(​n−1​s−1​​)∑​s=1​n​​f​n−s,m−1​​ fn,m=mfn−1,m+fn−1,m−1f_{n,m}=mf_{n-1,m}+f_{n-1,m-1}f​n,m​​=mf​n−1,m​​+f​n−1,m−1​​ 优化状态？转移？ 错排问题 fnf_nf​n​​ 当a≠na \ne na≠n时，(n−1)fn−2(n-1)f_{n-2}(n−1)f​n−2​​ 当a=na=na=n时，(n−1)fn−1(n-1)f_{n-1}(n−1)f​n−1​​ fn=(n−1)(fn−1+fn−2)f_n=(n-1)(f_{n-1}+f_{n-2})f​n​​=(n−1)(f​n−1​​+f​n−2​​) 逆序对 fn,mf_{n,m}f​n,m​​代表nnn个数产生mmm个逆序对的数量。 fn,m=∑k=1nfn−1,m−k+1f_{n,m}=\sum_{k=1}^nf_{n-1,m-k+1}f​n,m​​=∑​k=1​n​​f​n−1,m−k+1​​ 前缀和优化 (m−n,m](m-n,m](m−n,m] fn,m=gi,m−gi,m−nf_{n,m}=g_{i,m}-g_{i,m-n}f​n,m​​=g​i,m​​−g​i,m−n​​ 例题2 【IMPOSSIBLE】 f_{i,j}前iii物品，取jjj的长度，方案数。 f_{i,j}=\sum_{k=0}^{w_i}g_{j-k,k}f_{i-1,j-k} 例题3 二叉树：fn=∑i=0n−1fifn−i−1(n−1i)f_n=\sum_{i=0}^{n-1}f_if_{n-i-1}\binom {n-1} if​n​​=∑​i=0​n−1​​f​i​​f​n−i−1​​(​i​n−1​​) 二叉树的子结构性质 有根树：fn=∑i=1n−1fifn−i(n−2i−1)f_n = \sum_{i=1}^{n-1}f_if_{n-i}\binom{n-2}{i-1}f​n​​=∑​i=1​n−1​​f​i​​f​n−i​​(​i−1​n−2​​) 去掉一棵子树还是一棵树 kkk叉树：f_{n,k}=\sum_{i=1}^{n-1}f_{i,1}f_{n-i,k-1}\binom{n-2}{i-1} gn,m=∑i=1n−1gn−i,m−1fig_{n,m}=\sum_{i=1}^{n-1}g_{n-i,m-1}f_ig​n,m​​=∑​i=1​n−1​​g​n−i,m−1​​f​i​​ fi=∑j=0kgi,jf_i=\sum_{j=0}^kg_{i,j}f​i​​=∑​j=0​k​​g​i,j​​ gn,mg_{n,m}g​n,m​​ 根mmm其它nnn 拆分数 fi,j=fi,j−i+fi−1,j−if_{i, j} = f_{i, j-i} + f_{i-1, j} - if​i,j​​=f​i,j−i​​+f​i−1,j​​−i n≤105n \le 10^5n≤10​5​​情况 gi,jg_{i,j}g​i,j​​ iii个数，和为jjj。 i≤ni \le \sqrt ni≤√​n​​​时：fi,j=fi−1,j+fi,j−if_{i,j}=f_{i-1,j}+f_{i,j}-if​i,j​​=f​i−1,j​​+f​i,j​​−i i≥ni \ge \sqrt ni≥√​n​​​时：gi,j=gi−1,j−1+gi,j−ig_{i,j}=g_{i-1,j-1}+g_{i,j-i}g​i,j​​=g​i−1,j−1​​+g​i,j−i​​ h_j = \sum_{i=0}^\sqrt ng_{i,j-i\sqrt n} Ans=∑A=0nfn,Ahn−AAns = \sum_{A=0}^nf_{\sqrt n, A}h_{n-A}Ans=∑​A=0​n​​f​√​n​​​,A​​h​n−A​​ Alt+F4 F(U)⊂KF(U)\subset KF(U)⊂KING HOMEWORK Y∅∪RY\emptyset\cup RY∅∪R logn\log nlogn 202020 n\sqrt n√​n​​​ 300300300 求长度为500050005000恰好有100000100000100000个逆序对的排列个数 nnn个点带标号的无向图个数 nnn个点带标号的无向连通图个数 n≤5000n \le 5000n≤5000 = = 2(n2)2^\binom n22​(​2​n​​)​​ fn=2(n2)−∑i=1nfi×2(n−22)×(n−1i−1)f_n=2^\binom n2-\sum_{i=1}^nf_i\times2^\binom{n-2}2\times\binom{n-1}{i-1}f​n​​=2​(​2​n​​)​​−∑​i=1​n​​f​i​​×2​(​2​n−2​​)​​×(​i−1​n−1​​) 选标号(n−1i−1)\binom{n-1}{i-1}(​i−1​n−1​​)]]></content>
      <categories>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【膜法】代码片段]]></title>
    <url>%2F2018%2F02%2F06%2F%E3%80%90%E8%86%9C%E6%B3%95%E3%80%91%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%2F</url>
    <content type="text"><![CDATA[请从纯文本意识流中导出密码 ]]></content>
      <categories>
        <category>膜法</category>
      </categories>
      <tags>
        <tag>膜法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【贪心】Codeforces 886C - Petya and Catacombs]]></title>
    <url>%2F2018%2F02%2F06%2F%E3%80%90%E8%B4%AA%E5%BF%83%E3%80%91Codeforces-886C-Petya-and-Catacombs%2F</url>
    <content type="text"><![CDATA[题意 传送门：Codeforces 886C Petya在图上探险。每一分钟随机走动一次(可以原地)。 如果走到的是一个新点，随机写一个数字。 如果以前来过，写最近一次到这里的时间。 第000分钟Petya在原地并且没有写数字。 给你Petya写的一串数字，问你最少有几个点。 解法 题目绕了半天&gt;_&lt;。 TLE做法 记录每个点最后一次到的时间，每输入一个数字，O(n)O(n)O(n)地查询有没有踩过的点，如果没有就开新点，否则用久点。时间复杂度O(n2)O(n^2)O(n​2​​)，完美TLE。 AC做法1 考虑每一个数字。每出现一个数字，可能是以前踩过的点，也可能是随机数(新点)。 并且不可能同时踩到两个不同的点，那么同一个数字出现nnn次，至少n−1n-1n−1次是随机数。 时间复杂度O(n)O(n)O(n)。 AC做法2 考虑优化TLE做法。根据AC做法1中得出的结论，每一个点最后一次到达的时间是不同的。 开一个长度为nnn的数组记录每一个时间是否是某个点的最后一次到达的时间。 然后for i=1...n scanf(&quot;%d&quot;, &amp;x)。 如果xxx是某个点最后一次到达的时间，那么就让它不是(因为那个点已经被更新了)。 否则(这是个随机数)就ans++。 并且无论是以上哪种情况，某个点最后一次到达的时间都一定会被置为iii，所以vis[i]=1。 代码 思路1 1234567891011121314#include &lt;bits/stdc++.h&gt;using namespace std;int n, x, ans = 1;int vis[200005];int main() &#123; for(scanf("%d", &amp;n); n--; ) &#123; scanf("%d", &amp;x); if (!vis[x]) vis[x] = 1; else ans++; &#125; printf("%d", ans);&#125; 思路2 1234567891011121314151617#include &lt;bits/stdc++.h&gt;using namespace std;int n, x, ans = 1;int vis[200005];int main() &#123; scanf("%d", &amp;n); vis[0] = 1; for(int i = 1; i &lt;= n; i++) &#123; scanf("%d", &amp;x); if (vis[x]) vis[x] = 0; else ans++; vis[i] = 1; &#125; printf("%d", ans);&#125; 拓展 话说两段代码长得好像啊~]]></content>
      <categories>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【数学】Codeforces 872C - Maximum splitting]]></title>
    <url>%2F2018%2F02%2F06%2F%E3%80%90%E6%95%B0%E5%AD%A6%E3%80%91Codeforces-872C-Maximumsplitting%2F</url>
    <content type="text"><![CDATA[题意 传送门：Codeforces 872C 给你nnn个数，问你这些数最多可以写成多少个合数的和。n≤105,1≤x≤109n \le 10^5, 1 \le x \le 10^9n≤10​5​​,1≤x≤10​9​​ 解法 考虑分解的策略。 首先，最小的444个合数分别是4,6,8,94, 6, 8, 94,6,8,9。 很明显，分解得到的合数越小越好。分类讨论： 当xxx是1,2,3,5,7,111, 2, 3, 5, 7, 111,2,3,5,7,11时无解，输出−1-1−1。 当xxx是偶数时，因为x&gt;2x&gt;2x&gt;2，而且444和666可以组成所有大于222的偶数。所以只需要用444和666即可。 当xxx是奇数时，因为大于111111的奇数和999自身都有解，并且大于111111的奇数都可以写成999和大于444的偶数的和。所以只需要用x−9x-9x−9再按情况2计算即可。 综上所述，需要用到的数字只有4,6,94, 6, 94,6,9。 现在考虑分解出的数的个数。 当xxx是1,2,3,5,7,111, 2, 3, 5, 7, 111,2,3,5,7,11时，输出−1-1−1。 当xxx能被444整除时，输出x4\frac x4​4​​x​​。 当xxx是偶数且不能被444整除时，输出x−64+1\frac{x-6}4+1​4​​x−6​​+1。 当xxx是奇数时，输出x−94+1\frac{x-9}4+1​4​​x−9​​+1。 代码 12345678910111213141516171819#include &lt;bits/stdc++.h&gt;using namespace std;int n, x;int f(int x) &#123; if (!x) return 0; if (x &lt; 4 || x == 5 || x == 7 || x == 11) return -1; if (x &amp; 1) return f(x-9) + 1; if (x &amp; 2) return f(x-6) + 1; return x&gt;&gt;2;&#125;int main() &#123; for (scanf("%d", &amp;n); n--; ) &#123; scanf("%d", &amp;x); printf("%d\n", f(x)); &#125;&#125; 拓展 对于分解性的问题，如果需要最大化某个量，则极端地考虑可能的取值。 如最大化数量，可以考虑让数字尽可能小。 如最大化乘积，可以考虑让2,32, 32,3尽可能多。 然后再证明自己的猜想，如本题的&quot;4,6,94, 6, 94,6,9&quot;。]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【DFS】伪背包1007-C]]></title>
    <url>%2F2018%2F01%2F08%2F%E3%80%90DFS%E3%80%91%E4%BC%AA%E8%83%8C%E5%8C%851007-C%2F</url>
    <content type="text"><![CDATA[题意 传送门：1007-C 给定一个容量为TTT的背包，nnn个物品，第iii个物品重量c[i]c[i]c[i]价值v[i]v[i]v[i]，最少要装mmm个物品，最少要留ttt的剩余空间，最大化价值与剩余空间×g\times g×g的值。n≤10n \le 10n≤10。 解法 这是一道披着背包外衣的入门难度DFS。 直接dfs带444个参数dep,cnt,val,remdep, cnt, val, remdep,cnt,val,rem分别代表深度(1~n) 已选物品数 已选物品价值 剩余容量，搜到dep&gt;ndep&gt;ndep&gt;n判断rem&lt;t∣∣cnt&lt;mrem&lt;t||cnt&lt;mrem&lt;t∣∣cnt&lt;m是否满足即可更新答案。 否则搜索下面两个即可，不用剪枝。 dfs(dep+1,cnt+1,val+v[dep],rem-c[dep]); dfs(dep+1,cnt,val,rem); 时间复杂度O(2n)O(2^n)O(2​n​​)。 代码 不要在意这些细节，本人卡常癌晚期请谅解 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;bits/stdc++.h&gt;#define spc putchar(' ')#define nln putchar('\n')using namespace std;template &lt;typename T&gt;inline void get(register T&amp; val) &#123; /* 一千万个数400ms超高速读入黑科技略 */&#125;template &lt;typename T&gt;inline bool put(register const T&amp; val) &#123; /* 普通高速输出黑科技略 */&#125;// Solution Begins Hereint n, m, d, t, g, c[32], v[32], ans;// 不要在意这些细节inline void dfs(register int dep, register int cnt, register int val, register int rem) &#123; if (dep &gt; n) &#123; if (rem &lt; t || cnt &lt; m) return; ans = max(ans, val + rem * g); &#125; else &#123; dfs(dep + 1, cnt + 1, val + v[dep], rem - c[dep]); dfs(dep + 1, cnt, val, rem); &#125;&#125;int main() &#123; get(n); get(m); for (register int i = 1; i &lt;= n; i++) &#123; get(c[i]); get(v[i]); &#125; get(d); get(t); get(g); dfs(1, 0, 0, d); put(ans);&#125; 拓展 对于数据较小的题目，有时DP难写，可以考虑使用暴搜，有时甚至不需要剪枝。]]></content>
      <categories>
        <category>DFS</category>
      </categories>
      <tags>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【位运算】Codeforces 897C - Short Program]]></title>
    <url>%2F2018%2F01%2F01%2F%E3%80%90%E4%BD%8D%E8%BF%90%E7%AE%97%E3%80%91Codeforces-897C-Short-Program%2F</url>
    <content type="text"><![CDATA[题意 传送门：Codeforces 897C 给一串位运算操作(包含| &amp; ^，每个操作数均落在。中)，将其简化到5次运算以内并输出。 解法 过程 考虑交换律和结合律。显然1|11$\ne$11|1。所以要换一种思路。 我们可以将102310231023和000同时进行运算。 再考虑将&amp; | ^三种运算转化为| ^两种。 如将102310231023和000带入以下运算： 123456789101110 1111111111 0000000000^ 218 0011011010 1100100101&amp; 150 0010010010 0000000100| 935 1110110111 1110100111&amp; 61 0000110101 0000100101| 588 1001111101 1001101101&amp; 897 1000000001 1000000001| 411 1110011011 1110011011| 584 1111011011 1111011011^ 800 0011111011 0011111011| 704 1011111011 1011111011 使用| ^代替&amp; | ^的方法： 置零，使用|1^1 置一，使用|1^0 不变，使用|0^0 反转，使用|0^1 令1023 or x xor y=a=7631023\ or\ x\ xor\ y=a=7631023 or x xor y=a=763，0 or x xor y=b=7630\ or\ x\ xor\ y=b=7630 or x xor y=b=763 即如果aaa和bbb某一位一样，xxx的那一位就是1，yyy的那一位就是bbb那一位的反码。 如果不一样，xxx的那一位就是000，yyy的那一位也是bbb那一位的反码。 两数每一位相同得111，不同得000，就是a xor b xor 1023a\ xor\ b\ xor\ 1023a xor b xor 1023的值。 bbb的反码即b xor 1023b\ xor\ 1023b xor 1023。 结论 x=a xor b xor 1023x = a\ xor\ b\ xor\ 1023x=a xor b xor 1023 y=b xor 1023y = b\ xor\ 1023y=b xor 1023 O(n)O(n)O(n)边读边算aaa和bbb，最后O(1)O(1)O(1)算xxx和yyy即可。 代码 123456789101112131415161718192021222324252627282930#include &lt;bits/stdc++.h&gt;#define p(q) ((q) &amp;&amp; (q) != X)#define X 0x3f3f3f3fusing namespace std;int a = 0, b = 1023;char op[1];int n, t;int main() &#123; scanf("%d", &amp;n); for (int i = 1; i &lt;= n; i++) &#123; scanf("%s%d", op, &amp;t); switch (*op) &#123; case '&amp;': a &amp;= t; b &amp;= t; break; case '|': a |= t; b |= t; break; case '^': a ^= t; b ^= t; break; &#125; &#125; printf("2\n| %d\n^ %d", a ^ b ^ 1023, b ^ 1023);&#125; 拓展 位运算+构造算法(bitmasks+constructive algorithms)的题目的几种思考方式： 对每一位考虑(位运算都是隔离每位的，不存在借位进位这种影响其它位的运算) 对逆运算考虑(如1216-D，前缀和转为差分) 对结果考虑(结果反向构造过程)]]></content>
      <categories>
        <category>位运算</category>
      </categories>
      <tags>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【差分】1216-D]]></title>
    <url>%2F2017%2F12%2F20%2F%E3%80%90%E5%B7%AE%E5%88%86%E3%80%911216-D%2F</url>
    <content type="text"><![CDATA[题意 传送门：1216-D 有一个nnn个数的序列，一开始所有的数都是000，每次可以将一个区间[l,r][l,r][l,r] (l≤r)内的数+1+1+1，求到达最终状态的最少操作次数。 n \le 10^5，m \le 10^5​，m​为操作次数。 解法 正难则反：考虑已知每次操作，求序列。可使用前缀和。 如样例输出： 123431 61 62 6 将闭区间转为左闭右开，即[1,7),[1,7),[2,7)[1, 7), [1, 7), [2, 7)[1,7),[1,7),[2,7)，则可得到： 1234下标: 1 2 3 4 5 6 7数组: 2 1 0 0 0 0 -3前缀和后得到原序列:原序列: 2 3 3 3 3 3 0 根据前缀和的逆运算是差分，得到O(n+m)O(n+m)O(n+m)解法。 优化 既然差分之后就可以求出所有区间，为什么不直接往队列里面丢呢？ 如差分序列2 1 0 0 0 0 -3，进行以下处理： 遇到正数222，直接丢222个下标111在存lll的队列中。 123l队列 r队列11 遇到正数111，直接丢111个下标222在存lll的队列中。 1234l队列 r队列112 遇到负数-3，直接丢∣−3∣=3|-3|=3∣−3∣=3个下标7−1=67-1=67−1=6在存rrr的队列中。 1234l队列 r队列1 61 62 6 输出即可。 123431 61 62 6 时间复杂度O(n+m)O(n+m)O(n+m)。 代码 1234567891011121314151617181920#include &lt;bits/stdc++.h&gt;using namespace std;int out[100005][2]; //模拟队列int n, x, m1, m2, r;int main() &#123; scanf("%d", &amp;n); for (int i = 1; i &lt;= n; i++) &#123; scanf("%d", &amp;x); if (r &lt; x) for (int j = x-r; j--;) out[m1++][0] = i; if (r &gt; x) for (int j = r-x ; j--;) out[m2++][1] = i-1; r = x; &#125; for (int j = r ; j--;) out[m2++][1] = n; printf("%d\n", m1); for (int i = 0; i &lt; m1; i++) &#123; printf("%d %d\n", out[i][0], out[i][1]); &#125;&#125; 拓展 正难则反：很多题目需要逆向思考。如将差分题逆向思考得到前缀和。多考虑互逆运算之间的转化关系。]]></content>
      <categories>
        <category>差分</category>
      </categories>
      <tags>
        <tag>差分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【差分】差分]]></title>
    <url>%2F2017%2F12%2F20%2F%E3%80%90%E5%B7%AE%E5%88%86%E3%80%91%E5%B7%AE%E5%88%86%2F</url>
    <content type="text"><![CDATA[大家都知道大名鼎鼎的前缀和，差分就是前缀和的逆运算。 前缀和 问题：给定一串数，查询区间和。 算法 预处理 查询 朴素算法 O(1)O(1)O(1) O(n)O(n)O(n) 前缀和 O(n)O(n)O(n) O(1)O(1)O(1) 线段树(树状数组) O(n)O(n)O(n) O(logn)O(\log n)O(logn) 显然，多次查询时，前缀和效率最高。 差分？ 标好重点：差分是前缀和的逆运算。 如果给一个前缀和数组，如何将它处理成原数组？ 123456789前缀和:1 2 3 4 5 61 2 3 4 5 1(6-5)1 2 3 4 1(5-4) 11 2 3 1(4-3) 1 11 2 1(3-2) 1 1 11 1(2-1) 1 1 1 1得到原数组:1 1 1 1 1 1 在某些正面解看起来很复杂的题时，可以考虑逆推出前缀和，然后利用差分解题。 相关 高维前缀和(差分) 【差分】1216-D]]></content>
      <categories>
        <category>差分</category>
      </categories>
      <tags>
        <tag>差分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【杂题】1210-B]]></title>
    <url>%2F2017%2F12%2F14%2F%E3%80%90%E6%9D%82%E9%A2%98%E3%80%911210-B%2F</url>
    <content type="text"><![CDATA[题意 传送门：B题 给一个01矩阵，允许若干次操作，每次一次翻转一行或一列，问最多可以翻出多少个0？ 数据范围：r≤10,c≤10000r \le 10, c \le 10000r≤10,c≤10000。 解法 考虑行固定，只翻列的情况。 因为rrr只有10，所以可以直接二进制枚举，时间复杂度O(2r)O(2^r)O(2​r​​)。 再考虑列。如果一行中0多于1则反转，否则不翻转。可以用两个变量c1c1c1和c2c2c2分别对翻转和不翻转计数(或者c2=r−c1c2=r-c1c2=r−c1)，然后ret += max(c1, c2);或ret += max(c1, r-c1);。时间复杂度O(rc)O(rc)O(rc)。 使用bitset优化编程复杂度和常数除以32。 时间复杂度：O(rc2r32)O(\frac{rc2^r}{32})O(​32​​rc2​r​​​​) 代码 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;bits/stdc++.h&gt;using namespace std;typedef bitset&lt;10005&gt; record_type[15];record_type rec;int r, c, a, x;int proc(int mask) &#123; record_type rt; // rec的拷贝 int ret = 0; // 返回值 copy(rec, rec+r, rt); // 非POD类型(bitset&lt;10005&gt;)用std::copy for (int i = 0; i &lt; r; i++) &#123; if ((mask&gt;&gt;i)&amp;1) rt[i].flip(); // 对二进制中每个1反转对应的行 &#125; for (int i = 0; i &lt; c; i++) &#123; int a = 0, b = 0; // int c1 = 0, c2 = 0; for (int j = 0; j &lt; r; j++) &#123; a += rt[j][i]; // c1 b += ~rt[j][i]; // c2 &#125; ret += max(a, b); &#125; return ret; &#125;int main() &#123; scanf("%d%d", &amp;r, &amp;c); for (int i = 0; i &lt; r; i++) &#123; for (int j = 0; j &lt; c; j++) &#123; scanf("%d", &amp;x); rec[i][j] = x; &#125; &#125; for (int i = 0; i &lt; (1 &lt;&lt; r); i++) &#123; // 二进制枚举 a = max(a, proc(i)); &#125; printf("%d", a);&#125;]]></content>
      <categories>
        <category>杂题</category>
      </categories>
      <tags>
        <tag>杂题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【未完工】【LIS】LIS]]></title>
    <url>%2F2017%2F12%2F14%2F%E3%80%90%E6%9C%AA%E5%AE%8C%E5%B7%A5%E3%80%91%E3%80%90LIS%E3%80%91LIS%2F</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. 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]]></content>
      <categories>
        <category>未完工</category>
      </categories>
      <tags>
        <tag>LIS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【模拟】1210-A]]></title>
    <url>%2F2017%2F12%2F14%2F%E3%80%90%E6%A8%A1%E6%8B%9F%E3%80%911210-A%2F</url>
    <content type="text"><![CDATA[题意 传送门：A题 两个人打跑得快，现在规定扑克牌点数为区间[1,2n][1, 2n][1,2n]之间的整数，每种牌只有一张。 且打牌要符合以下特殊规定: 首先1出，在没有特殊情况时，12轮流出 如果桌面上没牌，则必须出手上最小的 如果桌面上有牌，则必须出手上比桌面上牌大的最小的牌，也就是lower_bound 如果在第三条的情况下且没有牌出，则停一手，桌面清空 一方打完后游戏结束 规定每个人的分数是对方剩余牌的数量，求最后的得分。 代码 12]]></content>
      <categories>
        <category>模拟</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【DP-LIS】洛谷P1704 - 寻找最优美做题曲线]]></title>
    <url>%2F2017%2F12%2F09%2F%E3%80%90DP-LIS%E3%80%91%E6%B4%9B%E8%B0%B7P1704-%E5%AF%BB%E6%89%BE%E6%9C%80%E4%BC%98%E7%BE%8E%E5%81%9A%E9%A2%98%E6%9B%B2%E7%BA%BF%2F</url>
    <content type="text"><![CDATA[题意 传送门：洛谷P1704 - 寻找最优美做题曲线 现在给出每一天刷题的题数，并且有几天必须刷题，问最多可以刷多少天的题并且满足严格递增。 说白了就是，给一个序列，告诉你有一些下标上的数必须包含在LIS中，求满足条件的LIS，就是被禁锢的LIS。 解法 变量定义 12345int p[500005], t[500005]; // p代表必须刷题的时间, t代表每天刷题的题数int lis[500005]; // LIS数组int c[500005]; //处理过的刷题题数int n, m, x; // n天, m天必须刷题int ans; // 答案 读入 贴代码不解释： 12345678scanf("%d%d", &amp;n, &amp;m);for (int i = 1; i &lt;= m; i++) &#123; scanf("%d", p+i);&#125;sort(p+1, p+m+1);for (int i = 1; i &lt;= n; i++) &#123; scanf("%d", t+i);&#125; 处理 首先，如果必须刷题的那几天不严格递增，咳咳。 1234567for (int i = 2; i &lt;= m; i++) &#123; if (t[p[i]] &lt;= t[p[i-1]]) &#123; puts("impossible"); return 0; &#125;&#125;proc(); 接下来是对LIS做一些处理。 首先，如果一个序列中的数比前面的数都大，比后面的数都小，那这个数一定包含在LIS中。 那么我们可以使需要刷题的每一天都满足这个要求。 如数据：12 6 10 11 8 12 10 11 16 14 17 13 14 18，我们可以进行以下骚操作： 12 6 10 11 8 12 10 11 16 14 17 13 14 18 得到6 10 11 16 17 18。 代码如下： 123456789101112131415161718192021void proc() &#123; // int new_n = 0; c[0] = t[0] // t中的内容处理后被存入c中 int nx = 0; *c = *t; for (int i = 1; i &lt;= m; i++) &#123; if (i &gt; 1) c[++nx] = t[p[i-1]]; for (int j = p[i-1]+1; j &lt; p[i]; j++) &#123; // 两个必须刷题的日子的中间 if (t[p[i-1]] &lt; t[j] &amp;&amp; t[j] &lt; t[p[i]]) &#123; c[++nx] = t[j]; &#125; &#125; &#125; c[++nx] = t[p[m]]; for (int i = p[m]+1; i &lt;= n; i++) &#123; // 最后一个必须刷题的日子之后 if (t[p[m]] &lt; t[i]) &#123; c[++nx] = t[i]; &#125; &#125; c[++nx] = t[p[m]]; n = nx;&#125; LIS O(nlogn)O(n \log n)O(nlogn)的LIS算法参见这里，代码如下： 123456for (int i = 1; i &lt;= n; i++) &#123; int pos = lower_bound(lis+1, lis+ans+1, c[i]) - lis; lis[pos] = c[i]; ans = max(ans, pos);&#125;printf("%d", ans); 代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;bits/stdc++.h&gt;using namespace std;int p[500005], t[500005];int lis[500005];int c[500005];int n, m, x; int ans;void proc() &#123; int nx = 0; *c = *t; for (int i = 1; i &lt;= m; i++) &#123; if (i &gt; 1) c[++nx] = t[p[i-1]]; for (int j = p[i-1]+1; j &lt; p[i]; j++) &#123; if (t[p[i-1]] &lt; t[j] &amp;&amp; t[j] &lt; t[p[i]]) &#123; c[++nx] = t[j]; &#125; &#125; &#125; c[++nx] = t[p[m]]; for (int i = p[m]+1; i &lt;= n; i++) &#123; if (t[p[m]] &lt; t[i]) &#123; c[++nx] = t[i]; &#125; &#125; c[++nx] = t[p[m]]; n = nx;&#125; int main() &#123; scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= m; i++) &#123; scanf("%d", p+i); &#125; sort(p+1, p+m+1); for (int i = 1; i &lt;= n; i++) &#123; scanf("%d", t+i); &#125; for (int i = 2; i &lt;= m; i++) &#123; if (t[p[i]] &lt;= t[p[i-1]]) &#123; puts("impossible"); return 0; &#125; &#125; proc(); for (int i = 1; i &lt;= n; i++) &#123; int pos = lower_bound(lis+1, lis+ans+1, c[i]) - lis; lis[pos] = c[i]; ans = max(ans, pos); &#125; printf("%d", ans);&#125; 拓展 对于限制或改版LIS问题，可以做一定的处理，使其变为正常LIS，然后再使用裸LIS算法解决。或者设计针对题目的算法。 这里列出一些相关的题目： LICS 最长上升公共子序列 二元组LIS 最长震荡子序列]]></content>
      <categories>
        <category>DP</category>
        <category>LIS</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【底层】【Internal】深拷贝之殇]]></title>
    <url>%2F2017%2F12%2F08%2F%E3%80%90%E5%BA%95%E5%B1%82%E3%80%91%E3%80%90Internal%E3%80%91%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B9%8B%E6%AE%87%2F</url>
    <content type="text"><![CDATA[请从纯文本意识流中导出密码 ]]></content>
      <categories>
        <category>底层</category>
      </categories>
      <tags>
        <tag>底层</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【底层】【Internal】一个UB引发的血案]]></title>
    <url>%2F2017%2F12%2F08%2F%E3%80%90%E5%BA%95%E5%B1%82%E3%80%91%E3%80%90Internal%E3%80%91%E4%B8%80%E4%B8%AAUB%E5%BC%95%E5%8F%91%E7%9A%84%E8%A1%80%E6%A1%88%2F</url>
    <content type="text"><![CDATA[请从纯文本意识流中导出密码 ]]></content>
      <categories>
        <category>底层</category>
      </categories>
      <tags>
        <tag>底层</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【BFS】八数码问题]]></title>
    <url>%2F2017%2F11%2F24%2F%E3%80%90BFS%E3%80%91%E5%85%AB%E6%95%B0%E7%A0%81%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[题意 这么经典的题目还要题意… 传送门：洛谷 P1379(让我想到了1379号监听员😆) 思路 不会写康托展开，遂用数字存储，然后使用bitset存储visited数组。 输入后对输入的局面BFS。 交换整数中的数字 首先，数字中的下标对应以下表格： 0 1 2 3 4 5 6 7 8 那么， 上下交换就是xxx和x+3x+3x+3交换(x&lt;5)(x&lt;5)(x&lt;5)， 左右交换就是xxx和x+1x+1x+1交换(x&lt;7)(x&lt;7)(x&lt;7)。 但有个问题，如果2和3交换或者5和6交换那就不行了。 所以有一个神奇的方法：判断两数相乘是否为6或30😆。 123456789，若要将3和7交换， 首先记忆3，接下来减7×1027 \times 10^27×10​2​​，然后加3×1023 \times 10^23×10​2​​， 再减3×1063 \times 10^63×10​6​​，最后加7×1067 \times 10^67×10​6​​。 输出路径？ 集训的题目要输出路径，那就加个map存前驱，然后递归打出来。 Talk is cheap! Give me the code! 代码在这里： 可以AC洛谷P1379 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include &lt;bits/stdc++.h&gt;#define t(x) ((((x)&lt;&lt;2)+(x))&lt;&lt;1)#define l(x, i) ((x)/p10[i]%10)#define w(x, i) (*(x+i))using namespace std;// 预处理10^nconst int p10[] = &#123;1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000&#125;;const int dir[4] = &#123;3, -3, 1, -1&#125;; // 方向矢量map&lt;int, int&gt; dep; // 深度queue&lt;int&gt; bfs; // 广搜队列int n; // 数字int main() &#123;// #ifndef __TIGER0132__// freopen("9gong.in", "r", stdin);// freopen("9gong.out", "w", stdout);// #endif scanf("%d", &amp;n); bfs.push(n); dep[n] = 0; // 初始深度 while (!bfs.empty()) &#123; int pos = bfs.front(); bfs.pop(); int cdep = dep[pos] + 1; // 现在搜到的数字的深度 int _0; // 数字中0的位置// printf("%d\n", pos); if (pos == 123804765) &#123; printf("%d", dep[pos]); return 0; &#125; for (_0 = 0; _0 &lt; 9; _0++) &#123; // 搜索0的位置 if (!l(pos, _0)) break; &#125; for (int i = 0; i &lt; 4; i++) &#123; int p0 = _0; // 第一个要交换的数的下标 int p1 = _0+w(dir, i); // 第二个要交换的数的下标 int p2 = pos, p3; // p2是pos的拷贝, p3临时变量 // 判断交换是否合法 if (p0 &lt; 0 || p1 &lt; 0 || p0 &gt; 8 || p1 &gt; 8 || p0*p1 == 6 || p0*p1 == 30) continue; p3 = l(p2, p0); // t = a; p2 += (l(p2,p1) - l(p2,p0))*p10[p0]; // a = b; p2 += (p3 - l(p2,p0))*p10[p1]; // b = t; if (dep.count(p2)) continue; // 判断是否搜过 bfs.push(p2); // 入队 dep[p2] = cdep; // 更新深度 &#125; &#125; puts("Oh no! Where's my solution?");&#125; 教训 ⚠️不要无脑register，不然TLE自己负责！]]></content>
      <categories>
        <category>BFS</category>
      </categories>
      <tags>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【线段树】线段树]]></title>
    <url>%2F2017%2F10%2F29%2F%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%2F</url>
    <content type="text"><![CDATA[简介 线段树是一种存储区间的二叉树，用于快速解决满足区间加法的区间问题。 普通线段树 结构 左孩子和右孩子平分父节点的区间，代码如下： 123456struct node &#123; int sum, l, r; // sum可替换成max, min等等 // lchild = 2i, rchild = 2i + 1&#125; segTree[n &gt;&gt; 1]; 建树 自顶向下搜到叶子，再逐级更新到根。就像这样： 1234567891011121314void build(int id, int l, int r) &#123; // id代表现在访问到的节点编号, l, r代表查找区间 // 调用时则build(1, 1, n) tree[id].l = l; tree[id].r = r; if (l == r) &#123; tree[id].sum = arr[l]; &#125; else &#123; int mid = (l + r) &gt;&gt; 1; build((id &lt;&lt; 1), l, mid); build((id &lt;&lt; 1) | 1, mid + 1, r); tree[id].sum = tree[id &lt;&lt; 1].sum + tree[(id &lt;&lt; 1) | 1].sum; &#125;&#125; 单点修改 从根节点自顶向下查询，查到叶子节点更新然后返回并更新所有遇到的节点。Like this： 12345678910111213void modify(int id, int target, int value) &#123; // id代表现在访问到的节点编号, target代表目标的下标, value代表新值 int mid = (tree[id].l + tree[id].r) &gt;&gt; 1; if (tree[id].l == tree[id].r) &#123; tree[id].sum = arr[tree[id].l] = f(arr[tree[id].l]); return; &#125; else if (target &gt; mid) &#123; modify((id &lt;&lt; 1) | 1, target, f); &#125; else &#123; modify((id &lt;&lt; 1), target, f); &#125; tree[id].sum = tree[id &lt;&lt; 1].sum + tree[(id &lt;&lt; 1) | 1].sum;&#125; 单点查询 从根节点自顶向下，查到叶子节点返回。 区间修改 施工中，未完待续… 区间查询 12345678910111213int sum(int id, int l, int r) &#123; if (tree[id].l &gt;= l &amp;&amp; tree[id].r &lt;= r) &#123; return tree[id].sum; &#125; int sum = 0, mid = (tree[id].l + tree[id].r) &gt;&gt; 1; if (l &lt;= mid) &#123; sum += this -&gt; sum((id &lt;&lt; 1), l, min(mid, r)); &#125; if (r &gt; mid) &#123; sum += this -&gt; sum((id &lt;&lt; 1) | 1, max(mid + 1, l), r); &#125; return sum;&#125; 空间复杂度 空间复杂度为O(4n)=O(n)O(4n) = O(n)O(4n)=O(n) 时间复杂度 建树O(n)O(n)O(n) 单点修改O(logn)O(\log n)O(logn) 单点查询O(logn)O(log n)O(logn) 区间修改O(berO(berO(ber) 区间查询O(n)O(n)O(n) zkw线段树 ⚠️⚠️！！Attention！！(i&lt;&lt;1)|1不要写成i&lt;&lt;1|1！！！ 结构 堆式存储，lchild=2i,rchild=2i+1lchild = 2i, rchild = 2i+1lchild=2i,rchild=2i+1： 12345// 在这里, M必须是2^n// segTree用来存最大值最小值之内的东西// 如果有需要可以开个node或者多用几个数组int segTree[M &gt;&gt; 1];// 没了? 没了. 特性：因为叶子节点是原数组所以直接下标加M就可以找到原数组。 建树 施工中，未完待续… 12345678void build(int n) &#123; for (i = M; i &lt; M + n; i++) &#123; scanf("%d", segTree + i); &#125; for (i = M - 1; i; i--) &#123; segTree[i] = min(segTree[i &lt;&lt; 1], segTree[(i &lt;&lt; 1) | 1]); &#125;&#125; 单点修改 施工中，未完待续… 区间修改 施工中，未完待续… 区间查询 施工中，未完待续… 空间复杂度 施工中，未完待续… 时间复杂度 施工中，未完待续… 建树O(n)O(n)O(n) 单点修改O(1)O(1)O(1) 区间查询O(logn)O(log n)O(logn)]]></content>
      <categories>
        <category>线段树</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【DP】【Internal】二元组dp]]></title>
    <url>%2F2017%2F10%2F15%2F%E3%80%90DP%E3%80%91%E3%80%90Internal%E3%80%91%E4%BA%8C%E5%85%83%E7%BB%84dp%2F</url>
    <content type="text"><![CDATA[请从纯文本意识流中导出密码 ]]></content>
      <categories>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常见错误]]></title>
    <url>%2F2017%2F10%2F12%2F%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%2F</url>
    <content type="text"><![CDATA[本文收集常见以及不常见的各种错误！ 错误 技术问题 溢出 运算溢出(爆int/long long) 中间结果溢出(如组合数) 循环结束条件溢出(少见，会导致TLE) 其它原因导致溢出(如越界) 错误答案 参见&quot;溢出&quot; 超时 参见&quot;溢出&quot; 循环结束条件有误 崩溃 数组开大(开小) 递归(dfs)结束条件有误 scanf没写取值符 优先级 线段树(i&lt;&lt;1)|1写成i&lt;&lt;1|1 底层问题 内存和UB 深浅拷贝 非技术问题 没写文件 编译错误 没建子文件夹 随时更新…]]></content>
      <categories>
        <category>常见错误</category>
      </categories>
      <tags>
        <tag>常见错误</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【转】RP导论]]></title>
    <url>%2F2017%2F10%2F11%2F%E3%80%90%E8%BD%AC%E3%80%91RP%E5%AF%BC%E8%AE%BA%2F</url>
    <content type="text"><![CDATA[1 序——为什么要写RP导论 RP，是人品的缩写，在民间广为流传，被不少人视作真理，也有很多人将之视作迷信。 真的很早就了解到RP在信息学竞赛中举足轻重的作用了，加上前两天由于爆RP考试爆零，星际被虐，交OJ莫名其妙unac……一切的一起，让我不得不把RP的理论系统篆写于书，以供参考，防止大家重蹈我的覆辙。 众所周知，在信息学竞赛中，除去算法数据结构使用，程序编写调试能力之外，排在第三的对比赛有至关重要作用的便是RP了，RP高的人即使不知道算法也能用随机，贪心，搜索等RP算法得到无比多的RP分数；相反，没RP的人，有时知道正确算法也写出了正确程序，也往往会因为缺少 RP而无法得分。这样看来，系统研究RP的积累于损失，以及量化地分析它对比赛的结果的影响就显得十分重要了。 但是，目前国内外系统研究RP的论文和书籍都还很缺乏，也有很多优秀的OIer认识到了RP的重要性，但又因种种原因没能从事RP方面的研究，导致很多OIer因为对RP不了解而出现发挥失常，与奖牌失之交臂，为了让这种悲剧不再发生，我们有必要仔细研究RP了。 注 《RP导论》原始版本由洪骥发布，后由西南OI剑派CDQZ分部弟子联合编辑至今，欢迎天下同道前来编辑。 RP的定义与形成 RP的概念与意义 RP是大家耳熟能详的一个词汇和概念，改革开放以来，随着市场经济的深入，竞争日益激烈，大家都在寻找在各自领域取胜的有效方法，人们考虑各种因素来提高自己成功的概率。 江湖难测，谁是强者，谁争一统武林的资格！ 在这样的大背景下，便自然而然地产生了RP的概念，起初这个概念还是依附在其他因素上的一个附属品，但是当人们真正认识到它的影响时，才发现它是一个独立的体系。由于各地各文献内容对RP的定义都很模糊，也不够统一，因此笔者在此以学术的角度，客观的方式给出RP的严格定义： Definition 1 RP：在一定时间和空间范围内独立于可见因素之外以不确定方式左右客观事物变化方式甚至规律的无形物质。 一直以来，大家觉得RP过于飘渺，不愿意研究它，这其实是由于没有真正意识到RP在客观世界物质变化规律中的重要意义，由于客观世界矛盾的普遍性存在，导致RP因素在事物发展变化的各个角落都发挥着不可忽略的决策性作用，一般来说，RP的意义主要有以下几点： 对客观世界的平衡作用 物质世界总是趋于平衡的，无论是能量|物质守衡定律，还是热力学第一，第二定律，都从侧面支持这一结论。但是在事物的各个方面个体之间不可能完全平衡，而又不一定能在不多的可见主观因素中使个体之间实现平衡（这正如背包—–双塔问题不一定有解一样），但是只要有了RP，就能很方便地对客观世界进行微调，使世界不失和谐。 对主观行为的威慑作用 所谓善有善报，恶有恶报，但是很难说服一个即将做不厚道事情的人让他停止，因为我们不能具体说出他的不厚道行为到底为什么会对他自己也有害，但是现在有了最强有力的威慑武器：RP！当他做不厚道事情的时候，最需要考虑的不是别的，正是自己的RP银行。 对主观行为的激励作用 与第二条相类似，RP的存在可以很大程度上激励人做积累RP的厚道事情，这里不再赘述。 RP的形成 总的来说，RP的形成是多方面因素综合形象后的结果。对于RP形成的决定性因素，学术界一直没有公认的理论，目前比较被人接受的说法是： RP的形成与平时做事的厚道程度的二次方根成正比，但是也有人质疑这种说法，原因是有时一个很厚道的人也会莫名其妙没RP，典型的案例是发生在中国四川一个学校的一个叫hj的人，平时很厚道，但是也遇到了没RP的情况，虽然这很罕见，但是不得不让人思考，因此，有学者认为：在一定时间和客观条件下，RP值与该人做事厚道程度之和的正弦函数有关，因此呈现出很让人费解的波动性图象，但是这种理论因为缺乏实验支持，目前还没有在学术界占领主导地位，但是笔者认为，这种理论应该更贴近RP形成机理的真实情况。（最新研究表明，波动正是RP趋于平衡的必然结果，由于一个人的RP太高的情况下，失去RP相对容易，所以会从波峰逐渐跌入波谷，反之亦然）(补充:因为RP和现实中由于概率问题而得到 (或损失)的利益相关，从而导致RP会趋于平衡，例如:《塞翁失马》，其中的“塞翁”就是因为利益和RP之间相关连，导致出现一福一祸的现象，简单说就是碰到好事情RP会下降，碰坏事情RP会上升) 另外，RP的形成是有阶段性的，也就是说，有时候RP的变化并不是立竿见影的，但是RP升降因素的积累是不会停止的，在某个时期可能表现地不明显，但是宏观上的RP积累是一定的，这也就形成了RP的波动性改变，所以大家在某个RP低迷的时期也不应该停止对RP的积累。（就像力改变的 3 RP的影响与利弊 是加速度，而不会对当前的速度有立竿见影的影响，不过长期的影响是深远而持久的） 另外客观世界满足一个基本定律——RP守衡定律，即RP不会凭空创生，也不会凭空湮灭，只会从一个生物转移到另一个生物，或者由RP转换为现实中通过不确定因素获得的利益，RP转移包含以下几种方式： 虐与被虐。 泡MM与MM被泡。 捡到钱(但是没有还)和丢钱(但是没找回来) 这几条都很好理解，比如，某人玩星际被别人虐了，或者不小心把钱丢了，那么他的RP会有上升的倾向，另外，抢别人MM的人的RP会异常迅速地下降，或者捡到别人的钱不还也会导致RP下降，所以大家一定要厚道。 RP的影响与利弊 RP的不利影响 对于RP不足带来的不利影响，想必读者已经有了不少体会了，为了系统介绍，这里将不利影响列举一些例子如下： 考试爆0（考挂，发挥失常等） 泡MM失败（被无视，被抢夺等） 自行车胎被扎（汽车，电瓶车） 物品频繁损坏（如T43等） 星际被虐（连续被虐很多局根据叠加原则将会出现更深远的影响） 误机（堵车，迷路等） 以上每一条虽然是RP不足带来的不利影响，但是客观上又可以积累 RP，这也正体现了客观世界与RP的辨证关系。 从宏观上讲，上述事情也许并非全是坏事，像（3），（4）两条在扩大内需，刺激经济增长方面也是有积极作用的，但是本文讨论的主观色彩较重，对一些过于YY的东西不做讨论。 关于RP带来的麻烦的解决方法，学术界一直争论不休，企图认为改变 RP变化趋势的想法，已经被实践证明是NPC，想预测RP的发展方向，也被论证是不可解问题。 3 RP的影响与利弊 那么，面对RP带来的不利影响，我们真的就束手无策了吗？非也！我们有解决NP类问题的有力武器：星际！！！！ 在RP不好的时候，开High—AI调两家神族，遭电脑虐几盘，RP指数相信会有很大概率要++的，虽然这仍然是个部分算法，但是事实证明是很有效的，已经不亚于cqf的（sei）机贪心了……(补充:根据RP守恒定律中“只会从一个人身上转移到另一个人身上”，此方法可能没有效果)。 此外，另有极端人士为了平衡自己的RP，在关键时刻向别人赠送人民币，虽然被证明实际效果甚微，但是由于接受方会损失大量RP，所以这种行为也被认为是极度危险和边缘的。对于此损人不利己的行为，将会在以后对自己的RP走向产生不利影响。从自己和别人那里流失出来的RP，就会流入社会，等待下一次再分配（根据标量场理论，RP高者将在再分配中较低RP者得到更多的RP)。 古时另有各种迷信活动来祈求获得RP，经证明一些行为是十分有效的，但是尚没有任何科学理论可以他们的成功，其中最著名的历史事件为诸葛亮借东风，这是以神秘的法事活动来获得RP成功的典型例子，不但说明了我国的RP研究在很早的时候就有开展，并且代表了当时的RP学说已经发展到相当先进的阶段，后来由于战乱和历史原因，RP学逐渐没落和淡出国人的视野，在近代才又被重新提出和加以研究，但想恢复当年的水平还任重而道远。 RP的有利影响 对于希望利用RP以追求更高品质生活的读者来说，RP的有利影响也是应该了解的重要问题之一。关于RP的有利影响，对于大部分本人读者来说，不外乎下面两个方面： 考试获得理想的分数 泡MM获得阶段性成果 总结起来便是工作方面和生活方面，从中可以看出，RP对于生产生活的各个方面如果合理加以利用都可以达到相当大的有利效果。所以，“天下之大，人品独尊”，若存在一种方式，可以让一个人长期保有相当量的 RP，那么此人便可以独步天下，无人能当，足以可见RP的威力。（也有学者认为本情况是不可能成为现实的，不过并没有合理的证明）不过关于高 RP独步天下的例子，笔者实在难以获得，这也从侧面反映了RP易失难获的性质，从而说明了大自然趋于平衡的典型特征。 小结RP的利弊 （未完待续） 4 RP的估测与评价 RP的估测与评价 我们生活的环境是存在着RP场(本人认为，不同时间束分支所含主观RP 不同，所以穿越会获得大量RP)，就象我们生活在磁场中一样。每个人都存在着一定的RP势能，记作Erp。它所遵循的定律见“RP的变化与操纵”。RP 的本质是一种人为设想的能量形式，用来描述一个人的LUCKY值。 RP的单位系统 （未完待续） RP的估测方法 Erp的变化量大小ΔErp = |w−Pf|+1（w表示期待事件发生的次数，如果不想它发生一次那么w=−1，f是事件的频率，P是事件的概率） 此公式可用来计算瞬间转移的RP值，例如：一个人中了500W，中奖的概率是1/1000000，想这一次中奖，那么，ΔErp = 1000000，也就是说，他瞬间损失了这么多RP势能。如果你不去想，即w = 0，那么将会损失更多RP（可以这么理解，你无所谓的事情都发生了，那你肯定要多损失点 RP啦）。再例如：帮老奶奶过街，因为碰到这样的情况概率不大（也就是说机会难得啊，如果是一般的让座估计就没这么多RP赚了），所以得到 的Erp也就大咯。 一个人的RP势能很低，并不代表RP能量就会向他流动，因为这些能量还受到周边人、物的RP引力制约。只能说，RP低的人在同等条件下更容易接受RP能量，从而升高RP势能；RP势能高容易失去RP（多数以无用的形式流向大自然，因为这是必然事件，那么），为了维持较高的RP势，我们就要不断的补充。但是RP势能高，并不代表就会有你说期待的好事发生，有可能这些RP以其他你所不期待的形式释放了，我们称作为RP亏损，这就取决于你的RP利用率了。所以，我们在汲取RP的同时，还要锻炼我们的RP利用率。 这里要说一个自然损失，因为这是必然事件，所以P =1，那么RP的损失量就直接和你的w值有关了，也就是，如果你正确认识了这种必然性，你的RP只会损失1，如果你非常不想让它损失那么你将损失更多的RP能量，所以，调整心态是很重要的啊～！ RP的变化与操控 RP的几大定律 RP第一定律 Law 1 RP是守恒的，它既不会凭空产生，也不会凭空消失 即人品守恒定律，在任何过程中，宇宙中人品总量保持为常数。（也就是说，做好事增加人品做坏事损人品，遇到好事是以前积攒的人品起了作用，而要使你连自己系开的必修课都没选上，那你真的要多扶扶老奶奶过马路了） 宇宙创生之初，与各大基本粒子同时由爆炸基点生成的一大暗物质种类就是RP。经过笔者的多年探究和无数实验，配合与史蒂芬·霍金的理论研究合作，已经基本从理论高度证明了RP第一定律，也称为“RP守恒定律”。 这一定理的理解往往不像物理学中的“热力学第一定律”那样好理解，因为在实际生产生活实践中，往往会发现某人的RP大量减少，但是并没有发现某人的RP有明显的提升，所以也导致在很长一段时间内大量研究人员质疑RP守恒定律的正确性。进一步研究发现，RP的存在和守恒是确定的只是由于绝大多数RP往往存在于生物体之外而以“自由RP”的形式游离于宇宙空间，所以，以上那种情况仅仅表明某人的RP由于自身原因散佚于宇宙空间，却没有人从空间中汲取RP，从而导致有效RP减少，也就是发挥作用的RP减少了，但并没有影响RP本身的守恒。 (补充：按照该说法，可以得知，当一个人出生时，其RP是从他所在的空间周围的“自由RP”中汲取的，而从母体中获得的RP较少，但是如果周围的“自由RP”极度缺乏，那么只有可能从母体中获取，于是就出现了难产的情况) RP第二定律 Law 2 RP不可能从低RP物体传向高RP物体而不引起其他变化 但由于RP的不确定性，RP可以从RP的数学期望低的物体传向高RP数学期望物体，这与第二定律不矛盾。 (例如:通过RP到现实利益的转化再由现实利益转化为RP的过程) 从该定律可以推导出： Inference 1 (人品转移定律) 人品是可以相互转移的，但这种转移必须通过必要的手段，譬如烧香，祈祷，诅咒等，以及相应的媒介，譬如遭遇高僧或者超级霉人。 RP第三定律 Law 3 当一个人的RP无限减小时其生命力趋近于零，亦即任何一个活体生物的RP均不为零。 （或：对大量的事实的分析表明，绝对不可能没有RP。）此定律还有如下表述： 不能用有限的步骤使一个人的人品完全消耗。（也就是说，你再怎么霉，也还是会有点人品存量的，所以永远不要灰心丧气。）请大家看一个范例：「塞翁的马丢了，他说“没事，攒人品”，当他丢失的马带回来一群马，别人羡慕不已，他则暗叹“不妙，人品消耗的太多”，果然他的儿子因为骑马而摔断了腿后，他摇摇头说 “继续攒人品”，等到战争时别人家的孩子被征兵战死沙场，只有他的儿子因为腿断了而幸免，这时他激动地说“人品爆发了啊”……」 RP第四定律 Law 4 如果两个人中每一个人的RP值均与第三个人相同，那么她或他或它们彼此也必有RP值相等[脚注]。 RP惯性定律 Law 5 RP存在惯性，即提升或消耗RP的事件有连续发生的趋势。 RP惯性学也自古就有。“祸不单行”和“双喜临门”就是典型代表。不过它却一直以来饱受批判，“福无双至”直接把这个理论推到了悬崖边上。但如今随着人类交流的日渐增多，惯性RP粒子经常被报道：诸如某X撞狗屎运中了500w之后又在股市大有斩获；或者某大衰刚碰上车祸马上被女友甩掉。人们不得不正视RP存在惯性这一事实。 RP统计定律 Law 6 对于个体事件，人品是极不确定的，或不可量度的；然而对于大量的事件而言，人品会体现一定的统计规律。 而现在的人品学家们在人品学理论的微观研究上已取得了革命性突破，在量子力学、大一统论、超弦理论大旗号召下的今天，让我们一起走进量子人品学（Quantum Characterics）的新纪元！ 基数人品论 导论：人品作为一般等价物，为满足日常需要，需投入一定的人品，以投入人品与获得的效用的数据构建图像，可以得到基数人品论(cardinal characterics)的边际人品-效用图。后来，有学者提出人品不可测量，只可比较，由此发展了序数人品论(ordinal characterics)，目前比较成熟完善的是基数人品论。 基数人品论的一些观点： 为提高享受，需不断追加人品消耗，而享受的提高因随追加人品的增加而递减，享受提高为零时，投入人品就应停止，如再增加，则成为负数。即“人品效率递减定律”。表达式：dRPdU &lt;0 人品等分配定律：当面临多种消耗人品的活动时，应使得花费在所有活动的最后一单位人品边际效用相等。这样能将给定的人品转化出最 大效用。表达式： dUk = dRPdU((kk+1)+1)，k∈N。 dRPk 在原有人品消费已满足的前提下，要想用人品换取更多的好处，只有发展新人品消费项目和扩充原有人品消费项目。 规模人品 消费人品的活动，必须根据它的特点，确立一个起始人品投入规模/最小人品投入规模或称“最小有效规模”，投入低于这一规模，就会导致回报为零。超过这一规模，即进入一个“合理规模”区间，在这一区间内，追加人品投入都会得到回报。 人品爆发 一定条件下，存在以单位最小人品投入量获得最大单位的收益的点，称为“人品爆发点”。但这种事件的发生时间、场所等往往难以确定。 由人品等分配定律可得，单位最小人品投入量获得最大单位的收益的点就是起始点。“人品爆发点”与之矛盾，如何解释呢？后经科学家赵明毅 (?-2007)研究，人品爆发原因是他的故土–锑星星球有重要关系。锑星特有物质磷化卤(R?P)，理化特性由于赵明毅的离奇失踪（？）而流失。其独特的的反重力性(探佚专家自《大锑赵明毅》相关章节推出)使得部分游离态磷化卤会脱离锑星，被喷射出去，从而对人品分布产生干扰，导致部分时间与场人品运行机理扭曲。由于历史原因，人品爆发常被归结于行善，现在这个概念已由国际人品研究协会(International Characteric Research Association，GCRA[脚注])规范化，形成了目前的通用表述与解释。 RP的变化因素 总的来说，RP的变化因素不可控因素比可控因素占的因素还多，发生在身边的任何事都可能改变你的RP，正是因为这样，RP才经常变化于无形中，但是这不是我们放弃研究RP的理由，要在复杂的情况中提炼出简单的规律，化繁为简。笔者经过多年实践观察总结，列出了如下表格描述各种因素与RP的变化关系： 事件 对RP影响（单位：fs） 考试爆0 +6 星际，羽毛球等被虐 +5 扶老奶奶过街 +3 星际，羽毛球等虐人 -10 八卦zmy -20 在jf不幸滴看见某人 -100 （注：单位“fs”的定义为：vijos上AC一道题所需要的RP的量） 由上述表格可以看出，积累RP是不容易的，但是积累的RP却很容易在不经意之间丢失，（所谓“大自然厌恶高RP”，也就是说，RP越高的人，丢失RP也就会显得越容易）。这就是为什么很多人抱怨自己的RP从来就没好过，那是因为他们好不容易有点RP了，却由于自己不小心又做的损RP的事情而把宝贵的RP丢失了。（RP易转化为现实利益，且RP易挥发） 人为调节RP的技巧与方法 说实话，对这一节的内容笔者没有十分的把握，因为笔者本人对这部分内容一直都很困惑，我希望能通过一些认为手段调节可怜的RP，但是理论跟实践的差距往往相当大，我理论分析总结的规律在实践中有时并不能行通，就像我有时候可以地遵守交通规则，不闯红灯，听妈妈的话等等等等，原本以为这样可以积累RP，无奈考试还是要爆0，说白了就是RP对人似乎有天生的抵触情节，最经典的例子是与笔者同校的一个叫LKQ(化名)的同学在NOI之前不幸将自己的手机搞丢，本以为自己RP会增长到一定的程度，以帮助自己在NOI上获得较好的成绩，结果事与愿违，NOI还是不幸考挂，所以我们分析一个现实生活中的RP问题，一定不能拘泥于某一些事情对于 RP的影响，而应该纵览全局，客观考虑各种因素的影响，才能最后得出准确的结论，事实证明那位同学在NOI上被室友塞了满满一抽屉的硬币，硬币虽小，但对RP的影响却是巨大的，正如刚才论述的，RP失去容易获得难，虽然手机的价值远大于硬币，但是对于失去手机RP有所增长的这位仁兄来说，获得硬币所损失的RP更是一个恐怖的数字。所以要客观和全面地分析问题，才能获得准确和有效的结论。 但是我们不能因此就放弃对RP的调节，我们需要持之以恒的调节RP。因为根据SW的经验来看，追MM、谈恋爱等事情需耗费巨大的RP。例如：SW 6 RP的奇律 和其女同学一起吃完KFC出去的时候，其女同学说也许我们出去就会被汽车一起撞死，为了避免这种悲剧发生，SW不得不支付大量RP……所以各位需要不断的累积RP，来应付各种突发状况…… RP之变诈几何哉？止增笑耳。 RP的奇律 任何理论都有其局限性，当然经典RP理论也是一样，某些时候RP会从某个人身上大量的涌现（俗称:RP爆发)，而此人之前的RP值表现平常甚至很低或者显示为负。这种现象称为RP的奇律。RP爆发相当罕见，因此研究甚少，成果有待完善。 ——出自西南OI剑派CDQZ分部弟子]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【DP】1007-B]]></title>
    <url>%2F2017%2F10%2F07%2F%E3%80%90DP%E3%80%911007-B%2F</url>
    <content type="text"><![CDATA[题意 这是一个伪·三倍经验题。 传送门：1007-B Alternative Question: P1004 NOIp2000TG-4方格取数。 P1006 NOIp2008TG-3传纸条 给定一个n×mn \times mn×m矩阵，从(1,1)(1,1)(1,1)走到(n,m)(n,m)(n,m)走两次，只能向右或向下，希望除始末两点以外其他点不相交，问路径最大权值和。 解法 四维dp，dp[x][y][z][w]为当第一个人在(x,y)(x,y)(x,y)第二个人在(z,w)(z,w)(z,w)时最大权值和。可推出方程： dp[i][j][k][l]=max(dp[i−1][j][k−1][l],dp[i−1][j][k][l−1],dp[i][j−1][k−1][l],dp[i][j−1][k][l−1])dp[i][j][k][l] = \max(dp[i-1][j][k-1][l], dp[i-1][j][k][l-1], dp[i][j-1][k-1][l], dp[i][j-1][k][l-1])dp[i][j][k][l]=max(dp[i−1][j][k−1][l],dp[i−1][j][k][l−1],dp[i][j−1][k−1][l],dp[i][j−1][k][l−1]) ​ +a[i][j]+a[k][l]×[i≠k∣∣j≠l]+a[i][j] + a[k][l] \times [i \ne k || j \ne l]+a[i][j]+a[k][l]×[i≠k∣∣j≠l] 注意当i=k,j=li = k, j = li=k,j=l时，a[i][j]=a[k][l]a[i][j]=a[k][l]a[i][j]=a[k][l]。所以必须减去一个a[k][l]a[k][l]a[k][l]。 代码 12345678910111213141516171819202122232425262728293031// 代码为 P1004方格取数#include &lt;bits/stdc++.h&gt;using namespace std;int dp[15][15][15][15];int a[15][15];int x, y, z;int n;int main() &#123; scanf("%d", &amp;n); scanf("%d%d%d", &amp;x, &amp;y, &amp;z); while (x || y || z) &#123; a[x][y] = z; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); &#125; dp[1][1][1][1] = a[1][1]; for (int i = 1; i &lt;= n; i++) &#123; for (int j = 1; j &lt;= n; j++) &#123; for (int k = 1; k &lt;= n; k++) &#123; for (int l = 1; l &lt;= n; l++) &#123; if (i == 1 &amp;&amp; j == 1 &amp;&amp; k == 1 &amp;&amp; l == 1) continue; dp[i][j][k][l] = max(max(dp[i-1][j][k-1][l], dp[i-1][j][k][l-1]), max(dp[i][j-1][k-1][l], dp[i][j-1][k][l-1])) + a[i][j] + a[k][l] * (i != k || j != l); &#125; &#125; &#125; &#125; printf("%d", dp[n][n][n][n]);&#125; 拓展 这是一个&quot;双线程DP&quot;。几个人同时走的问题可以考虑增加维度来解决。]]></content>
      <categories>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F1949%2F10%2F01%2F.well-known%2Facme-challange%2FSN8OvFrfM3nWr4-lhbtxyemY-9Te8VX_s1Ho5wz3XAk%2F%2F</url>
    <content type="text"><![CDATA[SN8OvFrfM3nWr4-lhbtxyemY-9Te8VX_s1Ho5wz3XAk.WLkG6GU4dDfNVnhiQ3tDj-llxertpm4na0H9pQBq62M]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F1949%2F10%2F01%2F.well-known%2Facme-challange%2F-yzfgYhMsZoBE3HHQ2mwQc7HtoJk1_AfS5t-DAcSmjI%2F%2F</url>
    <content type="text"><![CDATA[-yzfgYhMsZoBE3HHQ2mwQc7HtoJk1_AfS5t-DAcSmjI.WLkG6GU4dDfNVnhiQ3tDj-llxertpm4na0H9pQBq62M]]></content>
  </entry>
</search>
