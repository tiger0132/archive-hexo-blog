<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[【置顶】DISCLAIMER]]></title>
    <url>%2F9999%2F12%2F31%2FDISCLAIMER%2F</url>
    <content type="text"><![CDATA[本帖为置顶内容，最新内容请向下翻! 本博客仅供本蒟蒻复习用，建议初学者不要看本蒟蒻的博客。 而且本蒟蒻懒癌晚期，博客写的一点都不好。 HALL OF SHAME TODO LIST [ ] CF R468 Div.1订正 [ ] Tarjan求LCA [ ] 缩点、点/边双、桥 [ ] TYVJ1391 走廊泼水节 [ ] BZOJ1912 巡逻 本站地址: oi.tiger0132.tk 欢迎互链。 你什么也没有发现]]></content>
  </entry>
  <entry>
    <title><![CDATA[「洛谷 P1262」间谍网络 - 强连通分量]]></title>
    <url>%2F2018%2F05%2F30%2Fluogu-1262%2F</url>
    <content type="text"><![CDATA[题意 传送门：洛谷 P1262 - 间谍网络 国家内部出现了一些间谍。有一部分间谍给钱就能控制。如果控制了一个间谍就可以控制其他的一些间谍。问最少需要多少钱可以控制所有的间谍。或者说这是不可能的。 可以说是非常模板的一道题了。 解法 显然如果一个强连通分量中有一个间谍被控制了，那么整个强连通分量(里的间谍)就都被控制了。 显然在图中没有环的时候，控制了所有入度为0的间谍就可以控制整张图。 于是我们可以强连通分量缩点之后在DAG上按照上面的策略dfs就好了。 代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798#include &lt;bits/stdc++.h&gt;using namespace std;struct edge &#123; int from, to, next;&#125; e[20004];int deg[3003], srcv[3003], val[3003], controlled;int head[3003], cnt, ans, m;bool vis[3003];void addedge(int x, int y) &#123; e[++cnt] = (edge)&#123;x, y, head[x]&#125;; head[x] = cnt;&#125;int idx, scnt, dfn[3003], low[3003], scc[3003], id[3003];stack&lt;int&gt; st;void tarjan(int x) &#123; dfn[x] = low[x] = ++idx; vis[x] = true; st.push(x); for (int i = head[x]; i; i = e[i].next) &#123; int nx = e[i].to; if (!dfn[nx]) &#123; tarjan(nx); low[x] = min(low[x], low[nx]); &#125; else if (vis[nx]) &#123; low[x] = min(low[x], dfn[nx]); &#125; &#125; if (dfn[x] == low[x]) &#123; val[++scnt] = srcv[x]; id[scnt] = x; // printf("scc #%d:\n", scnt); while (!st.empty()) &#123; int _ = st.top(); st.pop(); // printf("%d\n", _); scc[_] = scnt; vis[_] = false; id[scnt] = min(id[scnt], _); val[scnt] = min(val[scnt], srcv[_]); if (_ == x) return; &#125; &#125;&#125;void dfs(int x) &#123; if (vis[x]) return; vis[x] = true; controlled++; for (int i = head[x]; i; i = e[i].next) &#123; dfs(e[i].to); &#125;&#125;int n, k, x, y;int main() &#123; memset(srcv, 0x3f, sizeof srcv); scanf("%d%d", &amp;n, &amp;k); while (k--) &#123; scanf("%d%d", &amp;x, &amp;y); srcv[x] = min(srcv[x], y); &#125; scanf("%d", &amp;k); while (k--) &#123; scanf("%d%d", &amp;x, &amp;y); addedge(x, y); &#125; for (int i = 1; i &lt;= n; i++) &#123; if (!dfn[i]) tarjan(i); &#125; n = scnt; m = cnt; memset(head, 0, sizeof head); cnt = 0; memset(vis, 0, sizeof vis); for (int i = 1; i &lt;= m; i++) &#123; if (scc[e[i].from] != scc[e[i].to]) &#123; deg[scc[e[i].to]]++; addedge(scc[e[i].from], scc[e[i].to]); &#125; &#125; for (int i = 1; i &lt;= n; i++) &#123; if (!deg[i]) &#123; if (val[i] == 0x3f3f3f3f) &#123; printf("NO\n%d", id[i]); return 0; &#125; ans += val[i]; dfs(i); &#125; &#125; assert(controlled == n); printf("YES\n%d", ans); return 0;&#125; 总结 很多DAG上的东西在一般的有向图上很难做，这是就可以考虑用Tarjan将图变成DAG。]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>洛谷</tag>
        <tag>Tarjan</tag>
        <tag>强连通分量</tag>
        <tag>缩点</tag>
        <tag>DAG</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「算法」差分约束系统]]></title>
    <url>%2F2018%2F05%2F29%2Fsystem-of-difference-constraints-notes%2F</url>
    <content type="text"><![CDATA[简介 差分约束系统是一类不等式组。其中每一个不等式都是xa−xb≥cx_a-x_b\ge cxa​−xb​≥c的形式。 流程 对于每一个不等式xa−xb≥cx_a-x_b\ge cxa​−xb​≥c，都有xa−xb≥c⇒xa−c≥xbx_a-x_b\ge c\Rightarrow x_a-c\ge x_bxa​−xb​≥c⇒xa​−c≥xb​。可以转化为下面这张图： 同理，对于xa−xb≤cx_a-x_b\le cxa​−xb​≤c，都有xa−xb≤c⇒xb+c≥xax_a-x_b\le c\Rightarrow x_b+c\ge x_axa​−xb​≤c⇒xb​+c≥xa​。可以转化为下面这张图： 同理，对于xa−xb=cx_a-x_b=cxa​−xb​=c，都有xa−xb=c⇒c≤xa−xb≤cx_a-x_b=c\Rightarrow c\le x_a-x_b\le cxa​−xb​=c⇒c≤xa​−xb​≤c。可以转化为下面这张图： 差分约束系统可以使用最短路计算。(因为有负权边，所以一般使用队列优化的Bellman-Ford算法) 算法初始化时，会从0号节点向每一个节点连一条长度为0的边(x0−xa≥0⇒x0≤xax_0-x_a\ge0\Rightarrow x_0\le x_ax0​−xa​≥0⇒x0​≤xa​，不影响结果)，以保证整个差分约束系统全部被计算到。 可以证明，若图中有负环，则差分约束系统无解。 理解不了？ 比如第一张图： 可以理解为点a和点b都有一个点权，这个点权既是dis(最短路)数组又是差分约束系统的解。 因为两个点之间满足dis[a]+(-c)&lt;=dis[b](最短路性质)，而且左边的式子正好就是原不等式。 所以我们就能把不等式转换到图上啦~ 代码 该代码用于Accepted洛谷 P1993 - 小K的农场。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include &lt;bits/stdc++.h&gt;using namespace std;struct edge &#123; int to, next, w;&#125; e[1000006];int op, n, m, u, v, w;int head[200005], cnt;bool flag[200005];bool vis[200005];int dis[200005];int upd[200005];void addedge(int x, int y, int z) &#123; e[++cnt] = (edge)&#123;y, head[x], z&#125;; head[x] = cnt;&#125;int spfa(int x) &#123; vis[x] = 0; for (int i = head[x]; i; i = e[i].next) &#123; int nx = e[i].to; if (dis[nx] &gt; dis[x] + e[i].w) &#123; dis[nx] = dis[x] + e[i].w; upd[nx] = upd[x] + 1; if (upd[nx] &gt; n) return 0; if (!vis[nx]) &#123; vis[nx] = 1; if (!spfa(nx)) return 0; &#125; &#125; &#125; return 1;&#125;int main() &#123; for (scanf("%d%d", &amp;n, &amp;m); m--; ) &#123; scanf("%d%d%d", &amp;op, &amp;u, &amp;v); if (op == 3) &#123; addedge(u, v, 0); addedge(v, u, 0); continue; &#125; scanf("%d", &amp;w); if (op == 1) &#123; addedge(u, v, -w); &#125; else &#123; addedge(v, u, w); &#125; &#125; for (int i = 1; i &lt;= n; i++) &#123; addedge(0, i, 0); &#125; memset(dis, 0x3f, sizeof dis); dis[0] = 0; puts(spfa(0) ? "Yes" : "No"); return 0;&#125;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>模板</tag>
        <tag>差分约束系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「算法」Pollard-Rho算法]]></title>
    <url>%2F2018%2F05%2F24%2Fpollard-rho-notes%2F</url>
    <content type="text"><![CDATA[简介 Pollard-Rho是一种用来快速找到一个数的一个因子的算法。 生日悖论 23个人之间有人生日相同的概率超过50%。 有这么玄学的悖论那我们就可以随机分解了23333。 于是我们试除时就不用盲目选数了。 Pollard-Rho算法 现在有一个伪随机函数f(x)=(x2+c)modn,c=rand()f(x)=(x^2+c)\bmod n,c=\text{rand}()f(x)=(x2+c)modn,c=rand()。 然后每次判断gcd⁡(∣a−b∣,n)\gcd(|a-b|,n)gcd(∣a−b∣,n)是不是大于111就好了。玄学证明：这个伪随机函数效果不错。 但是如果出现死循环了怎么办？ 我们有Floyd发明的机智判环算法。弄两个数字aaa和bbb。每次使a=f(a),b=f(f(b))a=f(a),b=f(f(b))a=f(a),b=f(f(b))。 如果发现a=ba=ba=b那么显然bbb已经走完至少一个圈了。那时我们就可以直接return了。 时间复杂度O(玄学)O(\text{玄学})O(玄学) or O(n14)O(n^\frac14)O(n41​)。 分解之前先要Miller-Rabin素性测试下。 代码 这里有一份可以Accepted洛谷 P1075 - 质因数分解的代码： 因为题目保证了**正整数n是两个不同的质数的乘积 **，于是就不用米勒拉宾了。 12345678910111213141516171819202122232425262728293031#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const ll c = 20060516;ll f(ll x, ll n) &#123; return (x * x + c) % n;&#125;ll pollard(ll x) &#123; begin: ll a = rand() % x, b = a; while (1) &#123; a = f(a, x); b = f(f(b, x), x); if (a == b) goto begin; ll p = __gcd(__builtin_llabs(a - b), x); if (p &gt; 1) return p; &#125;&#125;ll n, x;int main() &#123; scanf("%lld", &amp;n); x = pollard(n); printf("%lld", max(x, n/x)); return 0;&#125; 拓展 好像有一种东西叫做Brent判环，比Floyd判环高效。]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>模板</tag>
        <tag>数论</tag>
        <tag>Pollard-Rho</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「算法」Miller-Rabin算法]]></title>
    <url>%2F2018%2F05%2F22%2Fmiller-rabin-notes%2F</url>
    <content type="text"><![CDATA[简介 fAKe： Miller-Rabin算法是目前主流的基于概率的素数测试算法，在构建密码安全体系中占有重要的地位。通过比较各种素数测试算法和对Miller-Rabin算法进行的仔细研究，证明在计算机中构建密码安全体系时， Miller-Rabin算法是完成素数测试的最佳选择。通过对Miller-Rabin算法底层运算的优化，可以取得较以往实现更好的性能。…… REAL： Miller-Rabin算法是一种用来判断素数的概率算法。 概念 费马小定理 对于素数ppp。若有整数0&lt;a&lt;p0&lt;a&lt;p0&lt;a&lt;p，则有ap−1≡1(modp)a^{p-1}\equiv1\pmod pap−1≡1(modp)。 可惜就算试遍所有的aaa，也不能保证ppp是个质数。这种测试叫费马测试。 即费马定理的逆命题是错的。 二次探测定理 对于奇素数ppp，若有整数0&lt;x&lt;p0&lt;x&lt;p0&lt;x&lt;p满足方程x2≡1(modp)x^2\equiv1\pmod px2≡1(modp)，则方程的解为x1=1,x2=p−1x_1=1,x_2=p-1x1​=1,x2​=p−1。 二次探测定理的逆命题是对的。 接下来我们假设待测试的数是nnn。 特殊 假设天上掉下来一个结论说341341341可以通过a=2a=2a=2时的费马测试。那么有2340≡1(mod341)2^{340}\equiv1\pmod{341}2340≡1(mod341)。 根据二次探测定理，有2170≡1 or 340(mod341)2^{170}\equiv1\text{ or }340\pmod{341}2170≡1 or 340(mod341)。测试之后发现是对的。 但是当我们测试285mod3412^{85}\bmod341285mod341是，却发现等于323232。然后我们就得出341341341并不是素数了。 一般 现在假设aaa还是等于222。 其实上面的过程就是把n−1n-1n−1分解为2s⋅t2^s\cdot t2s⋅t的形式(ttt为奇数)。 然后根据二次探测定理。(at)2≡1(modn)⇒x1=1,x2=n−1(a^t)^2\equiv1\pmod n\Rightarrow x_1=1,x_2=n-1(at)2≡1(modn)⇒x1​=1,x2​=n−1。 式子中的(at)2(a^t)^2(at)2也就是a2ta^{2t}a2t。 所以我们可以让指数从ttt开始，不停的翻倍(s++)，然后每次计算a2itmodna^{2^it}\bmod na2itmodn的值。 最后测试ap−1a^{p-1}ap−1(即a2sta^{2^st}a2st)即可。 对于任意给定的正整数aaa，如果通过了上述的所有步骤，则称n通过了以a为底的Miller-Rabin测试。 然后我们多试几个aaa就好了。 代码 这里有一份可以Accepted洛谷 P3383 - 线性筛素数的代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int testcase[3] = &#123;2, 7, 61&#125;;ll pow_mod(ll x, ll y, int z) &#123; ll ret = 1; while (y) &#123; if (y&amp;1) ret = ret * x % z; x = x * x % z; y &gt;&gt;= 1; &#125; return ret;&#125;bool check(int p, int x) &#123; int s = 0, t = p-1; while (1&amp;~t) &#123; t &gt;&gt;= 1; s++; &#125; ll mod = pow_mod(x, t, p); if (mod == 1 || mod == p-1) return true; while (s--) &#123; mod = mod * mod % p; if (mod == p-1) return true; // 1 * 1 = 1 &#125; return false;&#125;bool prime(int x) &#123; if (x == 2 || x == 7 || x == 61) return true; if (x == 1 || 1&amp;~x || !(x%7) || !(x%61)) return false; for (int i = 0; i &lt; 3; i++) &#123; if (!check(x, testcase[i])) return false; &#125; return true;&#125;int n, x;int main() &#123; for (scanf("%*d%d", &amp;n); n--; ) &#123; scanf("%d", &amp;x); puts(prime(x) ? "Yes" : "No"); &#125; return 0;&#125; 总结 老祖宗告诉我们，若nnn通过一次测试，则nnn是合数的几率就只有原来的14\dfrac1441​。 并且有以下结论： if n &lt; 2,047, it is enough to test a = 2; if n &lt; 1,373,653, it is enough to test a = 2 and 3; if n &lt; 9,080,191, it is enough to test a = 31 and 73; if n &lt; 25,326,001, it is enough to test a = 2, 3, and 5; if n &lt; 3,215,031,751, it is enough to test a = 2, 3, 5, and 7; if n &lt; 4,759,123,141, it is enough to test a = 2, 7, and 61; if n &lt; 1,122,004,669,633, it is enough to test a = 2, 13, 23, and 1662803; if n &lt; 2,152,302,898,747, it is enough to test a = 2, 3, 5, 7, and 11; if n &lt; 3,474,749,660,383, it is enough to test a = 2, 3, 5, 7, 11, and 13; if n &lt; 341,550,071,728,321, it is enough to test a = 2, 3, 5, 7, 11, 13, and 17; if n &lt; 1016 and n ≠ 46,856,248,255,981, it is enough to test a = 2, 3, 7, 61, and 24251; if n &lt; 3,825,123,056,546,413,051, it is enough to test a = 2, 3, 5, 7, 11, 13, 17, 19, and 23; if n &lt; 18,446,744,073,709,551,616 = 264, it is enough to test a = 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, and 37; if n &lt; 318,665,857,834,031,151,167,461, it is enough to test a = 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, and 37; if n &lt; 3,317,044,064,679,887,385,961,981, it is enough to test a = 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, and 41. 加粗的两条看起来很好用。]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>模板</tag>
        <tag>数论</tag>
        <tag>Miller-Rabin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「算法」树状数组 (+6)]]></title>
    <url>%2F2018%2F05%2F20%2Fbit-notes%2F</url>
    <content type="text"><![CDATA[树状数组，顾名思义望文生义，就是树状的数组。 树状数组，就是压了一半空间的zkw线段树，就是没有右子树的线段树&quot;堆式存储&quot;后的数组。 (这里所有的操作全都是区间加，区间和) UPD： 2018-03-29 20:55:23：Initial Commit 2018-04-01 22:44:36：Add 支持区间查询 代码3 2018-04-05 18:39:15：Add 二维树状数组,Change[Everything](更改排版、格式) 2018-05-20 [数据删除]：Add二维树状数组·区间查询,Add例题列表,Change高维树状数组？ 概念 树状数组长这样： 观察数组下标的二进制和树，得 1234567891 12 103 114 1005 1016 1107 1118 1000... 注意到每一层最左边的点都是2n2^n2n数列上的数。如果按照树形结构排列这些下标，得 其中同一个父节点的子节点，越靠左的在上上面的图中越浅。 然后我们发现，每个点和它的父节点都有些微妙的联系。具体地，就是每一个点的下标加上该下标的lowbit等于它的父节点的下标。 什么是lowbit呢？如(100101001100)2(100101001100)_2(100101001100)2​的lowbit就是(100)2(100)_2(100)2​。它可以通过x&amp;-x求出来。 一维树状数组 单点修改+区间查询 区间查询 因为树状数组只有右子树，所以树状数组只能进行前缀查询。方法是把一个点所在的子树和它左边的所有子树全部加起来。 注意到树状数组还有一个性质：一个点加上自身的lowbit，得到的点正好是高于该点的左边第一个节点。 听起来很绕，代个例子就知道了： 如查询111~777时需要访问的点(显然是log⁡n\log nlogn量级的)： 这些点的下标分别是777，7−lowbit(7)=67-lowbit(7)=67−lowbit(7)=6，6−lowbit(6)=46-lowbit(6)=46−lowbit(6)=4…… 单点修改 修改一个点的值，只需要修改它到根沿路上所有的点即可。 那么这些点满足上面的性质，所以只需要一直减去当前下标的lowbit，然后进行相应的修改即可。 下面提供树状数组最基本实现的代码。 代码 这里提供Accepted洛谷 P3374 【模板】树状数组 1的代码。 1234567891011121314151617181920212223242526272829303132333435#include &lt;bits/stdc++.h&gt;int n, m, op, u, v;int rec[500005];int inp[500005];inline int lowbit(int x) &#123; return x&amp;-x;&#125;void add(int i, int x) &#123; for (; i &lt;= n; i += lowbit(i)) rec[i] += x;&#125;int query(int i) &#123; int ret = 0; for (; i; i -= lowbit(i)) ret += rec[i]; return ret;&#125;int main() &#123; scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i++) &#123; scanf("%d", inp + i); add(i, inp[i]); &#125; for (int i = 1; i &lt;= m; i++) &#123; scanf("%d%d%d", &amp;op, &amp;u, &amp;v); if (op == 1) &#123; add(u, v); &#125; else &#123; printf("%d\n", query(v) - query(u - 1)); &#125; &#125;&#125; 区间修改+单点查询 树状数组是可以支持区间修改的。 方法是把原数组的差分数组存在树状数组里。这样区间修改就变成了两个单点修改。如将区间[u,v)[u,v)[u,v)的所有数加上www，那么相当于在它的差分数组的第uuu个数加www，第vvv个数减www。 这样可以比较简单的实现区间修改和单点查询。 代码 这里提供Accepted洛谷 P3368 【模板】树状数组 2的代码。 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;bits/stdc++.h&gt;int n, m, op, u, v, w, l;int rec[500005];int inp[500005];inline int lowbit(int x) &#123; return x&amp;-x;&#125;void add(int i, int x) &#123; for (; i &lt;= n; i += lowbit(i)) rec[i] += x;&#125;int query(int i) &#123; int ret = 0; for (; i; i -= lowbit(i)) ret += rec[i]; return ret;&#125;int main() &#123; scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i++) &#123; scanf("%d", inp + i); add(i, inp[i] - l); l = inp[i]; &#125; for (int i = 1; i &lt;= m; i++) &#123; scanf("%d%d", &amp;op, &amp;u); if (op == 1) &#123; scanf("%d%d", &amp;v, &amp;w); add(u, w); add(v + 1, -w); &#125; else &#123; printf("%d\n", query(u)); &#125; &#125;&#125; 区间修改+区间查询 都支持区间修改了怎么能不支持区间查询？ 还是用差分。 \begin{align} a_1+a_2+\cdots+a_i&=(tree_1)+(tree_1+tree_2)+\cdots+(tree_1+tree_2+\cdots+tree_i)\\ &=i\cdot(tree_1+tree_2+\cdots+tree_i)-(i-1)\cdot tree_2-(i-2)tree_3-\cdots-tree_{i-1} \end{align} 于是可以开两个树状数组，一个存treeitree_itreei​，一个存i⋅treeii\cdot tree_ii⋅treei​。 结束了？结束了。 代码 支持区间修改+区间查询，也就是洛谷线段树1要支持的操作了。 这里提供Accepted洛谷 P3372 【模板】线段树 1的代码。 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;bits/stdc++.h&gt;long long rec2[500005];long long rec[500005];long long inp[500005];long long l, u, v, w;int n, m, op;inline int lowbit(int x) &#123; return x&amp;-x;&#125;void add(int i, int x, long long *arr) &#123; for (; i &lt;= n; i += lowbit(i)) arr[i] += x;&#125;long long query(int i, long long *arr) &#123; long long ret = 0; for (; i; i -= lowbit(i)) ret += arr[i]; return ret;&#125;int main() &#123; scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i++) &#123; scanf("%lld", inp + i); add(i, inp[i] - l, rec); add(i, (i - 1) * (inp[i] - l), rec2); l = inp[i]; &#125; for (int i = 1; i &lt;= m; i++) &#123; scanf("%d%lld%lld", &amp;op, &amp;u, &amp;v); if (op == 1) &#123; scanf("%lld", &amp;w); add(u, w, rec); add(v + 1, -w, rec); add(u, w * (u - 1), rec2); add(v + 1, -w * v, rec2); &#125; else &#123; printf("%lld\n", query(v, rec) * v - query(v, rec2) - query(u - 1, rec) * (u - 1) + query(u - 1, rec2)); &#125; &#125;&#125; 总结 ❗️❗️❗️重点：树状数组中的第个元素表示右端点为，长度为的闭区间。或者说。这也是为什么查询的时候要一直减去lowbit。这样可以&quot;倍增&quot;的覆盖整个区间。 二维树状数组 类比总结1中的线性树状数组，二维树状数组中的treei,jtree_{i,j}treei,j​表示右下角为(i,j)(i,j)(i,j)，长为lowbit(i)lowbit(i)lowbit(i)，宽为lowbit(j)lowbit(j)lowbit(j)的矩阵。 单点修改+区间查询 首先我们把二维树状数组想象成树状&quot;树状数组&quot;数组(树状数组套树状数组)。 然后再次类比总结1中的树状数组结构。现在假设我们要将(x,y)(x,y)(x,y)加zzz。 单点修改 可以考虑把[1,x][1,x][1,x]中的所有[1,y][1,y][1,y]都加上zzz。然后可以用树状数组的lowbit优化复杂度，于是就变成O(log⁡2n)O(\log^2n)O(log2n)的复杂度了。 区间查询 区间查询就是容斥。求[(x1,y1),(x2,y2)][(x_1,y_1),(x_2,y_2)][(x1​,y1​),(x2​,y2​)]的子矩阵和就是query(x2,y2)−query(x1−1,y2)−query(x2,y1−1)+query(x1−1,y1−1)query(x_2,y_2)-query(x_1-1,y_2)-query(x_2,y_1-1)+query(x_1-1,y_1-1)query(x2​,y2​)−query(x1​−1,y2​)−query(x2​,y1​−1)+query(x1​−1,y1​−1)。 模板题1 (HDU2642 - Stars) 题意 你要维护一片1001×1001(0≤x,y≤1000)1001\times1001(0\le x,y\le1000)1001×1001(0≤x,y≤1000)的天空。有333种操作。B x y代表让(x,y)(x,y)(x,y)的星星亮，D x y代表让(x,y)(x,y)(x,y)的星星暗，Q x1 x2 y1 y2代表查询[(x1,y1),(x2,y2)][(x_1,y_1),(x_2,y_2)][(x1​,y1​),(x2​,y2​)]亮的星星数。最开始星星都是暗的。 解法 开两个数组(一个其实就够)。一个存树状数组，一个存原数组。如果星星已经亮了那么忽略B操作，否则就让它亮。D操作同理。然后Q操作就直接套一个裸的区间查询即可。 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include &lt;bits/stdc++.h&gt;using namespace std;int n, rec[1003][1003], src[1003][1003];const int N = 1001;inline int lowbit(int x) &#123; return x&amp;-x;&#125;void add(int i, int j, int x) &#123; while (i &lt;= N) &#123; int j_ = j; while (j_ &lt;= N) &#123; rec[i][j_] += x; j_ += lowbit(j_); &#125; i += lowbit(i); &#125;&#125;int query(int x, int y) &#123; int ret = 0; while (x) &#123; int y_ = y; while (y_) &#123; ret += rec[x][y_]; y_ -= lowbit(y_); &#125; x -= lowbit(x); &#125; return ret;&#125;int t, X1, Y1, X2, Y2;char op[2];int main() &#123; scanf("%d", &amp;n); for (int i = 1; i &lt;= n; i++) &#123; scanf("%s%d%d", &amp;op, &amp;X1, &amp;X2); X1++, X2++; if (*op == 'B') &#123; if (!src[X1][X2]) add(X1, X2, 1); src[X1][X2] = 1; &#125; else if (*op == 'D') &#123; if (src[X1][X2]) add(X1, X2, -1); src[X1][X2] = 0; &#125; else &#123; scanf("%d%d", &amp;Y1, &amp;Y2); Y1++; Y2++; int n1 = min(X1, X2), m1 = min(Y1, Y2), n2 = max(X1, X2), m2 = max(Y1, Y2); printf("%d\n", query(n2, m2) - query(n1 - 1, m2) - query(n2, m1 - 1) + query(n1 - 1, m1 - 1)); &#125; &#125; return 0;&#125; 模板题2 (JSOI2009 - 计数问题) 详见这篇博客。 区间修改+单点查询 根据二维前缀和公式，sumi,j=srci,j+sumi−1,j+sumi,j−1−sumi−1,j−1sum_{i,j}=src_{i,j}+sum_{i-1,j}+sum_{i,j-1}-sum_{i-1,j-1}sumi,j​=srci,j​+sumi−1,j​+sumi,j−1​−sumi−1,j−1​。 那么可以令差分数组di,jd_{i,j}di,j​为srci,jsrc_{i,j}srci,j​与srci−1,j+srci,j−1−srci−1,j−1src_{i-1,j}+src_{i,j-1}-src_{i-1,j-1}srci−1,j​+srci,j−1​−srci−1,j−1​的差。 比如 (174963582)\begin{pmatrix} 1&amp;7&amp;4\\ 9&amp;6&amp;3\\ 5&amp;8&amp;2\\ \end{pmatrix} ⎝⎛​195​768​432​⎠⎞​ 的差分矩阵就是 (16−38−90−46−3)\begin{pmatrix} 1&amp;6&amp;-3\\ 8&amp;-9&amp;0\\ -4&amp;6&amp;-3\\ \end{pmatrix} ⎝⎛​18−4​6−96​−30−3​⎠⎞​ 如果要把111、777、999、666都加上xxx，那么在差分数组里这样更新： (1+x6−3−x8−90−4−x6−3+x)\begin{pmatrix} 1\color{red}+x&amp;6&amp;-3\color{red}-x\\ 8&amp;-9&amp;0\\ -4\color{red}-x&amp;6&amp;-3\color{red}+x\\ \end{pmatrix} ⎝⎛​1+x8−4−x​6−96​−3−x0−3+x​⎠⎞​ 然后区间修改就被转化成了444次单点修改。 区间修改+区间查询 (x,y)(x,y)(x,y)的前缀和可以表示为∑i=1x∑j=1y∑p=1i∑q=1jdp,q\displaystyle\sum_{i=1}^x\sum_{j=1}^y\sum_{p=1}^i\sum_{q=1}^jd_{p,q}i=1∑x​j=1∑y​p=1∑i​q=1∑j​dp,q​。 统计treei,jtree_{i,j}treei,j​的出现次数，得∑i=1x∑j=1ydi,j(x+1−i)(y+1−j)\displaystyle\sum_{i=1}^x\sum_{j=1}^yd_{i,j}(x+1-i)(y+1-j)i=1∑x​j=1∑y​di,j​(x+1−i)(y+1−j)。 (x+1−i)(y+1−j)(x+1-i)(y+1-j)(x+1−i)(y+1−j)展开得(x+1)(y+1)−(y+1)i−(x+1)j+ij(x+1)(y+1)-(y+1)i-(x+1)j+ij(x+1)(y+1)−(y+1)i−(x+1)j+ij 也就是 \begin{align*} &\sum_{i=1}^x\sum_{j=1}^yd_{i,j}(x+1-i)(y+1-j)\\ =&(x+1)(y+1)\sum_{i=1}^x\sum_{j=1}^yd_{i,j}\\ -&(x+1)\sum_{i=1}^x\sum_{j=1}^yd_{i,j}\cdot j\\ -&(y+1)\sum_{i=1}^x\sum_{j=1}^yd_{i,j}\cdot i\\ +&\sum_{i=1}^x\sum_{j=1}^yd_{i,j}\cdot i\cdot j\\ \end{align*} 于是可以开四个树状数组，一个存di,jd_{i,j}di,j​，一个存i⋅di,ji\cdot d_{i,j}i⋅di,j​，一个存j⋅di,jj\cdot d_{i,j}j⋅di,j​，一个存i⋅j⋅di,ji\cdot j\cdot d_{i,j}i⋅j⋅di,j​。 结束了？结束了。 模板题 (BZOJ3132 - 上帝造题的七分钟) 单独放在一篇博客里，未完待续…… 高维树状数组？ 可以通过高维差分和高维前缀和类比低维情况实现。(显然我不会) 然后就可以做到每次O(log⁡dn)O(\log^dn)O(logdn)时间复杂度了。(看起来要开2d2^d2d个树状数组？吐血) 例题列表 一维 单点修改+区间查询： 洛谷 P3374 【模板】树状数组 1 区间修改+单点查询： 洛谷 P3368 【模板】树状数组 2 区间修改+区间查询： 洛谷 P3372 【模板】线段树 1 二维 单点修改+区间查询： HDU2642 Stars JSOI2009 计数问题 区间修改+区间查询： BZOJ3132 上帝造题的七分钟]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>树状数组</tag>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「题目汇总」网络流题目汇总]]></title>
    <url>%2F2018%2F05%2F06%2Fnetwork-flow-problems%2F</url>
    <content type="text"><![CDATA[这里是一些网络流题目的汇总。 进度：ABCDEF。 A, Coding Contest, 费用流 传送门：HDU5988，YaliOJ。 B, Flow Problem, 最大流 传送门：HDU3549，YaliOJ。 题意 求最大流。 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101#include &lt;bits/stdc++.h&gt;using namespace std;const int N = 16384, INF = 0x3f3f3f3f;struct Edge;struct Node &#123; vector&lt;Edge *&gt; edges; int level;&#125; gph[N];struct Edge &#123; int from, to, capacity, flow; Edge *rev; Edge(int from_, int to_, int capacity_, int flow_ = 0) &#123; capacity = capacity_; from = from_; flow = flow_; to = to_; &#125; Edge() &#123; from = to = capacity = flow = 0; rev = 0; &#125;&#125;;bool levelGraph(int s, int t, int n) &#123; for (int i = 1; i &lt;= n; i++) &#123; gph[i].level = 0; &#125; queue&lt;int&gt; bfs; bfs.push(s); gph[s].level = 1; while (!bfs.empty()) &#123; int pos = bfs.front(); bfs.pop(); for (int i = 0; i &lt; gph[pos].edges.size(); i++) &#123; const Edge&amp; e = *gph[pos].edges[i]; if (e.flow &lt; e.capacity &amp;&amp; !gph[e.to].level) &#123; gph[e.to].level = gph[pos].level + 1; if (e.to == t) return true; // 优化一 else bfs.push(e.to); &#125; &#125; &#125; return false;&#125;int findPath(int s, int t, int flow) &#123; if (s == t) return flow; int ret = 0; for (int i = 0; i &lt; gph[s].edges.size(); i++) &#123; Edge &amp;e = *gph[s].edges[i]; if (gph[s].level + 1 == gph[e.to].level &amp;&amp; e.flow &lt; e.capacity) &#123; int tmp = findPath(e.to, t, min(flow, e.capacity - e.flow)); flow -= tmp; e.flow += tmp; e.rev-&gt;flow -= tmp; ret += tmp; if (!flow) break; // 优化二 &#125; &#125; if (!ret) gph[s].level = -1; // 优化三 return ret;&#125;int dinic(int s, int t, int n) &#123; int ans = 0; while (levelGraph(s, t, n)) &#123; ans += findPath(s, t, INF); &#125; return ans;&#125;int cnt = -1;void addEdge(int from, int to, int capacity) &#123; Edge *e1 = new Edge(from, to, capacity, 0); Edge *e2 = new Edge(to, from, capacity, capacity); e1-&gt;rev = e2; e2-&gt;rev = e1; gph[from].edges.push_back(e1); gph[to].edges.push_back(e2);&#125;int t, n, m, a, b, c;int main() &#123; scanf("%d", &amp;t); for (int cn = 1; cn &lt;= t; cn++) &#123; for (int i = 1; i &lt;= n; i++) &#123; gph[i].edges.clear(); &#125; scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= m; i++) &#123; scanf("%d%d%d", &amp;a, &amp;b, &amp;c); addEdge(a, b, c); &#125; printf("Case %d: %d\n", cn, dinic(1, n, n)); &#125;&#125; C, Game, 最小割 传送门：HDU3657，YaliOJ。 D, Harry …, 最小割 传送门：HDU3987，YaliOJ。 题意 求最小割边数。 解法 定理：最大流中满流的边属于最小割边集。 于是可以求一遍最大流，把所有满流的边流量设为111，其它的边设为+∞+\infty+∞，然后再跑一遍网络流就好了。 代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182#include &lt;bits/stdc++.h&gt;using namespace std;struct edge &#123; int to, next, capacity, flow;&#125; e[400005];int level[1003], head[1003], cnt = 1;bool bfs_(int s, int t) &#123; memset(level, 0, sizeof level); queue&lt;int&gt; bfs; bfs.push(s); level[s] = 1; while (!bfs.empty()) &#123; int pos = bfs.front(); bfs.pop(); for (int i = head[pos]; i; i = e[i].next) &#123; if (e[i].flow &lt; e[i].capacity &amp;&amp; !level[e[i].to]) &#123; level[e[i].to] = level[pos] + 1; bfs.push(e[i].to); &#125; &#125; &#125; return level[t];&#125;int dfs(int s, int t, int flow) &#123; if (s == t) return flow; int ret = 0; for (int i = head[s]; i; i = e[i].next) &#123; if (level[s] + 1 == level[e[i].to] &amp;&amp; e[i].flow &lt; e[i].capacity) &#123; int tmp = dfs(e[i].to, t, min(flow, e[i].capacity - e[i].flow)); ret += tmp; e[i].flow += tmp; e[i^1].flow -= tmp; flow -= tmp; &#125; &#125; if (!ret) level[s] = -1; return ret;&#125;int dinic(int s, int t) &#123; int ret = 0; while (bfs_(s, t)) &#123; ret += dfs(s, t, 0x3f3f3f3f); &#125; return ret;&#125;void addedge(int x, int y, int z) &#123; e[++cnt] = (edge)&#123;y, head[x], z, 0&#125;; head[x] = cnt; e[++cnt] = (edge)&#123;x, head[y], z, z&#125;; head[y] = cnt;&#125;int n, m, t, u, v, w, x, _;int main() &#123; scanf("%d", &amp;t); while (t--) &#123; memset(e, 0, sizeof e); cnt = 1; memset(head, 0, sizeof head); scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= m; i++) &#123; scanf("%d%d%d%d", &amp;u, &amp;v, &amp;w, &amp;x); u++; v++; addedge(u, v, w); if (x) addedge(v, u, w); &#125; dinic(1, n); for (int i = 2; i &lt;= cnt; i += 2) &#123; if (e[i].flow == e[i].capacity) &#123; // 满流 e[i].capacity = 1; e[i].flow = 0; e[i^1].capacity = 1; e[i^1].flow = 1; &#125; else &#123; e[i].capacity = 0x3f3f3f3f; e[i].flow = 0; e[i^1].capacity = 0x3f3f3f3f; e[i^1].flow = 0x3f3f3f3f; &#125; &#125; printf("Case %d: %d\n", ++_, dinic(1, n)); &#125; return 0;&#125; 这个题目貌似是个什么「最小割树」，然后好像有一种只用求一次最大流就能出解的算法。 E, Destroy …, 上下界可行流(据说乱搞可过？) 传送门：HDU4940，YaliOJ。 F, Jump, 费用流 传送门：HDU4862，YaliOJ。]]></content>
      <categories>
        <category>题目汇总</category>
      </categories>
      <tags>
        <tag>Y</tag>
        <tag>网络流</tag>
        <tag>图论</tag>
        <tag>最大流</tag>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「算法」网络流]]></title>
    <url>%2F2018%2F05%2F05%2Fnetwork-flow-notes%2F</url>
    <content type="text"><![CDATA[简介 网络流？好难啊。 由于有各种千奇百怪的网络流题的存在，网络流变得异常复杂。 UPD： 2018-02-17 21:09:35：Initial Commit 2018-03-03 22:34:54：Change最小费用最大流 to 费用流，Change代码，Add最小割 2018-03-04 13:07:48：Change代码 2018-05-05 23:31:36：Add费用流 没用的概念 网络：带权有向图，记作G=(V,E)G=(V,E)G=(V,E)。 容量：网络上的边权，边(u,v)(u,v)(u,v)的容量记作c(u,v)c(u,v)c(u,v)。 网络流：指为这个有向图分配流并且使得它每条边上的流量都不能超过这条边的容量。 流量：网络流上的边权，边(u,v)(u,v)(u,v)的流量记作f(u,v)f(u,v)f(u,v)。 可行流满足： 流量限制：0≤f(u,v)≤c(u,v),(u,v)∈E0\le f(u,v)\le c(u,v),(u,v)\in E0≤f(u,v)≤c(u,v),(u,v)∈E。 平衡条件：∑v′f(u,v′)−∑v′′f(v′′,u)={∣f∣u=Vs0u≠Vs,Vt−∣f∣u=Vt\sum_{v&#x27;}f(u,v&#x27;)-\sum_{v&#x27;&#x27;}f(v&#x27;&#x27;,u)=\left\{\begin{array}{lc}|f|&amp;u=V_s\\0&amp;u\ne V_s,V_t\\-|f|&amp;u=V_t\end{array}\right.∑v′​f(u,v′)−∑v′′​f(v′′,u)=⎩⎨⎧​∣f∣0−∣f∣​u=Vs​u≠Vs​,Vt​u=Vt​​ 其中∑v′f(u,v′)\sum_{v&#x27;}f(u,v&#x27;)∑v′​f(u,v′)是从顶点uuu流出的流量之和，∑v′′f(v′′,u)\sum_{v&#x27;&#x27;}f(v&#x27;&#x27;,u)∑v′′​f(v′′,u)是流入顶点uuu的流量之和，∣f∣|f|∣f∣是可行流的总流量，是源点的净流出量，也是汇点的净流入量。 链：前后两两有边项链的点的序列。(准确的说是弧而不是边，之后均使用弧代替边) 前向弧：和链的方向相同。前向弧集合记作P+P^+P+。 后向弧：和链的方向相反。后向弧集合记作P−P^-P−。 增广路：源点到汇点的一条链，满足前向弧非饱和弧，后向弧非零流弧。 即0≤f(u,v)&lt;c(u,v),0&lt;f(u,v)≤c(u,v)0\le f(u,v)&lt;c(u,v),0&lt;f(u,v)\le c(u,v)0≤f(u,v)&lt;c(u,v),0&lt;f(u,v)≤c(u,v)。 残留容量或剩余流量：还能通过的流量。弧的残留容量或剩余流量记作$$。 每条弧对应一个反向残余流量或反向剩余流量c′(v,u)=−f(u,v)c&#x27;(v,u)=-f(u,v)c′(v,u)=−f(u,v)。 残量网络或残余网络或剩余网络：残留容量或剩余流量组成的网络。 ⚠️ 注意：接下来残留容量和剩余容量统一为残留容量，残量网络、残余网络和剩余网络统称残量网络。 无聊的概念终于结束了，进入正题 就一个概念mmp一堆名字恶心不恶心 最大流 Ford-Fulkerson和Edmonds-Karp略。 Dinic 步骤 初始化 BFS构造层次网络和残量网络。 如果汇点不在层次网络中算法结束。 在层次网络中DFS进行增广，然后回到步骤2。 优化 BFS只要搜到终点就直接返回true。 DFS如果一条边的流量流满了，就不需要再对这条边DFS了，直接返回答案。 DFS如果一个点增广不出流量，那么这次DFS就不要再搜这个点了，再层次图中标记为000。 代码 2018-03-03 22:34:54 Update： 因为STL的指针失效问题，代码被改了。(难怪我不能过BZOJ1711) 只能AC洛谷的模板题可能和洛谷的数据生成器CYaRon有关，说不定生成算法或者输出没有打乱然后不加反向弧/加错反向弧也可以AC？interesting 代码为了兼容long long或高精，typedef了Flow_Type，自行更改以适应long long或其它数据。 2018-03-04 13:07:48 Update： 由于原来的代码空间复杂度常数高，于是压了压空间。 该代码用于AcceptedYali 网络流B - Flow Problem或原题HDU3549 - Flow Problem。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293#include &lt;bits/stdc++.h&gt;using namespace std;typedef int Flow_Type;const Flow_Type INF = 0x3f3f3f3f;const int N = 31, M = 1003;struct Edge;int level[N];int head[N];struct Edge &#123; Flow_Type capacity, flow; int to, next;&#125; e[M &lt;&lt; 1];bool levelGraph(int s, int t) &#123; memset(level, 0, sizeof level); queue&lt;int&gt; bfs; bfs.push(s); level[s] = 1; while (!bfs.empty()) &#123; int pos = bfs.front(); bfs.pop(); for (int i = head[pos]; i; i = e[i].next) &#123; if (e[i].flow &lt; e[i].capacity &amp;&amp; !level[e[i].to]) &#123; level[e[i].to] = level[pos] + 1; if (e[i].to == t) return true; // 优化一 else bfs.push(e[i].to); &#125; &#125; &#125; return false;&#125;Flow_Type findPath(int s, int t, Flow_Type flow) &#123; if (s == t) &#123; return flow; &#125; Flow_Type ret = 0; for (int i = head[s]; ret &lt; flow &amp;&amp; i; i = e[i].next) &#123; if (level[s] + 1 == level[e[i].to] &amp;&amp; e[i].flow &lt; e[i].capacity) &#123; Flow_Type tmp = findPath(e[i].to, t, min(e[i].capacity - e[i].flow, flow)); ret += tmp; flow -= tmp; e[i].flow += tmp; e[i ^ 1].flow -= tmp; // if (!flow) break; // 优化二 &#125; &#125; if (!ret) level[s] = -1; // 优化三 return ret;&#125;Flow_Type dinic(int s, int t) &#123; Flow_Type ans = 0; while (levelGraph(s, t)) &#123; ans += findPath(s, t, INF); &#125; return ans;&#125;int cnt = 1;void addUndirectedEdge(int from, int to, int capacity) &#123; // printf("(%d, %d, %d)\n", from, to, capacity); e[++cnt].to = to; e[cnt].next = head[from]; e[cnt].capacity = capacity; head[from] = cnt; e[++cnt].to = from; e[cnt].next = head[to]; e[cnt].capacity = capacity; head[to] = cnt;&#125;void addDirectedEdge(int from, int to, int capacity) &#123; // printf("(%d, %d, %d)\n", from, to, capacity); e[++cnt].to = to; e[cnt].next = head[from]; e[cnt].capacity = capacity; head[from] = cnt; e[++cnt].to = from; e[cnt].next = head[to]; e[cnt].capacity = capacity; e[cnt].flow = capacity; head[to] = cnt;&#125;int t, n, m, a, b, c;int main() &#123; scanf("%d", &amp;t); for (int cn = 1; cn &lt;= t; cn++) &#123; cnt = 1; memset(e, 0, sizeof e); memset(head, 0, sizeof head); scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= m; i++) &#123; scanf("%d%d%d", &amp;a, &amp;b, &amp;c); addDirectedEdge(a, b, c); &#125; printf("Case %d: %d\n", cn, dinic(1, n)); &#125;&#125; 最小割 根据最大流最小割定理，得出最大流===最小割。 内容：最大流就是最小割。 定理证明略 费用流 Edmonds-Karp 求最大流的Edmonds-Karp算法的流程是首先bfs找出任意一条增广路，然后增广，直到无法增广。费用流中的Edmonds-Karp算法则是用spfa(别的也行)找出费用最少的一条 步骤 用SPFA求出费用最少的一条增广路(同时记录路径以便增广)。 对该路径进行增广，流量 += 终点流量, 费用 += 终点流量 * 源点到汇点的距离(费用)。 如果还能增广，就回到步骤1。 代码 该代码用于AcceptedP3381 - 【模板】最小费用最大流。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;bits/stdc++.h&gt;using namespace std;struct edge &#123; int from, to, next, capacity, flow, cost;&#125; e[100005];int head[5003], cnt = 1;int prev[5003];int flow[5003];void ek(int s, int t, int&amp; rflow, int&amp; cost) &#123; int dis[5003]; int vis[5003]; queue&lt;int&gt; bfs; while (dis[t] != 0x3f3f3f3f) &#123; memset(prev, 0, sizeof prev); memset(flow, 0, sizeof flow); memset(dis, 0x3f, sizeof dis); memset(vis, 0, sizeof vis); bfs.push(s); flow[s] = 0x3f3f3f3f; dis[s] = 0; while (!bfs.empty()) &#123; int pos = bfs.front(); bfs.pop(); vis[pos] = 0; for (int i = head[pos]; i; i = e[i].next) &#123; int nx = e[i].to; if (e[i].flow &lt; e[i].capacity &amp;&amp; dis[nx] &gt; dis[pos] + e[i].cost) &#123; dis[nx] = dis[pos] + e[i].cost; flow[nx] = min(flow[pos], e[i].capacity - e[i].flow); prev[nx] = i; if (!vis[nx]) &#123; bfs.push(nx); vis[nx] = 1; &#125; &#125; &#125; &#125; for (int i = prev[t]; i; i = prev[e[i].from]) &#123; e[i].flow += flow[t]; e[i^1].flow -= flow[t]; &#125; rflow += flow[t]; cost += dis[t] * flow[t]; &#125;&#125;void addedge(int x, int y, int z, int w) &#123; e[++cnt] = (edge)&#123;x, y, head[x], z, 0, w&#125;; head[x] = cnt; e[++cnt] = (edge)&#123;y, x, head[y], 0, 0, -w&#125;; head[y] = cnt;&#125;int n, m, s, t, x, y, z, w, rflow, cost;int main() &#123; scanf("%d%d%d%d", &amp;n, &amp;m, &amp;s, &amp;t); while (m--) &#123; scanf("%d%d%d%d", &amp;x, &amp;y, &amp;z, &amp;w); addedge(x, y, z, w); &#125; ek(s, t, rflow, cost); printf("%d %d", rflow, cost); return 0;&#125;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>网络流</tag>
        <tag>图论</tag>
        <tag>模板</tag>
        <tag>最大流</tag>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「POJ 3613」Cow Relays - Floyd + 矩阵快速幂]]></title>
    <url>%2F2018%2F05%2F02%2Fpoj-3613%2F</url>
    <content type="text"><![CDATA[题意 传送门：POJ 3613 - Cow Relays 求给定ttt条边的无向图中sss到ttt长度恰好为nnn的最短路的长度。 t≤100,n≤106,点的编号≤103t\le100,n\le10^6,\text{点的编号}\le10^3t≤100,n≤106,点的编号≤103 解法 首先离散化点的编号(显然图中最多只有200200200个点)。 然后考虑Floyd最短路的转移过程： 1234for k = 1 .. n for i = 1 ... n for j = 1 ... n g[i][j] = min(g[i][j], g[i][k] + g[k][j]) 再看看矩乘的过程： 1234for k = 1 .. n for i = 1 ... n for j = 1 ... n g[i][j] = add(g[i][j], g[i][k] * g[k][j]) 容易看出，Floyd只是将矩乘中的add换成了min，乘换成了加而已。 接着考虑一般的情况。 一般地，若GxG^xGx代表经过xxx条边的最短路，那么它满足关系式Ga+b=GaG^{a+b}=G^aGa+b=Ga乘GbG^bGb。 于是得出&quot;Floyd运算&quot;也满足结合律。于是可以用矩阵快速幂O(t^3\log n)​求出。 代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;bits/stdc++.h&gt;using namespace std;typedef int gph[502][502];int dcnt;void mul(gph x, gph y) &#123; // mul_equ: *= gph ret; memset(ret, 0x3f, 502 * 502 &lt;&lt; 2); for (int k = 1; k &lt;= dcnt; k++) &#123; for (int i = 1; i &lt;= dcnt; i++) &#123; for (int j = 1; j &lt;= dcnt; j++) &#123; ret[i][j] = min(ret[i][j], x[i][k] + y[k][j]); &#125; &#125; &#125; memcpy(x, ret, 502 * 502 &lt;&lt; 2);&#125;void pow(gph base, int exp, gph res) &#123; memcpy(res, base, 502 * 502 &lt;&lt; 2); exp--; // 弃单位矩阵的新科技 while (exp) &#123; if (exp&amp;1) mul(res, base); mul(base, base); exp &gt;&gt;= 1; &#125;&#125;int n, t, s, e, x, y, z;int disc[1000006];gph rec, ans;int main() &#123; memset(rec, 0x3f, sizeof rec); for (scanf("%d%d%d%d", &amp;n, &amp;t, &amp;s, &amp;e); t--; ) &#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); if (!disc[y]) disc[y] = ++dcnt; if (!disc[z]) disc[z] = ++dcnt; rec[disc[y]][disc[z]] = rec[disc[z]][disc[y]] = x; &#125; pow(rec, n, ans); printf("%d", ans[disc[s]][disc[e]]); return 0;&#125; 拓展 矩阵快速幂的基础是Ga+b=Ga×GbG^{a+b}=G^a\times G^bGa+b=Ga×Gb。然后在该式基础上进行倍增优化。 其实上式中的乘法可以换成其他运算(倍增加法求矩阵数乘)。如本题的&quot;Floyd运算&quot;。 在邻接矩阵上做运算，多有意思！ EASY版本： 「HDU 5318改」求无权无向图中长度为KKK的路径条数。其中n≤50,K≤109n\le50,K\le10^9n≤50,K≤109 做法是把邻接矩阵(01矩阵)快速幂一下求和除以二输出就好了。]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>Floyd</tag>
        <tag>POJ</tag>
        <tag>矩阵快速幂</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「POJ 1734」Sightseeing trip - Floyd求最小环]]></title>
    <url>%2F2018%2F05%2F02%2Fpoj-1734%2F</url>
    <content type="text"><![CDATA[题意 传送门：POJ 1734 - Sightseeing trip 求无向图长度最小的点数≥3\ge3≥3的环之一的路径。 解法 令lnki,jlnk_{i,j}lnki,j​为iii到jjj暂时的最短路的某一个中转点。没有中转点则为000。 那么iii到jjj暂时的最短路就是iii到lnki,jlnk_{i,j}lnki,j​和lnki,jlnk_{i,j}lnki,j​到jjj的最短路……以此类推。 那么在Floyd更新最短路时同时更新lnklnklnk数据就可以记录路径了。 然后在每次Floyd更新之前算出最小环和路径更新答案即可。 代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include &lt;bits/stdc++.h&gt;using namespace std;const int oo = 0x3f3f3f3f;int floyd[102][102];int gph[102][102];int lnk[102][102];int n, m, x, y, z;vector&lt;int&gt; loop;int ans = oo;void dfs(int x, int y) &#123; // [x, lnk[x][y]) -- lnk[x][y] -- (lnk[x][y], y] if (!lnk[x][y]) return; // 无中转点 dfs(x, lnk[x][y]); // 搜索中转点前半段 loop.push_back(lnk[x][y]); // 路径中加入中转点 dfs(lnk[x][y], y); // 搜索中转点后半段&#125;int main() &#123; scanf("%d%d", &amp;n, &amp;m); memset(gph, 0x3f, sizeof gph); while (m--) &#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); gph[x][y] = gph[y][x] = min(gph[x][y], z); &#125; memcpy(floyd, gph, sizeof floyd); for (int k = 1; k &lt;= n; k++) &#123; for (int i = 1; i &lt; k; i++) &#123; for (int j = i + 1; j &lt; k; j++) &#123; // 对称性, 只需搜索右上三角形部分 if (ans &gt; (long long)floyd[i][j] + gph[j][k] + gph[k][i]) &#123; ans = floyd[i][j] + gph[j][k] + gph[k][i]; // 注意右上三角 loop.clear(); // i -- [中转点] -- j -- k -- i... loop.push_back(i); dfs(i, j); loop.push_back(j); loop.push_back(k); &#125; &#125; &#125; for (int i = 1; i &lt;= n; i++) &#123; for (int j = 1; j &lt;= n; j++) &#123; if (floyd[i][j] &gt; floyd[i][k] + floyd[k][j]) &#123; floyd[i][j] = floyd[i][k] + floyd[k][j]; lnk[i][j] = k; &#125; &#125; &#125; &#125; if (ans == oo) &#123; puts("No solution."); return 0; &#125; for (int i = 0; i &lt; loop.size(); i++) &#123; printf("%d ", loop[i]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>Floyd</tag>
        <tag>最小环</tag>
        <tag>POJ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「BZOJ 2442」修剪草坪 - DP + 单调队列]]></title>
    <url>%2F2018%2F04%2F22%2Fbzoj-2442%2F</url>
    <content type="text"><![CDATA[题意 传送门：洛谷 P2627 - 修剪草坪，BZOJ2442 - 修剪草坪。 给一个长度为nnn的数组。现在让你选一些数，并且选的数中不能有在数组中长度超过kkk的连续段。求选出的数的和的最大值。 解法 令dpidp_idpi​为在[1,i][1,i][1,i]中选数的最大值。那么显然dpi=max⁡i−k≤j≤i{dpj−1+∑w=j+1iaw}dp_i=\max\limits_{i-k\le j\le i}\{dp_{j-1}+\sum\limits_{w=j+1}^ia_w\}dpi​=i−k≤j≤imax​{dpj−1​+w=j+1∑i​aw​}。 然后发现可以用前缀和优化。那么令sumi=∑j=1iajsum_i=\sum\limits_{j=1}^ia_jsumi​=j=1∑i​aj​，则dpi=max⁡i−k≤j≤i{dpj+sumi−sumj−1}dp_i=\max\limits_{i-k\le j\le i}\{dp_{j}+sum_i-sum_{j-1}\}dpi​=i−k≤j≤imax​{dpj​+sumi​−sumj−1​}，变形得dpi=max⁡i−k≤j≤i{dpj−1−sumj}+sumidp_i=\max\limits_{i-k\le j\le i}\{dp_{j-1}-sum_{j}\}+sum_idpi​=i−k≤j≤imax​{dpj−1​−sumj​}+sumi​。 于是发现这里的方程满足模型dpi=max⁡L(i)≤j≤R(i){dpj+val(i,j)}dp_i=\max\limits_{L(i)\le j\le R(i)}\{dp_j+val(i,j)\}dpi​=L(i)≤j≤R(i)max​{dpj​+val(i,j)}且val(i,j)val(i,j)val(i,j)中每一项只与iii或jjj有关，满足决策的单调性，所以开一个单调队列维护dpj−1−sumjdp_{j-1}-sum_jdpj−1​−sumj​在i−k≤j≤ii-k\le j\le ii−k≤j≤i时的最大值即可。 代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;int head, tail = 1;int que[100015];ll pre[100015];ll dp_[100015];ll dp[100015];int n, k;const int N = 1 &lt;&lt; 20;char buf[N], *ptr = buf;inline int read() &#123; // Powered by LK int k = 0; while (!isdigit(*ptr)) ptr++; while (isdigit(*ptr))&#123; k = k * 10 + (*ptr++ ^ 48); &#125; return k;&#125;inline void add(int x) &#123; dp_[x] = dp[x-1] - pre[x]; while (head &lt;= tail &amp;&amp; dp_[que[tail]] &lt; dp_[x]) tail--; que[++tail] = x;&#125;inline ll query(int x) &#123; while (head &lt;= tail &amp;&amp; que[head] &lt; x-k) head++; return dp_[que[head]];&#125;int main() &#123; fread(buf, 1, N, stdin); n = read(); k = read(); for (int i = 1; i &lt;= n; i++) &#123; pre[i] = read(); pre[i] += pre[i-1]; &#125; for (int i = 1; i &lt;= n; i++) &#123; add(i); dp[i] = pre[i] + query(i); &#125; printf("%lld", dp[n]);&#125; 拓展 满足模型dpi=max⁡L(i)≤j≤R(i){dpj+val(i,j)}dp_i=\max\limits_{L(i)\le j\le R(i)}\{dp_j+val(i,j)\}dpi​=L(i)≤j≤R(i)max​{dpj​+val(i,j)}且val(i,j)val(i,j)val(i,j)中每一项只与iii或jjj有关时，可以在用单调队列维护jjj，对于每一个[L(i),R(i)][L(i),R(i)][L(i),R(i)]维护最大(小)值。]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>单调队列</tag>
        <tag>BZOJ</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「题目汇总」Tarjan题目汇总]]></title>
    <url>%2F2018%2F04%2F16%2Ftarjan-problems%2F</url>
    <content type="text"><![CDATA[这里是一些Tarjan题目的汇总。 进度：ABCDEF。 A, Caocao’s Bridges, 桥 传送门：HDU4738，YaliOJ。 题意 曹操在长江上弄了一些点，点之间有桥。每座桥上有若干人守卫。现在刘备有一枚炸弹，问最少带多少人去炸桥可以使点之间不连通。如果不可能输出−1-1−1。 解法 边(u,v)(u,v)(u,v)(uuu在dfs树下为vvv的子节点)为桥的充要条件是lowv&gt;dfnulow_v&gt;dfn_ulowv​&gt;dfnu​，也就是uuu的子节点vvv无法到达uuu及其之上的点，那么如果切断(u,v)(u,v)(u,v)那么图将不会联通。 这道题的坑点如下： 如果已经不连通了输出0。 处理方式：记录dfs拓展出的节点数，如果发现不到nnn那么显然不连通，输出000即可。 (expand+1 == n) * ans 如果没人守卫还是要输出1。 处理方式：如果ansansans为000那么取ansansans和111的max就好了。 (expand+1 == n) * max(1, ans) 最后加上对ans=+∞ans=+\inftyans=+∞的特判：ans == 0x3f3f3f3f ? -1 : (expand+1 == n) * max(1, ans) 重边需要特殊处理。(因为dfs树的特殊性，只需考虑父节点——子节点的重边即可) 处理方式：如果父节点到子节点只连了一次边，那么不需要用父节点更新。否则把父节点当成子节点更新。 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include &lt;bits/stdc++.h&gt;using namespace std;struct edge &#123; int to, next, weight;&#125; e[2000006];int dfn[1003], low[1003], head[1003], idx, cnt, ans, expand;void addedge(int x, int y, int z) &#123; e[++cnt] = (edge)&#123;y, head[x], z&#125;; head[x] = cnt; e[++cnt] = (edge)&#123;x, head[y], z&#125;; head[y] = cnt;&#125;void dfs(int x, int par) &#123; dfn[x] = low[x] = ++idx; int f = 0; for (int i = head[x]; i; i = e[i].next) &#123; int nx = e[i].to; if (!dfn[nx]) &#123; dfs(nx, x); expand++; low[x] = min(low[x], low[nx]); if (low[nx] &gt; dfn[x]) &#123; ans = min(ans, e[i].weight); &#125; &#125; else if (nx == par) &#123; if (f) low[x] = min(low[x], dfn[nx]); f = 1; &#125; else low[x] = min(low[x], dfn[nx]); &#125;&#125;int n, m, x, y, z;int main() &#123; while (~scanf("%d%d", &amp;n, &amp;m) &amp;&amp; (n || m)) &#123; memset(head, 0, sizeof head); memset(dfn, 0, sizeof dfn); memset(low, 0, sizeof low); memset(e, 0, sizeof e); idx = cnt = expand = 0; ans = 0x3f3f3f3f; for (int i = 1; i &lt;= m; i++) &#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); addedge(x, y, z); &#125; dfs(1, -1); printf("%d\n", ans == 0x3f3f3f3f ? -1 : (expand+1 == n) * max(1, ans)); &#125;&#125; Y三集 B, Railway, 点双+桥 传送门：HDU4738，YaliOJ。 C, Network, 边双 传送门：HDU2460，YaliOJ。 D, TWO NODES, 割点 传送门：HDU4587，YaliOJ。 题意 给你一张图，问你删掉两个点最多能有多少个连通块。n,m≤5000n,m\le5000n,m≤5000。 解法 枚举其中一个删除的点，然后Tarjan求一遍割点。答案取max。 未完待续…… 代码 E, Warm up, 边双缩点 F, Important Sisters, 支配树]]></content>
      <categories>
        <category>题目汇总</category>
      </categories>
      <tags>
        <tag>Y</tag>
        <tag>图论</tag>
        <tag>Tarjan</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「BZOJ1997」Planar - 并查集]]></title>
    <url>%2F2018%2F04%2F15%2Fbzoj-1997%2F</url>
    <content type="text"><![CDATA[题意 传送门：BZOJ1997 - Planar和洛谷 P3209 - PLANAR 给一张图，判断是不是平面图。3≤n≤200,m≤1043\le n\le200,m\le10^43≤n≤200,m≤104。 WTF？HNOI考平面图？还是平面图判定？ 当然不是。数据保证图中有汉密尔顿回路。 LYH：一眼看过去就是个假的平面图2333。 解法 首先平面图满足m≤3n−6(n≥3)m\le3n-6(n\ge3)m≤3n−6(n≥3)，不满足的直接NO。 既然都有汉密尔顿回路了，那么其它的边要么连在环里面要么连在环外面。 然后平面图要边不相交，那么就可以像团伙那题一样，用i+mi+mi+m代表与iii相交的边的集合。 然后如果不相交就判断有没有矛盾，相交就直接continue掉(玄学)。 如果不相交没有矛盾就把jjj和i+mi+mi+m以及iii和j+mj+mj+m连边。 就这么简单，谁说要用什么2-sat？(反正都比一般平面图判定简单) 代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include &lt;bits/stdc++.h&gt;using namespace std;int u[10004], v[10004], id[10004];bool vis[10004];int par[10004];int t, _, n, m;bool cross(int x1, int x2, int y1, int y2) &#123; if (x1 == x2 || y1 == y2 || x1 == y2 || x2 == y1) &#123; return 0; &#125; return (x1 &lt; x2 &amp;&amp; y1 &lt; y2 &amp;&amp; x2 &lt; y1) || (x2 &lt; x1 &amp;&amp; y2 &lt; y1 &amp;&amp; x1 &lt; y2);&#125;int find(int x) &#123; return par[x] ? par[x] = find(par[x]) : x;&#125;void merge(int x, int y) &#123; if ((x = find(x)) != (y = find(y))) par[x] = y;&#125;int main() &#123; for (scanf("%d", &amp;t); t--; ) &#123; memset(par, 0, sizeof par); memset(u, 0, sizeof u); memset(v, 0, sizeof v); memset(id, 0, sizeof id); memset(vis, 0, sizeof vis); scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= m; i++) &#123; scanf("%d%d", u+i, v+i); &#125; for (int i = 1; i &lt;= n; i++) &#123; scanf("%d", &amp;_); id[_] = i; &#125; if (m &gt; 3 * n - 6) &#123; puts("NO"); continue; &#125; for (int i = 1; i &lt;= m; i++) &#123; int x = id[u[i]]; int y = id[v[i]]; u[i] = min(x, y); v[i] = max(x, y); &#125; for (int i = 1; i &lt;= m; i++) &#123; vis[i] = (u[i]%n+1 == v[i]); &#125; for (int i = 1; i &lt;= m; i++) &#123; if (vis[i]) continue; for (int j = 1; j &lt;= m; j++) &#123; if (vis[j]) continue; if (!cross(u[i], u[j], v[i], v[j])) continue; if (find(i) == find(j)) &#123; puts("NO"); goto end; &#125; merge(i, j + m); merge(j, i + m); &#125; &#125; puts("YES"); end:; &#125;&#125; 拓展 下面的玄学我一样都不会： Tarjan的论文Efficient Planarity Testing(一般的平面图判定) BM算法Boyer Myrvold算法(目前最先进的平面图判定算法)]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>BZOJ</tag>
        <tag>图论</tag>
        <tag>并查集</tag>
        <tag>HNOI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Codeforces 961E」Tufurama - 树状数组]]></title>
    <url>%2F2018%2F04%2F06%2Fcodeforces-961e%2F</url>
    <content type="text"><![CDATA[题意 传送门：Codeforces 961E - Tufurama 有部电视剧有n(n≤2⋅105)n(n\le2\cdot10^5)n(n≤2⋅105)季，第iii季有aia_iai​集。问有多少个数对(x,y)(x&lt;y)(x,y)(x&lt;y)(x,y)(x&lt;y)，满足xxx季yyy集和yyy季xxx集都在电视剧中存在。 解法 为了简化问题，将数对的限制改为x≤yx\le yx≤y。 显然如果有一季集数超过了nnn，那么多余部分可以直接cut掉。 根据nnn的范围分析，时间复杂度肯定是O(n)O(n)O(n)枚举乘上O(1)/O(log⁡n)O(1)/O(\log n)O(1)/O(logn)处理。 而且第iii行处理完后所有集数少于iii的都可以删掉了(第iii行之后i&lt;x≤yi&lt;x\le yi&lt;x≤y)。 既然树状数组是沟通原数组和前缀和的桥梁，那么就可以打一个树状数组，代表是否被删除了。统计第iii行的答案只需将答案加上未被删除的季数即可食用。 哦，别忘了÷2\div2÷2并且处理掉所有x=yx=yx=y的情况！ 代码 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;bits/stdc++.h&gt;using namespace std;int n, rec[200005], tree[200005];vector&lt;int&gt; lst[200005];long long ans;inline lowbit(int x) &#123; return x&amp;-x;&#125;void add(int i, int x) &#123; while (i &lt;= n) &#123; tree[i] += x; i += lowbit(i); &#125;&#125;int query(int x) &#123; int ret = 0; while (x) &#123; ret += tree[x]; x -= lowbit(x); &#125; return ret;&#125;int main() &#123; scanf("%d", &amp;n); for (int i = 1; i &lt;= n; i++) &#123; scanf("%d", rec+i); if (rec[i] &lt;= n) lst[rec[i]].push_back(i); add(i, 1); &#125; for (int i = 1; i &lt;= n; i++) &#123; ans += query(min(rec[i], n)) - (i &lt;= rec[i]); for (int j = 0; j &lt; lst[i].size(); j++) &#123; add(lst[i][j], -1); &#125; &#125; printf("%I64d", ans &gt;&gt; 1); return 0;&#125; 拓展 0/10/10/1树状数组可以很好的维护元素是否被删除的状态数组。 一些不便于维护和处理的限制条件，可以转化成便于维护的限制，再把多余的情况去除。]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Codeforces 961D」Pair Of Lines - 数学 + 几何]]></title>
    <url>%2F2018%2F04%2F06%2Fcodeforces-961d%2F</url>
    <content type="text"><![CDATA[题意 传送门：Codeforces 961D - Pair Of Lines 给你n(n≤105)n(n\le10^5)n(n≤105)个点，问你能不能用两条直线全部覆盖。 解法 首先，如果n≤3n\le3n≤3那么答案肯定是YES。 如果n&gt;3n&gt;3n&gt;3，那么考虑前333个点。 前三个点连成的所有直线(不考虑是否共线)至少有一条是两条中的一条。那么枚举每条直线，把所有直线上的点删掉，判断剩下的是不是在一条直线上即可。 代码 12345678910111213141516171819202122232425262728293031323334353637#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;ll x[100005], y[100005];bool vis[100005];int n;bool check(int u, int v) &#123; memset(vis, 0, sizeof vis); int fst = 0, snd = 0, cnt = 0; for (int i = 1; i &lt;= n; i++) &#123; vis[i] = ((x[u] - x[v]) * (y[u] - y[i]) == (y[u] - y[v]) * (x[u] - x[i])); if (fst &amp;&amp; !snd &amp;&amp; !vis[i]) snd = i; if (!fst &amp;&amp; !vis[i]) fst = i; cnt += !vis[i]; &#125; if (cnt &lt; 3) return 1; for (int i = 1; i &lt;= n; i++) &#123; if (!vis[i] &amp;&amp; ((x[fst] - x[snd]) * (y[fst] - y[i]) != (y[fst] - y[snd]) * (x[fst] - x[i]))) &#123; return 0; &#125; &#125; return 1;&#125;int main() &#123; scanf("%d", &amp;n); for (int i = 1; i &lt;= n; i++) &#123; scanf("%I64d%I64d", x+i, y+i); &#125; if (n &lt;= 3) puts("YES"); else puts((check(1, 2) || check(1, 3) || check(2, 3)) ? "YES" : "NO"); return 0; &#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
        <tag>数学</tag>
        <tag>几何</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「JSOI2009」计数问题 - 树状数组]]></title>
    <url>%2F2018%2F04%2F05%2Fjsoi2009-count%2F</url>
    <content type="text"><![CDATA[题意 传送门：BZOJ1452 - Count和洛谷 P4054 - 计数问题 一个N×MN\times MN×M的方格，初始时每个格子有一个整数权值，接下来每次有222个操作: 改变一个格子的权值 求一个子矩阵中某个特定权值出现的个数 解法 开一个_树状数组数组数组_，即_&quot;二维树状数组&quot;数组_，第kkk个树状数组存权值kkk的出现次数。然后treei,j,ktree_{i,j,k}treei,j,k​就是权值在kkk右下角为(i,j)(i,j)(i,j)长lowbit(i)lowbit(i)lowbit(i)宽lowbit(j)lowbit(j)lowbit(j)子矩阵中的出现次数。 然后只需要写一个支持单点修改、区间查询的树状数组即可。 代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include &lt;bits/stdc++.h&gt;using namespace std; int rec[302][302][102], src[302][302];int n, m; inline int lowbit(int x) &#123; return x&amp;-x;&#125; void add(int x, int y, int z, int w) &#123; while (x &lt;= n) &#123; int y_ = y; while (y_ &lt;= m) &#123; rec[x][y_][z] += w; y_ += lowbit(y_); &#125; x += lowbit(x); &#125;&#125; int query(int x, int y, int z) &#123; int ret = 0; while (x) &#123; int y_ = y; while (y_) &#123; ret += rec[x][y_][z]; y_ -= lowbit(y_); &#125; x -= lowbit(x); &#125; return ret;&#125; int op, c, q, X1, Y1, X2, Y2; int main() &#123; scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i++) &#123; for (int j = 1; j &lt;= m; j++) &#123; scanf("%d", src[i] + j); add(i, j, src[i][j], 1); &#125; &#125; scanf("%d", &amp;q); for (int i = 1; i &lt;= q; i++) &#123; scanf("%d", &amp;op); if (op == 1) &#123; scanf("%d%d%d", &amp;X1, &amp;Y1, &amp;c); add(X1, Y1, src[X1][Y1], -1); add(X1, Y1, src[X1][Y1] = c, 1); &#125; else &#123; scanf("%d%d%d%d%d", &amp;X1, &amp;X2, &amp;Y1, &amp;Y2, &amp;c); printf("%d\n", query(X2, Y2, c) - query(X1 - 1, Y2, c) - query(X2, Y1 - 1, c) + query(X1 - 1, Y1 - 1, c)); &#125; &#125; return 0;&#125; 拓展 在权值的取值范围较小时可以开_树状数组数组数组_解决。 对于单点set操作，可以处理为不同树状数组中的单点修改操作，也可以处理成相同树状数组一次单点加和一次单点减。 区间set就交给lazy tag吧。]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>BZOJ</tag>
        <tag>树状数组</tag>
        <tag>JSOI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「赛后总结」Codeforces Round #472 (Div. 2) (+2)]]></title>
    <url>%2F2018%2F04%2F01%2Fcodeforces-round-472%2F</url>
    <content type="text"><![CDATA[传送门：Codeforces Round #472 (Div. 2) 这次本来可以做D，可惜只做出A和B。 可惜C我想到了思路但没去做😢。 UPD： 2018-03-26 19:25:24：Initial Commit 2018-04-01 00:09:39：Add C A 题意 现在有ABM三种颜色，?是空白。现在问你是否有多余一种方式填满所有的?，并且相邻两个颜色不相同。 解法 很明显，如果?两边的颜色不同，那么这个肯定只有一种填法。 如果?在开头结尾，或者有几个连在一起，那么肯定有至少一种填法。 于是这就很简单了。只是细节很多。 12345678910111213141516171819202122232425262728293031323334#include &lt;bits/stdc++.h&gt;using namespace std;char last, bcount;string s;int n, f;int main() &#123; cin &gt;&gt; n &gt;&gt; s; for (int i = 0; i &lt; n; i++) &#123; if (s[i] == last &amp;&amp; s[i] != '?') &#123; puts("No"); return 0; &#125; bcount += (s[i] == '?'); last = s[i]; &#125; if (!bcount) &#123; puts("No"); return 0; &#125; for (int i = 0; i &lt; n; i++) &#123; if (s[i] == '?') &#123; if (i == 0 || i == n - 1) f = 1; else if (s[i - 1] == '?' || s[i + 1] == '?') f = 1; else if (s[i - 1] == s[i + 1]) f = 1; &#125; if (f == 1) &#123; puts("Yes"); return 0; &#125; &#125; puts("No");&#125; B 题意 有nnn次操作，每一次可以选择一些行和列，然后把它们的交点全部染成黑色。 现在问你，给你一个黑白局面，问你能不能从白棋盘用nnn次得到它，并且满足所有操作中的行和列全部不重复。 解法 如图， 显然如果紫色点有任意三个被选了，那么另外一个肯定会也是黑的。 对于所有两两的行和列，如果这样的紫色点有111个、222个或者444个，那么一定是Yes，否则是NoNoNo。 代码 1234567891011121314151617181920212223242526272829303132#include &lt;bits/stdc++.h&gt;using namespace std;char rec[233][233];int n, m;int main() &#123; scanf("%d%d\n", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i++) &#123; gets(rec[i] + 1); &#125; for (int i = 1; i &lt;= n; i++) &#123; for (int j = 1; j &lt;= n; j++) &#123; if (i != j) for (int p = 1; p &lt;= m; p++) &#123; for (int q = 1; q &lt;= m; q++) &#123; if (p == q) continue; int count = 0; if (rec[i][p] == '#') count++; if (rec[i][q] == '#') count++; if (rec[j][p] == '#') count++; if (rec[j][q] == '#') count++; if (count == 3) &#123; puts("No"); return 0; &#125; &#125; &#125; &#125; &#125; puts("Yes"); return 0;&#125; C 题意 一串单调递增序列EEE，要你选333个不相同的下标(i,j,k),(i≤j≤k)(i,j,k),(i\le j\le k)(i,j,k),(i≤j≤k)，满足Ek−Ei≤UE_k-E_i \le UEk​−Ei​≤U，并且满足Ek−EjEk−Ei\frac{E_k-E_j}{E_k-E_i}Ek​−Ei​Ek​−Ej​​是所有满足条件的三元组中最小的。求出这个Ek−EjEk−Ei\frac{E_k-E_j}{E_k-E_i}Ek​−Ei​Ek​−Ej​​。 解法 固定iii。那么jjj很明显应该等于i+1i+1i+1。那么kkk肯定是满足单调性的。那么只需要找出Ek≤Ei+UE_k\le E_i+UEk​≤Ei​+U的最大的kkk。所以可以二分。时间复杂度O(nlog⁡n)O(n\log n)O(nlogn)。 其实还有个更好的办法——two-pointer。枚举iii，然后将i−1i-1i−1时的kkk用一次循环递增到当前iii时最大的kkk，然后再更新最终的答案。最终kkk移动的次数是O(n)O(n)O(n)量级的，所以复杂度降到了O(n)O(n)O(n)。 代码 12345678910111213141516171819202122232425#include &lt;bits/stdc++.h&gt;using namespace std;int n, u, k, rec[100005];int ai, aj, ak;double loss;int main() &#123; scanf("%d%d", &amp;n, &amp;u); for (int i = 1; i &lt;= n; i++) &#123; scanf("%d", rec + i); &#125; loss = -1; for (int i = 1; i &lt; n - 1; i++) &#123; int j = i + 1; k = max(k, i); while (k + 1 &lt;= n &amp;&amp; rec[k + 1] - rec[i] &lt;= u) k++; if (k &lt;= i + 1) continue; double tl = 1. * (rec[k] - rec[j]) / (rec[k] - rec[i]); loss = max(loss, tl); &#125; if (loss == -1) puts("-1"); else printf("%.12lf", loss); return 0;&#125; D 题意 有条河，第i(1≤i≤n)i(1\le i\le n)i(1≤i≤n)天水的高度是undefinediundefined_iundefinedi​。如果某个undefinediundefined_iundefinedi​在以前没有出现过，那么就在那里打上标记。水不会冲掉标记。现在已知每一天河水以上(不包括当前标记)的标记数，求河水下(也不包括当前标记)最少有多少个标记。 解法 首先考虑这个思路： 弄一个变量mmm，如果每出现一个数字大于mmm，那么就m++(因为每多一个标记那么这时河水的位置一定在那时所有标记之前，并且还会增加一个标记)。 如果小于等于mmm，那么直接ans += m - 高度。 这个思路的问题是这样的数据就可以hack掉这个思路： 1240 0 0 2 解决方案是把这种数据处理成这样： 1240 0 1 2 再比如这个数据： 12110 0 0 0 0 0 0 2 4 6 8 和这个就是等价的： 12110 0 0 1 2 3 4 5 6 7 8 做法是先前缀最大值一遍，然后在再数据变得&quot;平滑&quot;。也就是把所有前缀最大值中相邻两项差不小于222的全部&quot;整平&quot;。 &quot;整平&quot;代码如下： 123456789101112131415// 输入for (int i = 1; i &lt;= n; i++) &#123; scanf("%d", rec + i);&#125;// "整平"for (int i = 1; i &lt;= n; i++) &#123; smax[i] = max(smax[i - 1], rec[i]);&#125;for (int i = n; i &gt;= 1; i--) &#123; mrec[i] = t = max(smax[i], t - 1);&#125;for (int i = 1; i &lt; n; i++) &#123; mrec[i] = mrec[i + 1] - mrec[i];&#125; 其中mrec代表修改过的数组，smax代表前缀最大值。 代码 1234567891011121314151617181920212223242526272829#include &lt;bits/stdc++.h&gt;using namespace std;int n, m, rec[100005];int mrec[100005];int smax[100005];long long ans;int t;int main() &#123; scanf("%d", &amp;n); for (int i = 1; i &lt;= n; i++) &#123; scanf("%d", rec + i); &#125; for (int i = 1; i &lt;= n; i++) &#123; smax[i] = max(smax[i - 1], rec[i]); &#125; for (int i = n; i &gt;= 1; i--) &#123; mrec[i] = t = max(smax[i], t - 1); &#125; for (int i = 1; i &lt; n; i++) &#123; mrec[i] = mrec[i + 1] - mrec[i]; &#125; for (int i = 1; i &lt;= n; i++) &#123; ans += m - rec[i]; m += mrec[i]; &#125; printf("%lld", ans);&#125;]]></content>
      <categories>
        <category>赛后总结</category>
      </categories>
      <tags>
        <tag>模拟</tag>
        <tag>枚举/暴力</tag>
        <tag>Codeforces</tag>
        <tag>two-pointer</tag>
        <tag>前缀</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「算法」Manacher]]></title>
    <url>%2F2018%2F03%2F24%2Fmanacher-notes%2F</url>
    <content type="text"><![CDATA[简介 Manacher是一种可以用来在O(n)O(n)O(n)时间求出字符串的最长回文子串(和附赠的一个数组)的算法。 比较 暴力一：枚举所有字串，判断最长回文。复杂度O(n3)O(n^3)O(n3)，预处理回文O(n2)O(n^2)O(n2)。 暴力二：枚举所有中心(奇偶特判)，找出最长回文。复杂度还是O(n2)O(n^2)O(n2)。 哈希：貌似可以做到O(nlog⁡n)O(n\log n)O(nlogn) Manacher：可以把复杂度降到O(n)O(n)O(n)。 流程 为了防止奇偶特判，这里有一个小trick：在每一个间隙插入|字符，然后在字符串开头加一个$字符(可以换成任何字符串没有的字符，并且|和$可以相等)。 如lrzzqa就变成了$|l|r|z|z|q|a|了。 弄一个数组int p[N]，代表以某个数为中心时的最长回文的??长度。 现在假设我们已经计算到了下面这里，那么?要填什么值呢？ 12 $|a|b|c|b|c|d|c|d|a|p .1312151? 根据回文的对称性，回文中心左边的和右边的正好是镜像关系。于是?直接填左边的b对应的222就好了。 那么这种情况呢？ 12 $|x|a|b|a|b|p .1111131? 显然应该填333，但是根据对称性，?处应该填111。出现这种情况是因为回文已经突破|a|b|a|的边界了。所以这种情况就需要重新计算回文，然后记录下当前回文的中心和右端点，继续通过对称性填p数组了。 综上所述，可以写出以下流程： 首先对字符串进行处理。 iii从111循环到n−1n-1n−1(不考虑$字符) 如果iii在回文右端点之前，那么p[i]就等于他对称点的p值和从iii到对称点距离的最小值，及 pi=min⁡(p2mid−i,pmid+mid−i)p_i=\min(p_{2mid-i},p_{mid}+mid-i)pi​=min(p2mid−i​,pmid​+mid−i)。重中之重！ 否则pi=1p_i=1pi​=1。 接下来拓展回文。同朴素算法。 如果拓展之后回文超出边界，那么更新回文中心mid和右端点。 如果要求最长回文子串的长度，那么ans=min⁡(ans,pi)ans=\min(ans,p_i)ans=min(ans,pi​)。 证明略 代码 该代码用于AcceptedP3805 - 【模板】manacher算法。 12345678910111213141516171819202122232425262728293031323334353637#include &lt;bits/stdc++.h&gt;using namespace std;char tmp[11000007], str[22000007];int p[22000007];int n;int manacher() &#123; int rb = 0, mid, ans = 0; for (int i = 1; i &lt; n; i++) &#123; if (i &lt; rb) p[i] = min(p[2 * mid - i], p[mid] + mid - i); else p[i] = 1; while (str[i + p[i]] == str[i - p[i]]) p[i]++; if (p[i] + i &gt; rb) &#123; rb = p[i] + i; mid = i; &#125; ans = max(ans, p[i]); &#125; return ans;&#125;void init() &#123; gets(tmp); n = strlen(tmp); str[0] = '$'; str[1] = '|'; for (int i = 0; i &lt; n; i++) &#123; str[2 * i + 2] = tmp[i]; str[2 * i + 3] = '|'; &#125; n = strlen(str);&#125;int main() &#123; init(); printf("%d", manacher() - 1);&#125;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>模板</tag>
        <tag>Manacher</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「算法」Tarjan强连通分量]]></title>
    <url>%2F2018%2F03%2F19%2Ftarjan-scc-notes%2F</url>
    <content type="text"><![CDATA[简介 其实杜教在ZROI的时候就讲过了，然后因为某些原因现在才来弄…… 强连通分量，指一张有向图的某个极大子图，满足两两点互相连通。 UPD： 2018-03-04 21:59:42：Initial Commit 2018-03-19 13:11:33：Add缩点 概念 如下面这张图： 从111点对它进行DFS，可以得到以下的DFS树： 实线边是树边 红边是横叉边 短虚线是返祖边 长虚线是前向边 当然，这些都只是为了交流方便。 现在定义dfn[i]和low[i]。 dfn[i]代表第iii个点的DFS序，low[i]代表第iii个点及其子树上的某个点通过一条横叉边或返祖边能到达的DFS序最小的点的DFS序。 流程 DFS过程中所有经过的点按照DFS序入栈。栈中所有点都没有形成强连通分量。 如果发现一个点dfn[u]=low[u]dfn[u]=low[u]dfn[u]=low[u]，也就是说这个点uuu再也不能沿着任何边往上走，那么显然这时栈中从栈顶一直到u的所有元素(子树中的元素)组成一个强连通分量，且它是极大的。 现在假设DFS从一个点uuu，沿着某条边搜到了某个点vvv，那么会有以下情况： uuu沿着树边到了vvv：先dfs(v)求出low[v]再low[u]=min⁡(low[u],low[v])low[u]=\min(low[u],low[v])low[u]=min(low[u],low[v])。 uuu沿着返祖边或横叉边到了vvv：如果边在栈中，那么low[u]=min⁡(low[u],dfn[v])low[u]=\min(low[u],dfn[v])low[u]=min(low[u],dfn[v])。 没有了？没有了。 学强连通分量：先背代码，再理解。 233333。 代码 该代码用于Accepted洛谷 P1726 - 上白泽慧音。 题意就是求排序后字典序最小的最大强连通分量。 显然只要比较最小的点即可。因为不可能一个点在两个不同的强连通分量中。 我是白泽慧音，我已经报警了！ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include &lt;bits/stdc++.h&gt;using namespace std;const int N = 5003, M = 100005;struct Edge &#123; int to, next;&#125; e[M];int head[N];int dfn[N], low[N], vis[N], tmp[N], ans[N], ign[N];int dfn_index, scc_count, ans_len, edge_count;stack&lt;int&gt; st;int n, m;void tarjan(int cur) &#123; dfn[cur] = low[cur] = ++dfn_index; vis[cur] = 1; st.push(cur); for (int i = head[cur]; i; i = e[i].next) &#123; int nxt = e[i].to; if (!dfn[nxt]) &#123; tarjan(nxt); low[cur] = min(low[cur], low[nxt]); &#125; else if (vis[nxt] &amp;&amp; dfn[nxt] &lt; low[cur]) &#123; low[cur] = min(low[cur], dfn[nxt]); &#125; &#125; if (low[cur] == dfn[cur]) &#123; memset(tmp, 0, sizeof(tmp)); scc_count++; int _ = 0; while (!st.empty()) &#123; int x = st.top(); st.pop(); tmp[++_] = x; vis[x] = 0; ign[x] = 1; if (x == cur) break; &#125; sort(tmp + 1, tmp + _ + 1); if (_ &gt; ans_len || (_ == ans_len &amp;&amp; tmp[1] &lt; ans[1])) &#123; ans_len = _; memcpy(ans, tmp, sizeof ans); &#125; &#125;&#125;void addEdge(int u, int v, int _) &#123; e[++edge_count] = (Edge)&#123;v, head[u]&#125;; head[u] = edge_count; if (_ == 2) &#123; e[++edge_count] = (Edge)&#123;u, head[v]&#125;; head[v] = edge_count; &#125;&#125;int u, v, w;int main() &#123; scanf("%d%d", &amp;n, &amp;m); while (m--) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;w); addEdge(u, v, w); &#125; for (int i = 1; i &lt;= n; i++) &#123; if (!ign[i]) &#123; tarjan(i); &#125; &#125; printf("%d\n", ans_len); for (int i = 1; i &lt;= ans_len; i++) &#123; printf("%d ", ans[i]); &#125; // while (1);&#125; 缩点 缩点，就是把每个强连通分量缩成一个点。 缩点很简单：只需要枚举原图所有的边，再把这些边变成强连通分量之间的边。 该代码用于Accepted洛谷 P3387 - 【模板】缩点。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include &lt;bits/stdc++.h&gt;using namespace std;const int N = 10004, M = 100005;struct edge &#123; int to, next;&#125; e[M];int head[N &lt;&lt; 1], wgt[N], vis[N], dfn[N], low[N], scc[N], dp[N], nwgt[N];int edge_cnt, dfn_index, scc_count;stack&lt;int&gt; st;void tarjan(int x) &#123; dfn[x] = low[x] = ++dfn_index; vis[x] = 1; st.push(x); for (int i = head[x]; i; i = e[i].next) &#123; int nx = e[i].to; if (!dfn[nx]) &#123; tarjan(nx); low[x] = min(low[x], low[nx]); &#125; else if (vis[nx] &amp;&amp; dfn[nx] &lt; low[x]) &#123; low[x] = min(low[x], dfn[nx]); &#125; &#125; if (dfn[x] == low[x]) &#123; scc_count++; while (!st.empty()) &#123; int _ = st.top(); st.pop(); scc[_] = scc_count; vis[_] = 0; nwgt[scc_count] += wgt[_]; if (_ == x) break; &#125; &#125;&#125;void addEdge(int x, int y) &#123; e[++edge_cnt] = (edge)&#123;y, head[x]&#125;; head[x] = edge_cnt;&#125;void dfs(int x) &#123; if (dp[x]) return; dp[x] = nwgt[x]; int ret = 0; for (int i = head[x]; i; i = e[i].next)&#123; if (!dp[e[i].to]) dfs(e[i].to); ret = max(ret, dp[e[i].to]); &#125; dp[x] += ret;&#125;int n, m, u[M], v[M], ans;int main() &#123; scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i++) &#123; scanf("%d", wgt + i); &#125; for (int i = 1; i &lt;= m; i++) &#123; scanf("%d%d", u+i, v+i); addEdge(u[i], v[i]); &#125; for (int i = 1; i &lt;= n; i++) &#123; if (!dfn[i]) &#123; tarjan(i); &#125; &#125; memset(head, 0, sizeof head); memset(e, 0, sizeof e); edge_cnt = 0; for (int i = 1; i &lt;= m; i++) &#123; if (scc[u[i]] == scc[v[i]]) continue; addEdge(scc[u[i]], scc[v[i]]); &#125; for (int i = 1; i &lt;= scc_count; i++) &#123; if (!dp[i]) &#123; dfs(i); ans = max(ans, dp[i]); &#125; &#125; printf("%d", ans); return 0;&#125; 拓展 缩点以及一些神奇的缩点DP。 其实求强连通分量有很多别的算法，只是Tarjan知名度较高而已&gt;_&lt;，然后点双边双啥的可以和强连通归在一类，也好处理一些。 Kosaraju算法。复杂度和Tarjan一样，而且貌似好写一些，但是常数好像大一些(反正我们也能背下Tarjan的代码2333)，所以貌似没什么用。]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>模板</tag>
        <tag>Tarjan</tag>
        <tag>强连通分量</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「算法」高斯消元]]></title>
    <url>%2F2018%2F03%2F08%2Fgaussian-elimination-notes%2F</url>
    <content type="text"><![CDATA[简介 高斯消元，是一种一般用来解线性方程组的算法。 不就是个加减消元要说的这么先进么 流程 2018-04-05 18:40:51：准确的说，这是高斯-约旦消元法，高斯消元法是转化为简化梯形矩阵后回代的那种消元法。 比如下面这个线性方程组： {−x+y−2z=34x−3y+6z=2x−6y−3z=−1\left\{ \begin{array}l -x+y-2z=3\\ 4x-3y+6z=2\\ x-6y-3z=-1 \end{array} \right. ⎩⎨⎧​−x+y−2z=34x−3y+6z=2x−6y−3z=−1​ 它可以被转化为这样一个矩阵： (−11−234−3621−6−3−1)\left( \begin{array}c -1&amp;1&amp;-2&amp;3\\ 4&amp;-3&amp;6&amp;2\\ 1&amp;-6&amp;-3&amp;-1 \end{array} \right) ⎝⎛​−141​1−3−6​−26−3​32−1​⎠⎞​ 显然，我们希望它变成这样： (100a010b001c)\left( \begin{array}c 1&amp;0&amp;0&amp;a\\ 0&amp;1&amp;0&amp;b\\ 0&amp;0&amp;1&amp;c \end{array} \right) ⎝⎛​100​010​001​abc​⎠⎞​ 也就是这样的方程组： {x=ay=bz=c\left\{ \begin{array}l x=a\\ y=b\\ z=c \end{array} \right. ⎩⎨⎧​x=ay=bz=c​ 那么可以考虑从xxx开始，一元一元地消元。 首先把第111行和xxx系数绝对值最大的行进行交换，以便减小误差： (4−362−11−231−6−3−1)\left( \begin{array}c 4&amp;-3&amp;6&amp;2\\ -1&amp;1&amp;-2&amp;3\\ 1&amp;-6&amp;-3&amp;-1 \end{array} \right) ⎝⎛​4−11​−31−6​6−2−3​23−1​⎠⎞​ 然后把第111行全部÷4\div4÷4： (1−343212−11−231−6−3−1)\left( \begin{array}c 1&amp;-\frac34&amp;\frac32&amp;\frac12\\ -1&amp;1&amp;-2&amp;3\\ 1&amp;-6&amp;-3&amp;-1 \end{array} \right) ⎝⎛​1−11​−43​1−6​23​−2−3​21​3−1​⎠⎞​ 接下来加减消元把222、333行的xxx系数变为000： (1−342312014−12720−214−92−32)\left( \begin{array}c 1&amp;-\frac34&amp;\frac23&amp;\frac12\\ 0&amp;\frac14&amp;-\frac12&amp;\frac72\\ 0&amp;-\frac{21}4&amp;-\frac92&amp;-\frac32 \end{array} \right) ⎝⎛​100​−43​41​−421​​32​−21​−29​​21​27​−23​​⎠⎞​ 然后再把yyy的系数绝对值最大的与第222行交换： (1−3423120−214−92−32014−1272)\left( \begin{array}c 1&amp;-\frac34&amp;\frac23&amp;\frac12\\ 0&amp;-\frac{21}4&amp;-\frac92&amp;-\frac32\\ 0&amp;\frac14&amp;-\frac12&amp;\frac72 \end{array} \right) ⎝⎛​100​−43​−421​41​​32​−29​−21​​21​−23​27​​⎠⎞​ 依此类推，消掉yyy： (10157570167−2700−57247)\left( \begin{array}c 1&amp;0&amp;\frac{15}7&amp;\frac57\\ 0&amp;1&amp;\frac67&amp;-\frac27\\ 0&amp;0&amp;-\frac57&amp;\frac{24}7 \end{array} \right) ⎝⎛​100​010​715​76​−75​​75​−72​724​​⎠⎞​ 最后消掉zzz，流程结束： (10011010225001−245)\left( \begin{array}c 1&amp;0&amp;0&amp;11\\ 0&amp;1&amp;0&amp;\frac{22}5\\ 0&amp;0&amp;1&amp;-\frac{24}5 \end{array} \right) ⎝⎛​100​010​001​11522​−524​​⎠⎞​ 代码 该代码用于Accepted洛谷 P3389 - 【模板】高斯消元法。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include &lt;bits/stdc++.h&gt;using namespace std;const double EPS = 1e-8;const int N = 102;double mat[N][N];int n;void gauss() &#123; for (int i = 1; i &lt;= n; i++) &#123; int piv = i; for (int j = i; j &lt;= n; j++) &#123; if (fabs(mat[j][i]) &gt; fabs(mat[piv][i])) &#123; piv = j; &#125; &#125; if (piv != i) for (int j = 1; j &lt;= n + 1; j++) &#123; swap(mat[i][j], mat[piv][j]); &#125; if (fabs(mat[i][i]) &lt;= EPS) &#123; puts("No Solution"); exit(0); &#125; for (int j = i + 1; j &lt;= n + 1; j++) &#123; mat[i][j] /= mat[i][i]; &#125; for (int j = 1; j &lt;= n; j++) &#123; if (i != j) &#123; for (int k = i + 1; k &lt;= n + 1; k++) &#123; mat[j][k] -= mat[j][i] * mat[i][k]; &#125; &#125; &#125; for (int u = 1; u &lt;= n; u++) &#123; for (int v = 1; v &lt;= n+1; v++) &#123; printf("%.6lf ", mat[u][v]); &#125; puts(""); &#125; puts(""); &#125;&#125;int main() &#123; scanf("%d", &amp;n); for (int i = 1; i &lt;= n; i++) &#123; for (int j = 1; j &lt;= n + 1; j++) &#123; scanf("%lf", mat[i] + j); &#125; &#125; gauss(); for (int i = 1; i &lt;= n; i++) &#123; printf("%.2lf\n", mat[i][n + 1]); &#125; return 0;&#125; 拓展 异或方程组。好像连乘除都省了，只要异或？各种千奇百怪的开灯问题什么就应该好弄多了。 怨念的BZOJ1013……]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>高斯消元</tag>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「算法」Tarjan割点]]></title>
    <url>%2F2018%2F03%2F06%2Ftarjan-cut-notes%2F</url>
    <content type="text"><![CDATA[简介 如果在一张无向图上删除它和它的所有边使图的连通性改变，那么这个点就这张无向图的割点。 概念 强烈建议看割点之前先右转看看强连通分量 和强连通分量不同，割点只会在无向图中出现。因为DFS树的特性，这棵树上只会有两种边：树边和反向边。 如下面这张图： 从111点对它进行DFS，可以得到以下的DFS树(这个例子貌似有点极端)： 还是一样，定义dfn[i]和low[i]。 dfn[i]代表第iii个点的DFS序，low[i]代表第iii个点及其子树上的某个点通过一条横叉边或返祖边能到达的DFS序最小的点的DFS序。 显然无向图的DFS树中不可能存在所谓的横叉边，因为如果存在的话那么这条边也会变成树边。 流程 现在假设DFS从一个点uuu，沿着某条边搜到了某个点vvv，那么会有以下情况： uuu沿着树边到了vvv：先dfs(v)求出low[v]再low[u]=min⁡(low[u],low[v])low[u]=\min(low[u],low[v])low[u]=min(low[u],low[v])。 uuu沿着反向边到了vvv：low[u]=min⁡(low[u],dfn[v])low[u]=\min(low[u],dfn[v])low[u]=min(low[u],dfn[v])。 既然每棵子树已经完全独立了，那么一个点uuu是不是割点就很好定义了： 如果uuu是根并且有至少两个儿子，那么断掉根各个子树就会分成几个不同的连通块，所以这个点是割点。 如果uuu不是根且搜到的点vvv满足low[v]≥dfn[u]low[v]\ge dfn[u]low[v]≥dfn[u]，那么断掉uuu后vvv就无法到达low[i]，所以这个点是割点。 结束了？结束了。 代码 该代码用于Accepted洛谷 P3388 - 【模板】割点（割顶）。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include &lt;bits/stdc++.h&gt;using namespace std;const int N = 100005, M = 200005;struct Edge &#123; int to, next;&#125; e[M];int head[N];int cut_count, edge_count, dfn_index;int n, m, dfn[N], low[N], par[N];bool cut[N];void tarjan(int cur) &#123; dfn[cur] = low[cur] = ++dfn_index; int cnt = 0; for (int i = head[cur]; i; i = e[i].next) &#123; int nxt = e[i].to; if (nxt == par[cur]) continue; if (!dfn[nxt]) &#123; cnt++; par[nxt] = cur; tarjan(nxt); low[cur] = min(low[cur], low[nxt]); if (par[cur] &amp;&amp; low[nxt] &gt;= dfn[cur]) &#123; cut_count += !cut[cur]; cut[cur] = 1; &#125; &#125; else &#123; low[cur] = min(low[cur], dfn[nxt]); &#125; &#125; if (!par[cur] &amp;&amp; cnt &gt;= 2) &#123; cut_count += !cut[cur]; cut[cur] = 1; &#125; &#125;void addEdge(int u, int v) &#123; e[++edge_count] = (Edge)&#123;v, head[u]&#125;; head[u] = edge_count;&#125;int u, v;int main() &#123; scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= m; i++) &#123; scanf("%d%d", &amp;u, &amp;v); addEdge(u, v); addEdge(v, u); &#125; for (int i = 1; i &lt;= n; i++) &#123; if (!dfn[i]) &#123; tarjan(i); &#125; &#125; printf("%d\n", cut_count); for (int i = 1; i &lt;= n; i++) &#123; if (cut[i]) &#123; printf("%d ", i); &#125; &#125;&#125;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>模板</tag>
        <tag>Tarjan</tag>
        <tag>割点</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「BZOJ1711」吃饭 - 网络流]]></title>
    <url>%2F2018%2F03%2F04%2Fbzoj-1711%2F</url>
    <content type="text"><![CDATA[题意 传送门：BZOJCH1711 - 吃饭和洛谷 P2891 - 吃饭 nnn头牛，每头牛只吃给定的食物和饮料，每种食物和饮料只有一个，问最多可以喂饱多少头牛。 解法 这题很神奇的有食物和饮料，如果只有一种那么可以写二分图。 首先把一头牛拆成两个点xxx和x′x&#x27;x′，食物与xxx连边，xxx与x′x&#x27;x′连边，x′x&#x27;x′与饮料连边。 然后开一个超级源sss连向所有的食物，开一个超级汇把所有的饮料连过去。 边权全部为111。然后最大流即可。 开两个点xxx个x′x&#x27;x′是为了限制每头牛只吃一种食物和饮料(总不能把一堆饮料全部喂给一头牛吃克隆一群)。 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899#include &lt;bits/stdc++.h&gt;using namespace std;typedef int Flow_Type;const Flow_Type INF = 0x3f3f3f3f;const int N = 1606;struct Edge;int level[N];int head[N];struct Edge &#123; Flow_Type capacity, flow; int to, next;&#125; e[6 * N];bool levelGraph(int s, int t) &#123; memset(level, 0, sizeof level); queue&lt;int&gt; bfs; bfs.push(s); level[s] = 1; while (!bfs.empty()) &#123; int pos = bfs.front(); bfs.pop(); for (int i = head[pos]; i; i = e[i].next) &#123; if (e[i].flow &lt; e[i].capacity &amp;&amp; !level[e[i].to]) &#123; level[e[i].to] = level[pos] + 1; if (e[i].to == t) return true; else bfs.push(e[i].to); &#125; &#125; &#125; return false;&#125;Flow_Type findPath(int s, int t, Flow_Type flow) &#123; if (s == t) return flow; Flow_Type ret = 0; for (int i = head[s]; ret &lt; flow &amp;&amp; i; i = e[i].next) &#123; if (level[s] + 1 == level[e[i].to] &amp;&amp; e[i].flow &lt; e[i].capacity) &#123; Flow_Type tmp = findPath(e[i].to, t, min(e[i].capacity - e[i].flow, flow)); ret += tmp; flow -= tmp; e[i].flow += tmp; e[i ^ 1].flow -= tmp; &#125; &#125; if (!ret) level[s] = -1; return ret;&#125;Flow_Type dinic(int s, int t) &#123; Flow_Type ans = 0; while (levelGraph(s, t)) &#123; ans += findPath(s, t, INF); &#125; return ans;&#125;int cnt = 1;void addEdge(int from, int to, int capacity) &#123; e[++cnt].to = to; e[cnt].next = head[from]; e[cnt].capacity = capacity; head[from] = cnt; e[++cnt].to = from; e[cnt].next = head[to]; e[cnt].capacity = capacity; e[cnt].flow = capacity; head[to] = cnt;&#125;int t, food, cow, drink;int n, f, d, x, a, b;// 1是超级源, t是超级汇int main() &#123; scanf("%d%d%d", &amp;n, &amp;f, &amp;d); t = 2 + f + 2*n + d; food = 1; cow = f + 1; drink = f + n + 1; for (int i = 1; i &lt;= n; i++) &#123; scanf("%d%d", &amp;a, &amp;b); for (int j = 1; j &lt;= a; j++) &#123; scanf("%d", &amp;x); addEdge(1 + x, 1 + f + i, 1); &#125; addEdge(1 + f + i, 1 + f + n + i, 1); for (int j = 1; j &lt;= b; j++) &#123; scanf("%d", &amp;x); addEdge(1 + f + n + i, 1 + f + 2*n + x, 1); &#125; &#125; for (int i = 1; i &lt;= f; i++) &#123; addEdge(1, 1 + i, 1); &#125; for (int i = 1; i &lt;= d; i++) &#123; addEdge(1 + f + 2*n + i, t, 1); &#125; printf("%d", dinic(1, t)); return 0;&#125; 拓展 网络流真是博大精深： 一个点拆成多个点用来限制流量/干各种事 &quot;kkk分图&quot;问题(传说中的三分图) 一些复杂的构图]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>网络流</tag>
        <tag>BZOJ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「BeiJing2006」狼抓兔子 - 网络流]]></title>
    <url>%2F2018%2F03%2F04%2Fbzoj-1001%2F</url>
    <content type="text"><![CDATA[题意 传送门：BZOJ1001 - 狼抓兔子和洛谷 P4001 - 狼抓兔子 给一张n×mn\times mn×m的无向网格图，求图的最小割。 n,m≤103n,m\le 10^3n,m≤103 解法 因为我们有神奇的最大流最小割定理所以这题就成了裸的最大流。 但是这个范围有点大大啊，看起来Dinic过不了。 Dinic的时间复杂度是O(n2m)O(n^2m)O(n2m)，感觉这题n=106n=10^6n=106很难过啊。 但其实大部分网络流算法的时间上界都很松，于是Dinic的时间复杂度变成了O(O(O(玄学)))和O(O(O(跑得过)))😄。 其实这题的正解是转对偶图+最短路(不会写&gt;_&lt;)，但是Dinic复杂度过于玄学于是也能过。 而且貌似如果写对偶图+最短路据说不能打SPFA(网格图) 代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495#include &lt;bits/stdc++.h&gt;using namespace std;typedef int Flow_Type;const Flow_Type INF = 0x3f3f3f3f;const int N = 1000006;struct Edge;int level[N];int head[N];struct Edge &#123; Flow_Type capacity, flow; int to, next;&#125; e[6 * N];bool levelGraph(int s, int t) &#123; memset(level, 0, sizeof level); queue&lt;int&gt; bfs; bfs.push(s); level[s] = 1; while (!bfs.empty()) &#123; int pos = bfs.front(); bfs.pop(); for (int i = head[pos]; i; i = e[i].next) &#123; if (e[i].flow &lt; e[i].capacity &amp;&amp; !level[e[i].to]) &#123; level[e[i].to] = level[pos] + 1; if (e[i].to == t) return true; else bfs.push(e[i].to); &#125; &#125; &#125; return false;&#125;Flow_Type findPath(int s, int t, Flow_Type flow) &#123; if (s == t) return flow; Flow_Type ret = 0; for (int i = head[s]; ret &lt; flow &amp;&amp; i; i = e[i].next) &#123; if (level[s] + 1 == level[e[i].to] &amp;&amp; e[i].flow &lt; e[i].capacity) &#123; Flow_Type tmp = findPath(e[i].to, t, min(e[i].capacity - e[i].flow, flow)); ret += tmp; flow -= tmp; e[i].flow += tmp; e[i ^ 1].flow -= tmp; &#125; &#125; if (!ret) level[s] = -1; return ret;&#125;Flow_Type dinic(int s, int t) &#123; Flow_Type ans = 0; while (levelGraph(s, t)) &#123; ans += findPath(s, t, INF); &#125; return ans;&#125;int cnt = 1;void addEdge(int from, int to, int capacity) &#123; e[++cnt].to = to; e[cnt].next = head[from]; e[cnt].capacity = capacity; head[from] = cnt; e[++cnt].to = from; e[cnt].next = head[to]; e[cnt].capacity = capacity; head[to] = cnt;&#125;int n, m, x, u;int main() &#123; scanf("%d%d", &amp;n, &amp;m); if (n == 1 &amp;&amp; m == 1) return puts("2147483647"), 0; for (int i = 1; i &lt;= n; i++) &#123; for (int j = 1; j &lt; m; j++) &#123; scanf("%d", &amp;x); u = (i - 1) * m + j; addEdge(u, u + 1, x); &#125; &#125; for (int i = 1; i &lt; n; i++) &#123; for (int j = 1; j &lt;= m; j++) &#123; scanf("%d", &amp;x); u = (i - 1) * m + j; addEdge(u, u + m, x); &#125; &#125; for (int i = 1; i &lt; n; i++) &#123; for (int j = 1; j &lt; m; j++) &#123; scanf("%d", &amp;x); u = (i - 1) * m + j; addEdge(u, u + m + 1, x); &#125; &#125; printf("%d", dinic(1, n * m));&#125; 拓展 平面图的性质 最大流最小割定理 PS：谁能告诉我怎样把一般的平面图转成对偶图啊！ 平面图之变诈几何哉？止增笑耳。 不用怕Dinic过不了，只需要学会以下底层优化(奇技淫巧)： inline大法好 __attribute__大法好 #pragma大法好 volitile __asm__大法好 register大法好 inline大法好 指针大法好 cache大法好 SIMD大法好 不用C++大法好 其实根本不需要，只要稍微加点优化就好了。Dinic的优化很多的。]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>网络流</tag>
        <tag>BZOJ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Luogu P1886」滑动窗口 - 单调队列]]></title>
    <url>%2F2018%2F03%2F03%2Fluogu-1686%2F</url>
    <content type="text"><![CDATA[题意 传送门：洛谷 P1886 - 滑动窗口 单调队列的入门题。 给一个序列，求所有长度为kkk的子段的最小值和最大值。 解法 数据的范围是k≤n≤106k\le n\le 10^6k≤n≤106，暴力当然过不了。 为了简化问题，只考虑最小值。 考虑滑动的过程。 在最开始的[1,k][1,k][1,k]移向[2,k+1][2,k+1][2,k+1]时，第一个元素的生命就结束了，第k+1k+1k+1个元素进入了它的生命周期。 如果有一组数据{2, 3, 1, 4, 2, 6, 3}, k = 3，那么最开头的222和333肯定&quot;没有前途&quot;作为最小值。 而且窗口每移动一次，就会让一些数字&quot;没有前途&quot;。 如果可以在O(1)O(1)O(1)的时间处理每一次移动，那么处理10610^6106的数据将没有任何问题。 现在我们考虑的算法流程是： 移动 -&gt; 删除&quot;没有前途&quot;的元素 -&gt; 添加新元素 -&gt; 删除因为移动而GG的元素 -&gt; 输出/保存当前答案 -&gt; 回到第一步。 第二步和第三步可以用单调队列维护。 一个单调队列，就是一个元素按照一定顺序排列的队列。 考虑一个双端队列，(仅)可以从头尾增删元素，(仅)可以获取头尾元素的信息，那我们可以利用双端队列实现单调队列。下面是实现方法(仍然只考虑最小值)： 插入元素xxx(同时删除一些队尾的元素以满足单调性) 先把所有大于等于xxx的数从队尾删掉 然后把xxx加入进去 删除队首元素 无脑pop_front不久好了？ 然后第二步和第三步对应一次插入，第四步对应一次删除。 然后呢？ 都这么详细了你还要我讲什么？ 代码 注释就不用加了吧，可读性应该还可以。 12345678910111213141516171819202122232425262728293031323334353637#include &lt;bits/stdc++.h&gt;using namespace std;deque&lt;int&gt; maxq, minq;int rec[1000006];int n, k;void min_p() &#123; for (int i = 1; i &lt;= n; i++) &#123; while (!minq.empty() &amp;&amp; minq.back() &gt;= rec[i]) &#123; minq.pop_back(); &#125; minq.push_back(rec[i]); if (i &gt; k) if (minq.front() == rec[i - k]) minq.pop_front(); if (i &gt;= k) printf("%d ", minq.front()); &#125; puts("");&#125;void max_p() &#123; for (int i = 1; i &lt;= n; i++) &#123; while (!maxq.empty() &amp;&amp; maxq.back() &lt;= rec[i]) &#123; maxq.pop_back(); &#125; maxq.push_back(rec[i]); if (i &gt; k) if (maxq.front() == rec[i - k]) maxq.pop_front(); if (i &gt;= k) printf("%d ", maxq.front()); &#125; puts("");&#125;int main() &#123; scanf("%d%d", &amp;n, &amp;k); for (int i = 1; i &lt;= n; i++) &#123; scanf("%d", rec + i); &#125; min_p(); max_p();&#125; 拓展 这个拓展包括的就不是滑动窗口了。话说滑动窗口到底有什么用 单调队列优化DP、递推等一系列东西 其实我也不知道啊……我太弱了]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>单调队列</tag>
        <tag>洛谷</tag>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「BZOJ1214」团伙 - 并查集]]></title>
    <url>%2F2018%2F02%2F22%2Fbzoj-1214%2F</url>
    <content type="text"><![CDATA[题意 传送门：BZOJ1214 - 团伙 有nnn个人，有mmm对朋友或敌人的关系。并且满足以下性质： 朋友的朋友也是朋友。 敌人的敌人也是朋友。 所有的朋友组成一个团伙。 现在问你根据这些信息，最多可能有几个团伙。 解法 首先题面中的最多省去，那么问题就转化为求团伙的数量。 求连通块数量可以很容易想到并查集。 朋友关系很好处理，只需要两两merge即可。 敌人咋处理？ 可以考虑把一个人AAA拆成两个点AAA和A′A&#x27;A′。其中A′A&#x27;A′代表A的所有敌人的集合。 那么根据敌人的敌人是朋友，可以得出，如果AAA和BBB是敌人，那么我们要merge以下两对： merge(A,B′)merge(A,B&#x27;)merge(A,B′)和merge(A′,B)merge(A&#x27;,B)merge(A′,B)。 于是只要开到两倍空间就好了。 统计连通块数只需统计111~nnn的连通块个数即可。 代码 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;bits/stdc++.h&gt;using namespace std;int par[10003];int src[10003];int n, m, a, b;char s[2];int ans;int find(int x) &#123; return par[x] == x ? x : par[x] = find(par[x]);&#125;void merge(int x, int y) &#123; if ((x = find(x)) != (y = find(y))) par[x] = y;&#125;int main() &#123; scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= 2 * n; i++) &#123; par[i] = i; &#125; while (m--) &#123; scanf("%1s%d%d", s, &amp;a, &amp;b); if (*s == 'F') &#123; merge(a, b); &#125; else &#123; merge(n + a, b); merge(a, n + b); &#125; &#125; for (int i = 1; i &lt;= n; i++) &#123; src[find(i)] = 1; &#125; for (int i = 1; i &lt;= 2 * n; i++) &#123; ans += src[i]; &#125; printf("%d", ans);&#125; 拓展 求连通块个数当然用并查集啦！ 如果关系种类繁多，错综复杂，可以考虑把一个点&quot;拆&quot;成多个点。]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>BZOJ</tag>
        <tag>图论</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「赛后总结」Codeforces Round #464 (Div. 2) (+1)]]></title>
    <url>%2F2018%2F02%2F17%2Fcodeforces-round-464%2F</url>
    <content type="text"><![CDATA[传送门：Codeforces Round #464 (Div. 2) 今天的状态差到一种境界&gt;_&lt;。然后估计这几次比赛会炼成High Frequency Rating。 本来可以做出C、D的，顿时感觉被出题人坑了。 原来坑题不止中国出，俄罗斯也出(这次出题人是俄罗斯的)。 A 比赛时竟然写了个dfs…… 然后造就了 # When Who Problem Lang Verdict Time Memory 2018-02-17 13:27:26 A - Love Triangle GNU C++ Time limit exceeded on pretest 4 1000 ms 2200 KB 2018-02-17 13:23:57 A - Love Triangle GNU C++ Wrong answer on pretest 7 15 ms 2200 KB 2018-02-17 13:22:58 A - Love Triangle GNU C++ Wrong answer on pretest 7 15 ms 2200 KB 2018-02-17 13:19:46 A - Love Triangle GNU C++ Wrong answer on pretest 7 15 ms 2000 KB 2018-02-17 13:15:25 A - Love Triangle GNU C++ Memory limit exceeded on pretest 6 140 ms 262100 KB 的奇观。 直到我发现只要判断a[a[a[i]]] == i是否成立就可以通过。 然后我终于…… # When Who Problem Lang Verdict Time Memory 2018-02-17 14:21:19 A - Love Triangle GNU C++ Pretests Passed 30 ms 2000 KB 然而那时我已经早就AC了B题…… 最后A我只拿了150150150分。然并卵 代码 12345678910111213141516171819#include &lt;bits/stdc++.h&gt;using namespace std;int a[5003];int n;int main() &#123; scanf("%d", &amp;n); for (int i = 1; i &lt;= n; i++) &#123; scanf("%d", a+i); &#125; for (int i = 1; i &lt;= n; i++) &#123; if (a[a[a[i]]] == i) &#123; puts("YES"); return 0; &#125; &#125; puts("NO");&#125; 教训 不要想多！不要想多！！不要想多！！！ 这堆数据发现了你的想多。 我是这堆数据中的一个超级水数据，我先发现你的想多是你Rating的幸运。警告你：不要想多！不要想多！！不要想多！！！ 你的的方向上有千万个参赛者，只要不想多，这堆数据就无法定位想多者。 如果想多，想多者将被定位，你的Rank将会遭到打击，你的Rating将会被降低！ 不要想多！不要想多！！不要想多！！！ B 因为我没考虑到无解时全部输出000的情况，所以我又WA了一发。还有一发是我没判断仓鼠数量。 然后我一直没调到错误。 直到我发现我在if中的判断少写了个=。 代码 123456789101112131415161718#include &lt;bits/stdc++.h&gt;using namespace std;long long n, x, ax, bx, cx;int k;int main() &#123; scanf("%I64d%d", &amp;n, &amp;k); for (int i = 1; i &lt;= k; i++) &#123; scanf("%I64d", &amp;x); if (n - n % x &gt;= cx) &#123; ax = i; bx = n / x; cx = n - n % x; &#125; &#125; printf("%I64d %I64d", ax, bx);&#125; 教训 小心无解情况。如果允许输出多组解中的任意一个，请不要使用&lt;或者&gt;，用&lt;=和&gt;=替代它们。如果不允许，则将当前答案设置成无解。 C 令f−s=kf-s=kf−s=k。 最开始我写了个前缀和，然后在最后追加kkk个数，把每个长度为kkk的子段算出来然后取个max。 无数次Wrong answer on test 20之后还是没有发现错在哪里。 然后我比赛时就没过这题…… 比赛结束后，我改成了另外一种写法，又无数次Wrong answer on test 9后也没有发现问题。 最后我写了个尺取法或two-pointer，然后还是Wrong answer on test 9。 在我砸键盘前的那一刻，我提交了一份骗数据的代码。于是…… Output 12320280: 5007229129971799717: 500722912 Answer 120280 卧槽(上这么难你是人吗)答案一样为什么是202802028020280？百思不得姐。 直到我看见了这句话： If there are many answers, output the smallest among them. mmp。 更错 上面这333个算法，虽然是正着枚举，但是时间是反的。 于是就Wrong answer on test 9了。 估计是LJ出题人不想写太长的SPJ，然后就在Output最后写了这句话。 前缀和的最后 我的前缀和还是莫名其妙的Wrong answer on test 20了，估计算法还是有问题。 代码(双指针) 12345678910111213141516171819202122232425262728293031323334#include &lt;bits/stdc++.h&gt;#ifdef LOCAL#define lld "%lld"#else#define lld "%I64d"#endifusing namespace std;long long arr[200005];long long ax, ai, cur;int n, s, f, t;int main() &#123; scanf("%d", &amp;n); for (int i = 0; i &lt; n; i++) &#123; scanf("%lld", arr+i); &#125; scanf("%d%d", &amp;s, &amp;f); s--; f -= 2; for (int i = s; i &lt;= f; i++) &#123; cur += arr[i]; &#125; for (int i = 1; i &lt;= n; i++) &#123; if (cur &gt;= ax) &#123; ai = t + 1; ax = cur; &#125; f = (f + 1) % n; cur += arr[f] - arr[s]; s = (s + 1) % n; t = (t + n - 1) % n; &#125; printf(lld, ai);&#125; 教训 防被坑最好的方法是多读题。 D 第一感图论，然后写了个枚举。如果a[i] == b[i]那么gph[ax][bx] = 1，然后把所有连边输出。 然后挂在了这个数据上： 1233abcbca 接下来我写了个初始化为000的并查集，然后因为有000点，与初始值矛盾，于是第二个样例挂了。 最后我写了个把所有字母替换成一个字符串中存在的字符的代码，于是Wrong answer on pretest 4。类似这样： 1232abcd 比赛完我才发现，(卧槽上这么难你是人吗)我把并查集的初始值设矛盾了，于是我把初始值设为−1-1−1，然后就Accepted了！ 代码 1234567891011121314151617181920212223242526272829303132#include &lt;bits/stdc++.h&gt;using namespace std;char a[100005], b[100005];int par[31];int n, ans;int find(int x) &#123; return ~par[x] ? par[x] = find(par[x]) : x;&#125;void merge(int x, int y) &#123; if ((x = find(x)) != (y = find(y))) par[x] = y, ans++;&#125;int main() &#123; memset(par, -1, sizeof par); scanf("%d\n", &amp;n); gets(a + 1); gets(b + 1); for (int i = 1; i &lt;= n; i++) &#123; if (a[i] != b[i]) &#123; int ax = a[i] - 'a'; int bx = b[i] - 'a'; merge(ax, bx); &#125; &#125; printf("%d\n", ans); for (int i = 0; i &lt; 26; i++) &#123; find(i); if (par[i] != -1) printf("%c %c\n", i + 'a', par[i] + 'a'); &#125;&#125; 教训 乱初始化的后果是很严重的。写并查集前先想想有没有0号点。 E 二分三分不会写不好写，于是来优化暴力。 令f(x,i)f(x,i)f(x,i)代表选择最大的数xxx和前iii个数时的max−meanmax-meanmax−mean。 显然添加数字之后并不会影响以前的答案。 于是可以O(n)O(n)O(n)Accepted这道题。 代码 123456789101112131415161718192021222324252627282930313233343536// mmp为什么只有C++14及以上可以通过编译?详见下一篇底层博客————坑爹的编译器。#include &lt;bits/stdc++.h&gt;#ifdef LOCAL#define lld "%lld"#else#define lld "%I64d"#endifusing namespace std;typedef long long ll;typedef long double ld;int q, l, n, op, ptr;ll arr[500005];ld ans;ld f(ll x, int i) &#123; return (x * i - arr[i]) / ld(i + 1);&#125;int main() &#123; scanf("%d", &amp;q); ll x; while (q--) &#123; scanf("%d", &amp;op); if (op &amp; 1) &#123; scanf(lld, &amp;x); while (ptr &lt; n &amp;&amp; f(x, ptr) &lt;= f(x, ptr + 1)) ptr++; ans = max(ans, f(x, ptr)); arr[n+1] = arr[n] + x; n++; &#125; else &#123; printf("%.10Lf\n", ans); &#125; &#125;&#125;]]></content>
      <categories>
        <category>赛后总结</category>
      </categories>
      <tags>
        <tag>模拟</tag>
        <tag>图论</tag>
        <tag>并查集</tag>
        <tag>Codeforces</tag>
        <tag>two-pointer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SDOI2009」HH 的项链 - 莫队]]></title>
    <url>%2F2018%2F02%2F16%2Fsdoi2009-diff%2F</url>
    <content type="text"><![CDATA[⚠️注意：「SDOI2009」HH 的项链 - 莫队⇔「算法」莫队\colorbox{lightgray}{「SDOI2009」HH 的项链 - 莫队}\Leftrightarrow\colorbox{lightgray}{「算法」莫队}「SDOI2009」HH 的项链 - 莫队​⇔「算法」莫队​。 题意 传送门：BZOJ1878 - HH的项链 莫队模板题。 给一个长度为nnn数列，要你查询mmm次[l,r][l,r][l,r]区间中不同的数字的个数。 n≤106,m≤105n\le 10^6,m\le 10^5n≤106,m≤105 解法 虽然看起来这题可以卡掉莫队，但是我还是用莫队AC了。 然后直接套模板即可。 2018-05-12 UPD：洛谷的数据加强了，把莫队卡过了。 存储结构 1234567struct query &#123; int l, r, *ans; bool operator&lt;(const query&amp; x) const &#123; if (l / blockSize == x.l / blockSize) return r &lt; x.r; return l / blockSize &lt; x.l / blockSize; &#125;&#125; q[200005]; lll和rrr代表查询中的l,rl,rl,r，ansansans代表保存答案的位置的指针(这样排序之后输出的顺序就不会乱)。 blockSize是每个块的大小。 修改操作 1234int extend(int x, int offset) &#123; if (~offset) return 1 == ++cnt[x]; // +1 else return -!--cnt[x]; // -1&#125; xxx代表更新的数字，offset代表加还是减(1,−1)(1,-1)(1,−1)，返回值用来更新答案。 如果+1+1+1之后cnt[x]正好为111，那就是新增了一种数字，返回111。 如果−1-1−1之后cnt[x]正好为000，那就是减少了一种数字，返回−1-1−1。 莫队算法 12345678int l = 1, r = 0, lans = 0;for (int i = 1; i &lt;= m; i++) &#123; while (r &lt; q[i].r) lans += extend(src[++r], 1); while (r &gt; q[i].r) lans += extend(src[r--], -1); while (l &gt; q[i].l) lans += extend(src[--l], 1); while (l &lt; q[i].l) lans += extend(src[l++], -1); *q[i].ans = lans;&#125; lans代表当前查询的答案。 代码 123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;bits/stdc++.h&gt;using namespace std;int n, m, blockSize, src[50004], ans[200005], cnt[1000006];struct query &#123; int l, r, *ans; bool operator&lt;(const query&amp; x) const &#123; if (l / blockSize == x.l / blockSize) return r &lt; x.r; return l / blockSize &lt; x.l / blockSize; &#125;&#125; q[200005];int extend(int x, int offset) &#123; if (~offset) return 1 == ++cnt[x]; else return -!--cnt[x];&#125;int main() &#123; scanf("%d", &amp;n); for (int i = 1; i &lt;= n; i++) &#123; scanf("%d", src+i); &#125; blockSize = ceil(sqrt(n)); scanf("%d", &amp;m); for (int i = 1; i &lt;= m; i++) &#123; scanf("%d%d", &amp;q[i].l, &amp;q[i].r); q[i].ans = ans+i; &#125; sort(q + 1, q + m + 1); int l = 1, r = 0, lans = 0; for (int i = 1; i &lt;= m; i++) &#123; while (r &lt; q[i].r) lans += extend(src[++r], 1); while (r &gt; q[i].r) lans += extend(src[r--], -1); while (l &gt; q[i].l) lans += extend(src[--l], 1); while (l &lt; q[i].l) lans += extend(src[l++], -1); *q[i].ans = lans; &#125; for (int i = 1; i &lt;= m; i++) &#123; printf("%d\n", ans[i]); &#125;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>BZOJ</tag>
        <tag>模板</tag>
        <tag>SDOI</tag>
        <tag>莫队</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「笔记」day6上午 - 分治]]></title>
    <url>%2F2018%2F02%2F12%2Fday6-morning-notes%2F</url>
    <content type="text"><![CDATA[⚠️注意：这是ZROI集训的源笔记，其中有很多缺失和遗漏以及无法看懂的部分，大家就不要看了吧。 以下是原笔记： 分治 归并排序 将两个已经有序的数组用O(n)O(n)O(n)合并成一个有序的数组。 时间复杂度O(nlog⁡n)O(n\log n)O(nlogn) 树的深度O(log⁡n)O(\log n)O(logn)层，归并整个一层O(n)O(n)O(n)，共O(nlog⁡n)O(n\log n)O(nlogn)。 使用范围 规模小可以方便计算 可以划分成较小子问题 子问题全部解出后可以解决原问题 子问题独立 Master Theorem 设a≥1,b≥1a\ge 1,b\ge 1a≥1,b≥1，设f(n)f(n)f(n)为一函数，T(n)T(n)T(n)由递归式T(n)=aT(nb)+f(n)T(n)=aT(\frac nb)+f(n)T(n)=aT(bn​)+f(n)定义。 若f(n)&lt;nlog⁡baf(n)&lt;n^{\log_ba}f(n)&lt;nlogb​a，则T(n)=O(nlog⁡ba)T(n)=O(n^{\log_ba})T(n)=O(nlogb​a) 若f(n)=nlogbaf(n)=n^{log_ba}f(n)=nlogb​a，则T(n)=O(nlogbalog2n)T(n)=O(n^{log_ba}log_2n)T(n)=O(nlogb​alog2​n) 若f(n)&gt;nlogbaf(n)&gt;n^{log_ba}f(n)&gt;nlogb​a，且对于任意c&lt;1c&lt;1c&lt;1与所有足够大的nnn，都有af(nb)≤cf(n)af(\frac nb)\le cf(n)af(bn​)≤cf(n)，则T(n)=O(f(n))T(n)=O(f(n))T(n)=O(f(n))。 逆序对 n≤105n\le10^5n≤105 一分为二。考虑左边自身、右边自身、跨两边。跨两边就two-pointers解决。 快速幂 分治大法好位运算大法好 即时战略(WC2018T2) 35pts 从一个点开始，枚举所有其它点，然后把它周围所有点探索出来，类似于bfs。O(n2)O(n^2)O(n2)。 完全二叉树 Solution 1 O(n2)O(\frac n2)O(2n​)查出一个点在哪个子树。 然后查下面的O(n)O(n)O(n)个点，在标记中使用堆式编号。 然后就用主定理证出O(nlog⁡n)O(n\log n)O(nlogn)了。 Solution 2 因为完全二叉树的深度是O(log⁡n)O(\log n)O(logn)的，所以可以用O(nlog⁡n)O(n\log n)O(nlogn)过掉。 Solution 3 在完全二叉树上BFS！ 百度地图的实时路况 分治严格不经过的点，solve(l,r)solve(l,r)solve(l,r)代表[l,r][l,r][l,r]都没有被考虑。 = = 区间的价值 枚举最小值。然后从左右两端找最大值。 BD String 超淼题。 可以证明，S(n)S(n)S(n)中B的数量是2n−12^{n-1}2n−1。 然后计算solve(n)solve(n)solve(n)： n=0n=0n=0返回000。 n=1n=1n=1返回111。 mid=2⌊log⁡2n⌋mid=2^{\lfloor\log_2n\rfloor}mid=2⌊log2​n⌋。如果2mid−1=n2mid-1=n2mid−1=n，返回midmidmid。 否则返回f(2mid−1−n)+n+1−midf(2mid-1-n)+n+1-midf(2mid−1−n)+n+1−mid。 My solution 令f(x)f(x)f(x)为S(n)S(n)S(n)中[0,x)[0,x)[0,x)的B的数量。 那么答案就等于f(l)−f(r−1)f(l)-f(r-1)f(l)−f(r−1)。 然后考虑xxx的位置。如果在后半段就将2n−1+12^{n-1}+12n−1+1加上后半段。 前半段就直接从n−1n-1n−1算。 欧几里得最近点对 先按xxx排序，然后把点分成两半。 然后初始化答案d=+∞d=+\inftyd=+∞。 然后在左右两边枚举点，对答案更新有用的点一定是在该点为圆心半径为ddd的点。这样的点最多只有不到666个。 Tricky Function g(i,j)g(i,j)g(i,j)就是算(i,j](i,j](i,j]的区间和。 令bbb为aaa的前缀和，那么g(i,j)=b[i]−b[j]g(i,j)=b[i]-b[j]g(i,j)=b[i]−b[j]。 xxx坐标为编号，yyy坐标为前缀和。 然后就差一个根号！ 然后交个板子就AC了。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「笔记」day4 - 图论]]></title>
    <url>%2F2018%2F02%2F10%2Fday4-notes%2F</url>
    <content type="text"><![CDATA[⚠️注意：这是ZROI集训的源笔记，其中有很多缺失和遗漏以及无法看懂的部分，大家就不要看了吧。 以下是原笔记： 搜索 DFS 二分图判定 dfs即可。111相邻222，222相邻111。 不是二分图则会染色矛盾。 时空阵 先不考虑距离为mmm。 考虑bfs的分层。 dpi,j,kdp_{i,j,k}dpi,j,k​前iii层，jjj个点，第iii层kkk个点的方案数。 枚举第i+1i+1i+1层的点数xxx。 ​ 标号 层内 跨层 转移：dpi+1,j+x,x=dpi,j,k⋅(n−jx)⋅2(x2)⋅(2k−1)xdp_{i+1,j+x,x}=dp_{i,j,k}\cdot\binom{n-j}x\cdot 2^\binom x2\cdot(2^k-1)^xdpi+1,j+x,x​=dpi,j,k​⋅(xn−j​)⋅2(2x​)⋅(2k−1)x 现在考虑距离为mmm。 dpm,j,k⋅kn−1dp_{m,j,k}\cdot \frac k{n-1}dpm,j,k​⋅n−1k​第mmm层，jjj个点，第mmm层kkk个点。kn−1k\over n-1n−1k​是因为概率和对称性。 每个k元组出现的概率是相等的。 再考虑剩下的n−jn-jn−j个点连边。 它们可以内部连边，并且只能和第mmm层(k个点)连边。 ​ 内部 外部 所以dpm,j,k⋅kn−1⋅2(n−j2)⋅2k(n−j)dp_{m,j,k}\cdot\frac k{n-1}\cdot 2^\binom {n-j}2\cdot 2^{k(n-j)}dpm,j,k​⋅n−1k​⋅2(2n−j​)⋅2k(n−j)。 欧拉回路 正常版 图必须联通，小心孤立点 充要条件： 欧拉路：000或222个奇点。 欧拉回路：全是偶点。 证明略 “回溯算法” 算法证明略 代码： 12345678910111213void dfs(int u, int c) &#123; // O(n+m) void dfs(int u) &#123; while (!e[u].empty()) &#123; int v = e[u][e[u].size()-1].first; int id = e[u][e[u].size()-1].second; e[u].pop_back(); // O(1) 减小循环代价 if (vis[id]) continue; // 有向图删了 vis[id] = 1; // 有向图删了 dfs(v); ans.push_back(id);// auto it=--e[u].end(); &#125;&#125; 高端版 最少路径数覆盖整张图？ 先往2k2k2k个奇点之间加kkk条边让奇点消失。然后跑欧拉回路，然后拆边，会拆成kkk条路径。 然后这题就成了结论题。 例题 1 ? 2 将区间中的lll和rrr构点建边，然后判跑一遍欧拉回路。 如果有欧拉回路，那么方向是→就将区间设为111，如果是←就设为−1-1−1。 没有欧拉回路就把点全部升序排序，然后121212、343434、565656…的连边。 然后去掉加的边按方向设置111或−1-1−1。 证明略 Dijkstra 每次将最短路最短的未确定点确定，然后再将新确定点相邻的点更新，直到跑完为止。 可以利用小根堆将复杂度优化至O((n+m)log⁡n)O((n+m)\log n)O((n+m)logn)。 平板电视大法好 稠密图用naive算法，不要优化！不要优化！！不要优化！！！ Bellman-Ford O(nm)O(nm)O(nm) 不怕负权边。 dis[u][i]dis[u][i]dis[u][i]走不超过iii步到uuu点 方程：dis[u][i]=min(dis[u][i−1],dis[v][i−1]+w[v][u])dis[u][i]=min(dis[u][i-1], dis[v][i-1]+w[v][u])dis[u][i]=min(dis[u][i−1],dis[v][i−1]+w[v][u]) 华容道 并没有 dis(x,y,dir)dis(x,y,dir)dis(x,y,dir)表示把(x,y)(x,y)(x,y)往dirdirdir方向移动。 将空格移到(x,y)(x,y)(x,y)附近需要ccc的代价，可以预处理。 多点最短路 HDU 6166 简单版 考虑无向图。 先把所有kkk中的点的disdisdis设为000，然后松弛时记录父节点。 然后枚举所有边，如果边的两边是来自不同的源点，那么用dis[u]+dis[v]+w[u][v]dis[u]+dis[v]+w[u][v]dis[u]+dis[v]+w[u][v]更新答案。 正常版 ????? 定义f(u,v)f(u,v)f(u,v)为uuu点集到vvv点集的最短路。 然后弄一个超级源和一个超级汇，一个连整个uuu，一个连整个vvv，然后算一下最短路即可。 然后做2log2n2log_2n2log2​n跑出对于u,v∈S,u≠vu,v\in S,u\ne vu,v∈S,u≠v中f(u,v)f(u,v)f(u,v)。 复杂度nlog2nnlog^2nnlog2n。 强连通分量 如果一张图中所有的点对(u,v)(u,v)(u,v)中的u,vu,vu,v可以互相到达，那么张图是强连通的。 树边：从父亲跑到儿子的边。 返祖边：从晚辈跑到祖辈的边。 前向边：从祖辈跑到晚辈的边。(不包括树边) 横叉边：乱连的边。 Low Case：树边+返祖边(u,v)(u,v)(u,v) 那么uuu到vvv的路径全部在同一个强连通分量里。 首先弄一个时间戳，也就是dfn。 定义low[i]代表iii子树能通过返祖边和横叉边能够到的的最浅的点(跳出子树为止)。 如果dfn[i]=low[i]，那么iii子树再也跳不上去了，所以iii子树组成一个强连通分量。 注意！如果你通过横叉边往上跑的时候跑到的是一个完整的强连通分量，那么Congratulations，这个作废。 12345678910111213141516171819202122void dfs(int u) &#123; dfn[u] = low[u] = ++ind; // index ins[u] = 1; // instack(没形成强连通分量的栈) st[++top] = u; for (int i = 0; i &lt; e[u].size(); i++) &#123; int v = e[u][i]; if (!dfn[v]) &#123; dfs(v); low[u] = min(low[u], dfs(low[v])); &#125; else if (ins[v]) &#123; // 不是强连通分量 low[u] = min(low[u], dfn[v]); // 可以换成low[v] &#125; &#125; if (dfn[u] == low[u]) &#123; ++cnt; while (1) &#123; bel[st[top]] = cnt; // belong ins[st[top]] = 0; if (st[top--] == u) break; &#125; &#125;&#125; 缩点 缩点后一定是个DAG。 最大半联通子图 先缩点。 如果图有分叉就会发现不可达，然后求最长链即可。 于是每个点都有了权值w[i]w[i]w[i]。 最后就直接dp[u]=max⁡(dp[v]+w[v]),(u,v)∈Edp[u]=\max(dp[v]+w[v]), (u,v)\in Edp[u]=max(dp[v]+w[v]),(u,v)∈E。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「笔记」day3 - DP]]></title>
    <url>%2F2018%2F02%2F09%2Fday3-notes%2F</url>
    <content type="text"><![CDATA[⚠️注意：这是ZROI集训的源笔记，其中有很多缺失和遗漏以及无法看懂的部分，大家就不要看了吧。 以下是原笔记： day2 欠账 最长简单环 fp,s,tf_{p,s,t}fp,s,t​从sss到ttt经过点集ppp是否存在。 初始：f2i−1,i,i=1f_{2^{i-1},i,i}=1f2i−1,i,i​=1 如果iii满足(t,i)∈E,(p&gt;&gt;(i+1)&amp;1)=0(t, i) \in E, (p&gt;&gt;(i+1)\&amp;1)=0(t,i)∈E,(p&gt;&gt;(i+1)&amp;1)=0，就可以转移fp∣(1&lt;&lt;(i−1)),s,if_{p|(1&lt;&lt;(i-1)),s,i}fp∣(1&lt;&lt;(i−1)),s,i​ fp,s,t=1f_{p,s,t}=1fp,s,t​=1且(t,s)∈E(t,s) \in E(t,s)∈E，则长度为__builtin_popcount(p)。 复杂度：2nn32^nn^32nn3 优化 限定sss是环中最小的编号，其它条件不变。 转移时枚举s+1...ns+1...ns+1...n ∑in2nn=n∑i=1n2i=O(2nn)\sum_i^n2^nn=n\sum_{i=1}^n2^i=O(2^nn)∑in​2nn=n∑i=1n​2i=O(2nn) 例题6 fpf_pfp​在组里的最大收益。 fp=max⁡sw[s]+fp−sf_p=\max\limits_s w[s]+f_{p-s}fp​=smax​w[s]+fp−s​ (p&amp;s)=s(p\&amp;s)=s(p&amp;s)=s O(4n)O(4^n)O(4n)并不能跑过n=16n=16n=16。 优化 ppp有2k−12^{k-1}2k−1个非空子集，可以用000~2k−12^{k-1}2k−1表示所有的子集。只需2k−12^{k-1}2k−1枚举子集。 对于每一个集合PPP，那么子集数为2∣P∣2^{|P|}2∣P∣。 复杂度O(3n)O(3^n)O(3n) 123for (s=p; s; s=(s-1)&amp;p) &#123; // 不重复枚举所有p的子集 // do something...&#125; 生成树计数 令111为根。 fi,pf_{i,p}fi,p​代表iii的子树中，有ppp个点的子树个数。 1init : f[i][1&lt;&lt;(i-1)] = 1; fi,p=∑fj,sfi,p−s,s⊆P−{i},j∈sf_{i,p}=\sum f_{j,s}f_{i,p-s}, s\subseteq P-\{i\} , j\in sfi,p​=∑fj,s​fi,p−s​,s⊆P−{i},j∈s 设min⁡(P−{i})=k\min(P-\{i\})=kmin(P−{i})=k。 复杂度O(3nn2)O(3^nn^2)O(3nn2) 枚举顺序 i 1~n P 0~2^n-1 斯坦纳树 fi,pf_{i,p}fi,p​以iii为根，经过关键点集合ppp。 i,ji,ji,j是关键点fi,p=min⁡fj,s+fi,p−s+wi,jf_{i,p}=\min f_{j,s}+f_{i,p-s}+w_{i,j}fi,p​=minfj,s​+fi,p−s​+wi,j​ 孤立点从子树接边fi,p=min⁡fj,p+wi,jf_{i,p}=\min f_{j,p}+w_{i,j}fi,p​=minfj,p​+wi,j​ 带环，需要用最短路转移！ 轮廓线DP⊆\subseteq⊆状压 例题9 暴力 fi,pf_{i,p}fi,p​代表扫到了iii列，ppp从上一行突出来了。 Procedure： ppp碰到障碍点，直接扔掉。 枚举sss，代表在第iii行会横出下一行。 满足s&amp;(p|障碍)=0。 而且竖着的骨牌必须可以摆在~(s|障碍|p)中。 复杂度3^nn^{很多次方} 高端操作(轮廓线DP) 首先一列一列放骨牌，然后总共有n+1n+1n+1个边界。 放置的方式： 12345671 8 15 . #2 9 . . #3 10. . #4 11. #5 12. #6 13. #7 14. # 边界： 1234567. . . . # 1. . . . # 1. . . . # 1. . . # 2. . . # 1. . . # 1. . . # 1 如图，有n+1n+1n+1个边界。 可以记录状态fi,j,pf_{i,j,p}fi,j,p​代表放到了(i,j)(i,j)(i,j)点，边界ppp方案数。 不合法状态： iii要长出来或i+1i+1i+1要长出来并且(i,j)(i,j)(i,j)是障碍。 iii和i+1i+1i+1都要长出来。 合法状态： iii和i+1i+1i+1只有一个长出来并且(i,j)(i,j)(i,j)不是障碍， 转移到P−(1&lt;&lt;(i−1))P-(1&lt;&lt;(i-1))P−(1&lt;&lt;(i−1))或P−(1&lt;&lt;i)P-(1&lt;&lt;i)P−(1&lt;&lt;i)。 其它长出情况直接转移到P+(1&lt;&lt;(i−1))P+(1&lt;&lt;(i-1))P+(1&lt;&lt;(i−1))或P+(1&lt;&lt;i)P+(1&lt;&lt;i)P+(1&lt;&lt;i)。 最后扫完一行后需要更新轮廓线才可以继续DP。 新的轮廓线中的第一个一定是000(边界外不可能有股牌下来) 如果n+1n+1n+1为111就直接丢掉(伸到了边界外面) 然后就直接左移一位(111移到222 222移到333…nnn移到n+1n+1n+1) 复杂度O(2nn2)O(2^nn^2)O(2nn2) 枚举顺序jjj、iii、ppp。 k国王问题 fi,j,k,pf_{i,j,k,p}fi,j,k,p​ 放到(i,j)(i,j)(i,j)，放了kkk个国王，轮廓线外的ppp格会被攻击。 讨论两种情况：放还是不放。 放就把周围一圈的ppp更新，否则直接转移。 max⁡i=0\max\limits_i=0imax​=0 day2e B f_{叶子}=+\inf,f_.=0 fi+=min⁡(w,fj)f_i+=\min(w,f_j)fi​+=min(w,fj​) C fi,pf_{i,p}fi,p​ 前iii选ppp是否能到达 枚举aaa、bbb。 fi,p−&gt;fi+1,p+(1&lt;&lt;(a−1))+(1&lt;&lt;(b−1))f_{i,p}-&gt;f_{i+1,p+(1&lt;&lt;(a-1))+(1&lt;&lt;(b-1))}fi,p​−&gt;fi+1,p+(1&lt;&lt;(a−1))+(1&lt;&lt;(b−1))​ (p&gt;&gt;(a,b−1))&amp;1=0(p&gt;&gt;(a,b-1))\&amp;1=0(p&gt;&gt;(a,b−1))&amp;1=0，满足边 A fi,j=∑k=0wifi−1,j−k(jk)f_{i,j}=\sum_{k=0}^{w_i}f_{i-1,j-k}\binom jkfi,j​=∑k=0wi​​fi−1,j−k​(kj​) O((∑wi)2)O((\sum w_i)^2)O((∑wi​)2) D 改板轮廓线DP模板 E fi,jf_{i,j}fi,j​深度≤j\le j≤j，有iii点。 fi−1,j−1⋅2⋅if_{i-1,j-1}\cdot 2\cdot ifi−1,j−1​⋅2⋅i ∑k=1i−2fk,j−1⋅fi−k−1,j−1⋅i⋅(i−2i−k−2)\sum_{k=1}^{i-2}f_{k,j-1}\cdot f_{i-k-1,j-1}\cdot i\cdot \binom{i-2}{i-k-2}∑k=1i−2​fk,j−1​⋅fi−k−1,j−1​⋅i⋅(i−k−2i−2​) f0,i=1f_{0,i}=1f0,i​=1 f1,i=1f_{1,i}=1f1,i​=1 状态O(nd)O(nd)O(nd)，转移O(n)O(n)O(n) 复杂度O(n2d)O(n^2d)O(n2d)]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「笔记」day2 - DP]]></title>
    <url>%2F2018%2F02%2F08%2Fday2-notes%2F</url>
    <content type="text"><![CDATA[⚠️注意：这是ZROI集训的源笔记，其中有很多缺失和遗漏以及无法看懂的部分，大家就不要看了吧。 以下是原笔记： day1欠账 简单题 fn,x,yf_{n,x,y}fn,x,y​长度aaa，x,yx,yx,y表示111和000的奇偶性。 fn,0,y−&gt;fn,0,y xor 1f_{n,0,y} -&gt; f_{n,0,y\ xor\ 1}fn,0,y​−&gt;fn,0,y xor 1​ fn,x,0−&gt;fn,x xor 1,0f_{n,x,0} -&gt; f_{n,x\ xor\ 1,0}fn,x,0​−&gt;fn,x xor 1,0​ 矩阵优化 fn+1,0,0,fn+1,0,1,fn+1,1,0,fn+1,1,1f_{n+1,0,0}, f_{n+1,0,1}, f_{n+1,1,0}, f_{n+1,1,1}fn+1,0,0​,fn+1,0,1​,fn+1,1,0​,fn+1,1,1​ 000 0/10/10/1 不放 111 转移矩阵 [0100100100000100]\left[ \begin{array}{c} 0 &amp; 1 &amp; 0 &amp; 0\\ 1 &amp; 0 &amp; 0 &amp; 1\\ 0 &amp; 0 &amp; 0 &amp; 0\\ 0 &amp; 1 &amp; 0 &amp; 0 \end{array} \right] ⎣⎢⎢⎡​0100​1001​0000​0100​⎦⎥⎥⎤​ 树形DP 重点！如果合并两个子树时间是两个子树的乘积，那么这个树形DP是平方的 模板 1234567891011121314151617181920212223242526#include &lt;bits/stdc++.h&gt;using namespace std;void merge(int x, int p) &#123; // 合并子树 f[p][0] = f[p][1] + /* max(f[k][0], f[k][1]) */; f[p][1] = f[p][0] + f[x][1];&#125;void init(int x) &#123; // 初始化 // f[k][0] = 0;// f[k][1] = 1;&#125;void treedp(int x) &#123; // 树形dp 不需要改 for (int i = 0; i &lt; c[x].size(); i++) &#123; treedp(c[x][i]); &#125; init(x); for (int i = 0; i &lt; c[x].size(); i++) &#123; merge(c[x][i], x); &#125;&#125;int main() &#123; // 状态 -&gt; init -&gt; merge &#125; 最大独立集 同模板 例题2 123456state: f[i][0], f[i][1]init : f[i][1] = f[i][0] = 0;merge: f[x][1] = max(f[p][1] + max(f[x][1], f[x][0]), f[p][0] + f[x][0] + 1); : f[x][0] = f[p][0] + max(f[x][1], f[x][0]); // 缺失部分 例题3 12345state: f[i][0] 我不是，孩子也不是[不合法] : f[i][1] 我不是，孩子是[合法] : f[i][2] 我是[满足]init : f[i][0] = 0, f[i][2] = 1, f[i][1] = 0x3f3f3f3fmerge: x\p 0 1 2 0 2 1 0 1 2 2 1 1 2 HOMEWORK：距离为222 例题4 简化版(只考虑子树) 12345f[i][x][y] 当前子树关键点 当前子树的子树f[i][0][0] = 0f[i][1][0] = 1f[i][0][1] = f[i][1][1] = 0x3f3f3f3f x\p 0,0 0,1 1,0 1,1 0 0,1 1,1 1 1,0 1,1 1,0 1,1 普通版 存在度数大于333的点 贪心地选一个度大于333的点为根，然后同简化版 不存在(链)，输出111。 例题5 1234567f[i]表示只删以i为根的子树的ans(minimal maximum)f[叶子]=0x3f3f3f3ff[其它]=0merge:f[i]=max(f[i], x); 练习1 1234 0 1 ---0|0 11|0 x ans = 5471492 [暂缺] 例题6 简化版(只考虑子树) ff=max⁡(ff,fj−wj)f_f=\max(f_f, f_j-w_j)ff​=max(ff​,fj​−wj​) 普通版 令子树外最长路为uiu_iui​。 维护次大值gfg_fgf​和fff_fff​的来源wherefwhere_fwheref​。 gfg_fgf​初始000。 1234if (f[k] + w &gt; f[f]) &#123; g[f] = f[k]; &#125; 123456User -&gt; Web: SubmitWeb -&gt; Judger: SubmitNote right of Judger: Waiting &amp; JudgingJudger -&gt; Web: WAWeb -&gt; User: WANote left of User: MMP 123456789101112131415161718start=&gt;start: 做题needIOOptimize=&gt;condition: 需要快速IO?kengDie=&gt;operation: 坑爹,命题人SBimplementation=&gt;condition: 大模拟题?codeLong=&gt;operation: 难写,命题人SBconstant=&gt;condition: 题目还卡常?boring=&gt;operation: 无聊,命题人SBisEasy=&gt;condition: 题目太简单?water=&gt;operation: 太水,命题人SBend=&gt;end: 婊死出题人start-&gt;needIOOptimizeneedIOOptimize(yes)-&gt;kengDie-&gt;endneedIOOptimize(no)-&gt;implementationimplementation(yes)-&gt;codeLong-&gt;endimplementation(no)-&gt;constantconstant(yes)-&gt;boring-&gt;endconstant(no)-&gt;water-&gt;end 例题7 令每条边经过fif_ifi​次，那么ans=∑difians = \sum d_if_ians=∑di​fi​，did_idi​是权值。 dfs求出fif_ifi​即可。 监测站 乱搞 树形背包 fi,jf_{i,j}fi,j​表示iii子树jjj容量 gi,jg_{i,j}gi,j​表示不选iii的子树jjj容量 初始gi,j=0g_{i,j}=0gi,j​=0 如果选iii就一定选整个子树 ：max(gi,j,∑vi)(j≥∑vi)max(g_{i,j},\sum v_i)(j \ge \sum v_i)max(gi,j​,∑vi​)(j≥∑vi​) gi,a+b′=gi,a+fc,bg&#x27;_{i,a+b}=g_{i,a}+f_{c,b}gi,a+b′​=gi,a​+fc,b​ fi,j={gi,jj&gt;∑vi,max(gi,j,∑vi)j≥∑vi.f_{i,j}=\left\{\begin{array}l g_{i,j} &amp; j&gt;\sum v_i,\\ max(g_{i,j}, \sum v_i) &amp; j\ge \sum v_i. \end{array}\right. fi,j​={gi,j​max(gi,j​,∑vi​)​j&gt;∑vi​,j≥∑vi​.​ 时间复杂度O(n3)O(n^3)O(n3) 状压DP 例题1 fi,p[n]f_{i,p[n]}fi,p[n]​前iii衣服，pip_ipi​裤子是否配对。 for j=1...n (i+1, j)可配对，pj=0p_j=0pj​=0 f[i+1][j|(1&lt;&lt;(j-1))] += f[i][j]; 12343 91 1 1 2 1 32 1 2 2 2 33 1 3 2 3 3 例题2 拓扑排序计数(NP-Hard) fpf_pfp​选的点数。 对于所有满足要求的(k, j)，jjj没被选，kkk放了，fp∣(1&lt;&lt;(j−1))+=fpf_{p|(1&lt;&lt;(j-1))} += f_pfp∣(1&lt;&lt;(j−1))​+=fp​。 20:2n20: 2^n20:2n 18:2nn18: 2^nn18:2nn 16:2nn2/3n16: 2^nn^2 / 3^n16:2nn2/3n 例题3 tit_iti​代表第iii条直线覆盖点的。 fp=min⁡(fp∣ti,...,fp+1)f_p=\min(f_{p|t_i},...,f_p+1)fp​=min(fp∣ti​​,...,fp​+1) 固定一个端点，可以将枚举直线改为O(n)O(n)O(n)。 2n个点最短路乱搞？ 例题4 Who knows？ for i=1..m fp∣ti=max⁡(...,fp+1)(p&amp;ti=0)f_{p|t_i}=\max(..., f_p+1)(p\&amp;t_i=0)fp∣ti​​=max(...,fp​+1)(p&amp;ti​=0) 例题5 最长简单环(NP-Hard NPC) 实现例题2 (选做例题5)]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「笔记」day1 - DP]]></title>
    <url>%2F2018%2F02%2F07%2Fday1-notes%2F</url>
    <content type="text"><![CDATA[⚠️注意：这是ZROI集训的源笔记，其中有很多缺失和遗漏以及无法看懂的部分，大家就不要看了吧。 以下是原笔记： fi,j+1=fa,b(Aa=Ab,Ai=Aj,Aa&gt;Ai,i&lt;a,j&lt;b)f_{i,j}+1=f_{a,b}(A_a=A_b, A_i=A_j, A_a &gt; A_i, i&lt;a, j&lt;b)fi,j​+1=fa,b​(Aa​=Ab​,Ai​=Aj​,Aa​&gt;Ai​,i&lt;a,j&lt;b) 二叉树枚举aaa，求出jjj之后第一个Aa=AbA_a = A_bAa​=Ab​ 预处理？ ni,x≠i+1,ni,x=ni+1,xn_{i,x} \ne i+1, n_{i,x}=n_{i+1,x}ni,x​≠i+1,ni,x​=ni+1,x​ ni,x=i+1,ni,x=i+1n_{i,x} = i+1, n_{i,x} = i+1ni,x​=i+1,ni,x​=i+1 1| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | fn,m=(s−1n−1)∑s=1nfn−s,m−1f_{n,m} = \binom {s-1} {n-1}\sum_{s=1}^nf_{n-s,m-1}fn,m​=(n−1s−1​)∑s=1n​fn−s,m−1​ fn,m=mfn−1,m+fn−1,m−1f_{n,m}=mf_{n-1,m}+f_{n-1,m-1}fn,m​=mfn−1,m​+fn−1,m−1​ 优化状态？转移？ 错排问题 fnf_nfn​ 当a≠na \ne na≠n时，(n−1)fn−2(n-1)f_{n-2}(n−1)fn−2​ 当a=na=na=n时，(n−1)fn−1(n-1)f_{n-1}(n−1)fn−1​ fn=(n−1)(fn−1+fn−2)f_n=(n-1)(f_{n-1}+f_{n-2})fn​=(n−1)(fn−1​+fn−2​) 逆序对 fn,mf_{n,m}fn,m​代表nnn个数产生mmm个逆序对的数量。 fn,m=∑k=1nfn−1,m−k+1f_{n,m}=\sum_{k=1}^nf_{n-1,m-k+1}fn,m​=∑k=1n​fn−1,m−k+1​ 前缀和优化 (m−n,m](m-n,m](m−n,m] fn,m=gi,m−gi,m−nf_{n,m}=g_{i,m}-g_{i,m-n}fn,m​=gi,m​−gi,m−n​ 例题2 【IMPOSSIBLE】 f_{i,j}前iii物品，取jjj的长度，方案数。 f_{i,j}=\sum_{k=0}^{w_i}g_{j-k,k}f_{i-1,j-k} 例题3 二叉树：fn=∑i=0n−1fifn−i−1(n−1i)f_n=\sum_{i=0}^{n-1}f_if_{n-i-1}\binom {n-1} ifn​=∑i=0n−1​fi​fn−i−1​(in−1​) 二叉树的子结构性质 有根树：fn=∑i=1n−1fifn−i(n−2i−1)f_n = \sum_{i=1}^{n-1}f_if_{n-i}\binom{n-2}{i-1}fn​=∑i=1n−1​fi​fn−i​(i−1n−2​) 去掉一棵子树还是一棵树 kkk叉树：f_{n,k}=\sum_{i=1}^{n-1}f_{i,1}f_{n-i,k-1}\binom{n-2}{i-1} gn,m=∑i=1n−1gn−i,m−1fig_{n,m}=\sum_{i=1}^{n-1}g_{n-i,m-1}f_ign,m​=∑i=1n−1​gn−i,m−1​fi​ fi=∑j=0kgi,jf_i=\sum_{j=0}^kg_{i,j}fi​=∑j=0k​gi,j​ gn,mg_{n,m}gn,m​ 根mmm其它nnn 拆分数 fi,j=fi,j−i+fi−1,j−if_{i, j} = f_{i, j-i} + f_{i-1, j} - ifi,j​=fi,j−i​+fi−1,j​−i n≤105n \le 10^5n≤105情况 gi,jg_{i,j}gi,j​ iii个数，和为jjj。 i≤ni \le \sqrt ni≤n​时：fi,j=fi−1,j+fi,j−if_{i,j}=f_{i-1,j}+f_{i,j}-ifi,j​=fi−1,j​+fi,j​−i i≥ni \ge \sqrt ni≥n​时：gi,j=gi−1,j−1+gi,j−ig_{i,j}=g_{i-1,j-1}+g_{i,j-i}gi,j​=gi−1,j−1​+gi,j−i​ h_j = \sum_{i=0}^\sqrt ng_{i,j-i\sqrt n} Ans=∑A=0nfn,Ahn−AAns = \sum_{A=0}^nf_{\sqrt n, A}h_{n-A}Ans=∑A=0n​fn​,A​hn−A​ Alt+F4 F(U)⊂KF(U)\subset KF(U)⊂KING HOMEWORK Y∅∪RY\emptyset\cup RY∅∪R log⁡n\log nlogn 202020 n\sqrt nn​ 300300300 求长度为500050005000恰好有100000100000100000个逆序对的排列个数 nnn个点带标号的无向图个数 nnn个点带标号的无向连通图个数 n≤5000n \le 5000n≤5000 = = ​ 2(n2)2^\binom n22(2n​) fn=2(n2)−∑i=1nfi×2(n−22)×(n−1i−1)f_n=2^\binom n2-\sum_{i=1}^nf_i\times2^\binom{n-2}2\times\binom{n-1}{i-1}fn​=2(2n​)−∑i=1n​fi​×2(2n−2​)×(i−1n−1​) 选标号(n−1i−1)\binom{n-1}{i-1}(i−1n−1​)]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[代码片段]]></title>
    <url>%2F2018%2F02%2F06%2Fcode-snippet%2F</url>
    <content type="text"><![CDATA[请从纯文本意识流中导出密码 ]]></content>
      <categories>
        <category>Internal</category>
      </categories>
      <tags>
        <tag>代码片段</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Codeforces 886C」Petya and Catacombs - 贪心]]></title>
    <url>%2F2018%2F02%2F06%2Fcodeforces-886c%2F</url>
    <content type="text"><![CDATA[题意 传送门：Codeforces 886C - Petya and Catacombs Petya在图上探险。每一分钟随机走动一次(可以原地)。 如果走到的是一个新点，随机写一个数字。 如果以前来过，写最近一次到这里的时间。 第000分钟Petya在原地并且没有写数字。 给你Petya写的一串数字，问你最少有几个点。 解法 题目绕了半天&gt;_&lt;。 TLE做法 记录每个点最后一次到的时间，每输入一个数字，O(n)O(n)O(n)地查询有没有踩过的点，如果没有就开新点，否则用久点。时间复杂度O(n2)O(n^2)O(n2)，完美TLE。 AC做法1 考虑每一个数字。每出现一个数字，可能是以前踩过的点，也可能是随机数(新点)。 并且不可能同时踩到两个不同的点，那么同一个数字出现nnn次，至少n−1n-1n−1次是随机数。 时间复杂度O(n)O(n)O(n)。 AC做法2 考虑优化TLE做法。根据AC做法1中得出的结论，每一个点最后一次到达的时间是不同的。 开一个长度为nnn的数组记录每一个时间是否是某个点的最后一次到达的时间。 然后for i=1...n scanf(&quot;%d&quot;, &amp;x)。 如果xxx是某个点最后一次到达的时间，那么就让它不是(因为那个点已经被更新了)。 否则(这是个随机数)就ans++。 并且无论是以上哪种情况，某个点最后一次到达的时间都一定会被置为iii，所以vis[i]=1。 代码 思路1 1234567891011121314#include &lt;bits/stdc++.h&gt;using namespace std;int n, x, ans = 1;int vis[200005];int main() &#123; for(scanf("%d", &amp;n); n--; ) &#123; scanf("%d", &amp;x); if (!vis[x]) vis[x] = 1; else ans++; &#125; printf("%d", ans);&#125; 思路2 1234567891011121314151617#include &lt;bits/stdc++.h&gt;using namespace std;int n, x, ans = 1;int vis[200005];int main() &#123; scanf("%d", &amp;n); vis[0] = 1; for(int i = 1; i &lt;= n; i++) &#123; scanf("%d", &amp;x); if (vis[x]) vis[x] = 0; else ans++; vis[i] = 1; &#125; printf("%d", ans);&#125; 拓展 话说两段代码长得好像啊~]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Codeforces 872C」Maximum splitting - 数学]]></title>
    <url>%2F2018%2F02%2F06%2Fcodeforces-872c%2F</url>
    <content type="text"><![CDATA[题意 传送门：Codeforces 872C - Maximum splitting 给你nnn个数，问你这些数最多可以写成多少个合数的和。n≤105,1≤x≤109n \le 10^5, 1 \le x \le 10^9n≤105,1≤x≤109 解法 考虑分解的策略。 首先，最小的444个合数分别是4,6,8,94, 6, 8, 94,6,8,9。 很明显，分解得到的合数越小越好。分类讨论： 当xxx是1,2,3,5,7,111, 2, 3, 5, 7, 111,2,3,5,7,11时无解，输出−1-1−1。 当xxx是偶数时，因为x&gt;2x&gt;2x&gt;2，而且444和666可以组成所有大于222的偶数。所以只需要用444和666即可。 当xxx是奇数时，因为大于111111的奇数和999自身都有解，并且大于111111的奇数都可以写成999和大于444的偶数的和。所以只需要用x−9x-9x−9再按情况2计算即可。 综上所述，需要用到的数字只有4,6,94, 6, 94,6,9。 现在考虑分解出的数的个数。 当xxx是1,2,3,5,7,111, 2, 3, 5, 7, 111,2,3,5,7,11时，输出−1-1−1。 当xxx能被444整除时，输出x4\frac x44x​。 当xxx是偶数且不能被444整除时，输出x−64+1\frac{x-6}4+14x−6​+1。 当xxx是奇数时，输出x−94+1\frac{x-9}4+14x−9​+1。 代码 12345678910111213141516171819#include &lt;bits/stdc++.h&gt;using namespace std;int n, x;int f(int x) &#123; if (!x) return 0; if (x &lt; 4 || x == 5 || x == 7 || x == 11) return -1; if (x &amp; 1) return f(x-9) + 1; if (x &amp; 2) return f(x-6) + 1; return x&gt;&gt;2;&#125;int main() &#123; for (scanf("%d", &amp;n); n--; ) &#123; scanf("%d", &amp;x); printf("%d\n", f(x)); &#125;&#125; 拓展 对于分解性的问题，如果需要最大化某个量，则极端地考虑可能的取值。 如最大化数量，可以考虑让数字尽可能小。 如最大化乘积，可以考虑让2,32, 32,3尽可能多。 然后再证明自己的猜想，如本题的&quot;4,6,94, 6, 94,6,9&quot;。]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Codeforces 897C」Short Program - 位运算]]></title>
    <url>%2F2018%2F01%2F01%2Fcodeforces-897c%2F</url>
    <content type="text"><![CDATA[题意 传送门：Codeforces 897C 给一串位运算操作(包含| &amp; ^，每个操作数均落在。中)，将其简化到5次运算以内并输出。 解法 过程 考虑交换律和结合律。显然1|1^1$\ne$1^1|1。所以要换一种思路。 我们可以将102310231023和000同时进行运算。 再考虑将&amp; | ^三种运算转化为| ^两种。 如将102310231023和000带入以下运算： 123456789101110 1111111111 0000000000^ 218 0011011010 1100100101&amp; 150 0010010010 0000000100| 935 1110110111 1110100111&amp; 61 0000110101 0000100101| 588 1001111101 1001101101&amp; 897 1000000001 1000000001| 411 1110011011 1110011011| 584 1111011011 1111011011^ 800 0011111011 0011111011| 704 1011111011 1011111011 使用| ^代替&amp; | ^的方法： 置零，使用|1^1 置一，使用|1^0 不变，使用|0^0 反转，使用|0^1 令1023 or x xor y=a=7631023\ or\ x\ xor\ y=a=7631023 or x xor y=a=763，0 or x xor y=b=7630\ or\ x\ xor\ y=b=7630 or x xor y=b=763 即如果aaa和bbb某一位一样，xxx的那一位就是1，yyy的那一位就是bbb那一位的反码。 如果不一样，xxx的那一位就是000，yyy的那一位也是bbb那一位的反码。 两数每一位相同得111，不同得000，就是a xor b xor 1023a\ xor\ b\ xor\ 1023a xor b xor 1023的值。 bbb的反码即b xor 1023b\ xor\ 1023b xor 1023。 结论 x=a xor b xor 1023x = a\ xor\ b\ xor\ 1023x=a xor b xor 1023 y=b xor 1023y = b\ xor\ 1023y=b xor 1023 O(n)O(n)O(n)边读边算aaa和bbb，最后O(1)O(1)O(1)算xxx和yyy即可。 代码 123456789101112131415161718192021222324252627282930#include &lt;bits/stdc++.h&gt;#define p(q) ((q) &amp;&amp; (q) != X)#define X 0x3f3f3f3fusing namespace std;int a = 0, b = 1023;char op[1];int n, t;int main() &#123; scanf("%d", &amp;n); for (int i = 1; i &lt;= n; i++) &#123; scanf("%s%d", op, &amp;t); switch (*op) &#123; case '&amp;': a &amp;= t; b &amp;= t; break; case '|': a |= t; b |= t; break; case '^': a ^= t; b ^= t; break; &#125; &#125; printf("2\n| %d\n^ %d", a ^ b ^ 1023, b ^ 1023);&#125; 拓展 位运算+构造算法(bitmasks+constructive algorithms)的题目的几种思考方式： 对每一位考虑(位运算都是隔离每位的，不存在借位进位这种影响其它位的运算) 对逆运算考虑(如1216-D，前缀和转为差分) 对结果考虑(结果反向构造过程)]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1216-D - 差分]]></title>
    <url>%2F2017%2F12%2F20%2Fyali-1216-d%2F</url>
    <content type="text"><![CDATA[题意 传送门：1216-D 有一个n​个数的序列，一开始所有的数都是0​，每次可以将一个区间[l,r]​ (l≤r)​内的数+1​，求到达最终状态的最少操作次数。 n≤105,m≤105n \le 10^5,m \le 10^5n≤105,m≤105，mmm为操作次数。 解法 正难则反：考虑已知每次操作，求序列。可使用前缀和。 如样例输出： 123431 61 62 6 将闭区间转为左闭右开，即[1,7),[1,7),[2,7)[1, 7), [1, 7), [2, 7)[1,7),[1,7),[2,7)，则可得到： 1234下标: 1 2 3 4 5 6 7数组: 2 1 0 0 0 0 -3前缀和后得到原序列:原序列: 2 3 3 3 3 3 0 根据前缀和的逆运算是差分，得到O(n+m)O(n+m)O(n+m)解法。 优化 既然差分之后就可以求出所有区间，为什么不直接往队列里面丢呢？ 如差分序列2 1 0 0 0 0 -3，进行以下处理： 遇到正数222，直接丢222个下标111在存lll的队列中。 123l队列 r队列11 遇到正数111，直接丢111个下标222在存lll的队列中。 1234l队列 r队列112 遇到负数-3，直接丢∣−3∣=3|-3|=3∣−3∣=3个下标7−1=67-1=67−1=6在存rrr的队列中。 1234l队列 r队列1 61 62 6 输出即可。 123431 61 62 6 时间复杂度O(n+m)O(n+m)O(n+m)。 代码 1234567891011121314151617181920#include &lt;bits/stdc++.h&gt;using namespace std;int out[100005][2]; //模拟队列int n, x, m1, m2, r;int main() &#123; scanf("%d", &amp;n); for (int i = 1; i &lt;= n; i++) &#123; scanf("%d", &amp;x); if (r &lt; x) for (int j = x-r; j--;) out[m1++][0] = i; if (r &gt; x) for (int j = r-x ; j--;) out[m2++][1] = i-1; r = x; &#125; for (int j = r ; j--;) out[m2++][1] = n; printf("%d\n", m1); for (int i = 0; i &lt; m1; i++) &#123; printf("%d %d\n", out[i][0], out[i][1]); &#125;&#125; 拓展 正难则反：很多题目需要逆向思考。如将差分题逆向思考得到前缀和。多考虑互逆运算之间的转化关系。]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Y</tag>
        <tag>差分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Luogu P1704」寻找最优美做题曲线 - DP]]></title>
    <url>%2F2017%2F12%2F09%2Fluogu-1704%2F</url>
    <content type="text"><![CDATA[题意 传送门：洛谷 P1704 - 寻找最优美做题曲线 现在给出每一天刷题的题数，并且有几天必须刷题，问最多可以刷多少天的题并且满足严格递增。 说白了就是，给一个序列，告诉你有一些下标上的数必须包含在LIS中，求满足条件的LIS，就是被禁锢的LIS。 解法 变量定义 12345int p[500005], t[500005]; // p代表必须刷题的时间, t代表每天刷题的题数int lis[500005]; // LIS数组int c[500005]; //处理过的刷题题数int n, m, x; // n天, m天必须刷题int ans; // 答案 读入 贴代码不解释： 12345678scanf("%d%d", &amp;n, &amp;m);for (int i = 1; i &lt;= m; i++) &#123; scanf("%d", p+i);&#125;sort(p+1, p+m+1);for (int i = 1; i &lt;= n; i++) &#123; scanf("%d", t+i);&#125; 处理 首先，如果必须刷题的那几天不严格递增，咳咳。 1234567for (int i = 2; i &lt;= m; i++) &#123; if (t[p[i]] &lt;= t[p[i-1]]) &#123; puts("impossible"); return 0; &#125;&#125;proc(); 接下来是对LIS做一些处理。 首先，如果一个序列中的数比前面的数都大，比后面的数都小，那这个数一定包含在LIS中。 那么我们可以使需要刷题的每一天都满足这个要求。 如数据：12 6 10 11 8 12 10 11 16 14 17 13 14 18，我们可以进行以下骚操作： 12 6 10 11 8 12 10 11 16 14 17 13 14 18 得到6 10 11 16 17 18。 代码如下： 123456789101112131415161718192021void proc() &#123; // int new_n = 0; c[0] = t[0] // t中的内容处理后被存入c中 int nx = 0; *c = *t; for (int i = 1; i &lt;= m; i++) &#123; if (i &gt; 1) c[++nx] = t[p[i-1]]; for (int j = p[i-1]+1; j &lt; p[i]; j++) &#123; // 两个必须刷题的日子的中间 if (t[p[i-1]] &lt; t[j] &amp;&amp; t[j] &lt; t[p[i]]) &#123; c[++nx] = t[j]; &#125; &#125; &#125; c[++nx] = t[p[m]]; for (int i = p[m]+1; i &lt;= n; i++) &#123; // 最后一个必须刷题的日子之后 if (t[p[m]] &lt; t[i]) &#123; c[++nx] = t[i]; &#125; &#125; c[++nx] = t[p[m]]; n = nx;&#125; LIS O(nlog⁡n)O(n \log n)O(nlogn)的LIS算法参见这里，代码如下： 123456for (int i = 1; i &lt;= n; i++) &#123; int pos = lower_bound(lis+1, lis+ans+1, c[i]) - lis; lis[pos] = c[i]; ans = max(ans, pos);&#125;printf("%d", ans); 代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;bits/stdc++.h&gt;using namespace std;int p[500005], t[500005];int lis[500005];int c[500005];int n, m, x; int ans;void proc() &#123; int nx = 0; *c = *t; for (int i = 1; i &lt;= m; i++) &#123; if (i &gt; 1) c[++nx] = t[p[i-1]]; for (int j = p[i-1]+1; j &lt; p[i]; j++) &#123; if (t[p[i-1]] &lt; t[j] &amp;&amp; t[j] &lt; t[p[i]]) &#123; c[++nx] = t[j]; &#125; &#125; &#125; c[++nx] = t[p[m]]; for (int i = p[m]+1; i &lt;= n; i++) &#123; if (t[p[m]] &lt; t[i]) &#123; c[++nx] = t[i]; &#125; &#125; c[++nx] = t[p[m]]; n = nx;&#125; int main() &#123; scanf("%d%d", &amp;n, &amp;m); for (int i = 1; i &lt;= m; i++) &#123; scanf("%d", p+i); &#125; sort(p+1, p+m+1); for (int i = 1; i &lt;= n; i++) &#123; scanf("%d", t+i); &#125; for (int i = 2; i &lt;= m; i++) &#123; if (t[p[i]] &lt;= t[p[i-1]]) &#123; puts("impossible"); return 0; &#125; &#125; proc(); for (int i = 1; i &lt;= n; i++) &#123; int pos = lower_bound(lis+1, lis+ans+1, c[i]) - lis; lis[pos] = c[i]; ans = max(ans, pos); &#125; printf("%d", ans);&#125; 拓展 对于限制或改版LIS问题，可以做一定的处理，使其变为正常LIS，然后再使用裸LIS算法解决。或者设计针对题目的算法。 这里列出一些相关的题目： LICS 最长上升公共子序列 二元组LIS 最长震荡子序列]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Internetl」深拷贝之殇 - 底层]]></title>
    <url>%2F2017%2F12%2F08%2Fdeep-copy-notes%2F</url>
    <content type="text"><![CDATA[请从纯文本意识流中导出密码 ]]></content>
      <categories>
        <category>Internal</category>
      </categories>
      <tags>
        <tag>底层</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Internal」一个UB引发的血案 - 底层]]></title>
    <url>%2F2017%2F12%2F08%2Fundefined-behavior-notes%2F</url>
    <content type="text"><![CDATA[请从纯文本意识流中导出密码 ]]></content>
      <categories>
        <category>Internal</category>
      </categories>
      <tags>
        <tag>底层</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「经典」八数码问题 - BFS]]></title>
    <url>%2F2017%2F11%2F24%2Feight-digits-puzzle%2F</url>
    <content type="text"><![CDATA[题意 这么经典的题目还要题意… 传送门：洛谷 P1379(让我想到了1379号监听员😆) 思路 不会写康托展开，遂用数字存储，然后使用bitset存储visited数组。 输入后对输入的局面BFS。 交换整数中的数字 首先，数字中的下标对应以下表格： 0 1 2 3 4 5 6 7 8 那么， 上下交换就是xxx和x+3x+3x+3交换(x&lt;5)(x&lt;5)(x&lt;5)， 左右交换就是xxx和x+1x+1x+1交换(x&lt;7)(x&lt;7)(x&lt;7)。 但有个问题，如果2和3交换或者5和6交换那就不行了。 所以有一个神奇的方法：判断两数相乘是否为6或30😆。 123456789，若要将3和7交换， 首先记忆3，接下来减7×1027 \times 10^27×102，然后加3×1023 \times 10^23×102， 再减3×1063 \times 10^63×106，最后加7×1067 \times 10^67×106。 输出路径？ 集训的题目要输出路径，那就加个map存前驱，然后递归打出来。 Talk is cheap! Give me the code! 代码在这里： 可以AC洛谷P1379 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include &lt;bits/stdc++.h&gt;#define t(x) ((((x)&lt;&lt;2)+(x))&lt;&lt;1)#define l(x, i) ((x)/p10[i]%10)#define w(x, i) (*(x+i))using namespace std;// 预处理10^nconst int p10[] = &#123;1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000&#125;;const int dir[4] = &#123;3, -3, 1, -1&#125;; // 方向矢量map&lt;int, int&gt; dep; // 深度queue&lt;int&gt; bfs; // 广搜队列int n; // 数字int main() &#123;// #ifndef __TIGER0132__// freopen("9gong.in", "r", stdin);// freopen("9gong.out", "w", stdout);// #endif scanf("%d", &amp;n); bfs.push(n); dep[n] = 0; // 初始深度 while (!bfs.empty()) &#123; int pos = bfs.front(); bfs.pop(); int cdep = dep[pos] + 1; // 现在搜到的数字的深度 int _0; // 数字中0的位置// printf("%d\n", pos); if (pos == 123804765) &#123; printf("%d", dep[pos]); return 0; &#125; for (_0 = 0; _0 &lt; 9; _0++) &#123; // 搜索0的位置 if (!l(pos, _0)) break; &#125; for (int i = 0; i &lt; 4; i++) &#123; int p0 = _0; // 第一个要交换的数的下标 int p1 = _0+w(dir, i); // 第二个要交换的数的下标 int p2 = pos, p3; // p2是pos的拷贝, p3临时变量 // 判断交换是否合法 if (p0 &lt; 0 || p1 &lt; 0 || p0 &gt; 8 || p1 &gt; 8 || p0*p1 == 6 || p0*p1 == 30) continue; p3 = l(p2, p0); // t = a; p2 += (l(p2,p1) - l(p2,p0))*p10[p0]; // a = b; p2 += (p3 - l(p2,p0))*p10[p1]; // b = t; if (dep.count(p2)) continue; // 判断是否搜过 bfs.push(p2); // 入队 dep[p2] = cdep; // 更新深度 &#125; &#125; puts("Oh no! Where's my solution?");&#125; 教训 ⚠️不要无脑register，不然TLE自己负责！]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>经典</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「算法」线段树]]></title>
    <url>%2F2017%2F10%2F29%2Fsegment-tree-notes%2F</url>
    <content type="text"><![CDATA[简介 线段树是一种存储区间的二叉树，用于快速解决满足区间加法的区间问题。 普通线段树 结构 左孩子和右孩子平分父节点的区间，代码如下： 123456struct node &#123; int sum, l, r; // sum可替换成max, min等等 // lchild = 2i, rchild = 2i + 1&#125; segTree[n &gt;&gt; 1]; 建树 自顶向下搜到叶子，再逐级更新到根。就像这样： 1234567891011121314void build(int id, int l, int r) &#123; // id代表现在访问到的节点编号, l, r代表查找区间 // 调用时则build(1, 1, n) tree[id].l = l; tree[id].r = r; if (l == r) &#123; tree[id].sum = arr[l]; &#125; else &#123; int mid = (l + r) &gt;&gt; 1; build((id &lt;&lt; 1), l, mid); build((id &lt;&lt; 1) | 1, mid + 1, r); tree[id].sum = tree[id &lt;&lt; 1].sum + tree[(id &lt;&lt; 1) | 1].sum; &#125;&#125; 单点修改 从根节点自顶向下查询，查到叶子节点更新然后返回并更新所有遇到的节点。Like this： 12345678910111213void modify(int id, int target, int value) &#123; // id代表现在访问到的节点编号, target代表目标的下标, value代表新值 int mid = (tree[id].l + tree[id].r) &gt;&gt; 1; if (tree[id].l == tree[id].r) &#123; tree[id].sum = arr[tree[id].l] = f(arr[tree[id].l]); return; &#125; else if (target &gt; mid) &#123; modify((id &lt;&lt; 1) | 1, target, f); &#125; else &#123; modify((id &lt;&lt; 1), target, f); &#125; tree[id].sum = tree[id &lt;&lt; 1].sum + tree[(id &lt;&lt; 1) | 1].sum;&#125; 单点查询 从根节点自顶向下，查到叶子节点返回。 区间修改 施工中，未完待续… 区间查询 12345678910111213int sum(int id, int l, int r) &#123; if (tree[id].l &gt;= l &amp;&amp; tree[id].r &lt;= r) &#123; return tree[id].sum; &#125; int sum = 0, mid = (tree[id].l + tree[id].r) &gt;&gt; 1; if (l &lt;= mid) &#123; sum += this -&gt; sum((id &lt;&lt; 1), l, min(mid, r)); &#125; if (r &gt; mid) &#123; sum += this -&gt; sum((id &lt;&lt; 1) | 1, max(mid + 1, l), r); &#125; return sum;&#125; 空间复杂度 空间复杂度为O(4n)=O(n)O(4n) = O(n)O(4n)=O(n) 时间复杂度 建树O(n)O(n)O(n) 单点修改O(log⁡n)O(\log n)O(logn) 单点查询O(logn)O(log n)O(logn) 区间修改O(berO(berO(ber) 区间查询O(n)O(n)O(n) zkw线段树 ⚠️⚠️！！Attention！！(i&lt;&lt;1)|1不要写成i&lt;&lt;1|1！！！ 结构 堆式存储，lchild=2i,rchild=2i+1lchild = 2i, rchild = 2i+1lchild=2i,rchild=2i+1： 12345// 在这里, M必须是2^n// segTree用来存最大值最小值之内的东西// 如果有需要可以开个node或者多用几个数组int segTree[M &gt;&gt; 1];// 没了? 没了. 特性：因为叶子节点是原数组所以直接下标加M就可以找到原数组。 建树 施工中，未完待续… 12345678void build(int n) &#123; for (i = M; i &lt; M + n; i++) &#123; scanf("%d", segTree + i); &#125; for (i = M - 1; i; i--) &#123; segTree[i] = min(segTree[i &lt;&lt; 1], segTree[(i &lt;&lt; 1) | 1]); &#125;&#125; 单点修改 施工中，未完待续… 区间修改 施工中，未完待续… 区间查询 施工中，未完待续… 空间复杂度 施工中，未完待续… 时间复杂度 施工中，未完待续… 建树O(n)O(n)O(n) 单点修改O(1)O(1)O(1) 区间查询O(logn)O(log n)O(logn)]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>模板</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Internal」二元组dp - DP]]></title>
    <url>%2F2017%2F10%2F15%2Fpair-dp-notes%2F</url>
    <content type="text"><![CDATA[请从纯文本意识流中导出密码 ]]></content>
      <categories>
        <category>Internal</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常见错误]]></title>
    <url>%2F2017%2F10%2F12%2Fmistakes%2F</url>
    <content type="text"><![CDATA[本文收集常见以及不常见的各种错误！ 错误 技术问题 溢出 运算溢出(爆int/long long) 中间结果溢出(如组合数) 循环结束条件溢出(少见，会导致TLE) 其它原因导致溢出(如越界) 错误答案 参见&quot;溢出&quot; 超时 参见&quot;溢出&quot; 循环结束条件有误 崩溃 数组开大(开小) 递归(dfs)结束条件有误 scanf没写取值符 优先级 线段树(i&lt;&lt;1)|1写成i&lt;&lt;1|1 底层问题 内存和UB 深浅拷贝 非技术问题 没写文件 编译错误 没建子文件夹 随时更新…]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>常见错误</tag>
      </tags>
  </entry>
</search>
